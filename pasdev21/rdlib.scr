$num off
$page $cen
RDLIB DOCUMENTATION STANDARD
$jus $ski 3
This document defines a &documentation standard& for the routines
contained in RDLIB, to facilitate their use, updating, and general efficiency.
$ski 2 $cen
PACKAGES
$ski $jus
A &package& is a collection of one or more subroutines, presumably with
some common purpose, interdependency, or intercommunication requirements.
In general, a package need not be a single object module, nor must it
be completely self-contained, without references to other RDLIB routines
or to other system routines (e.g.\PASLIB). It is assumed, however, that
routines are combined into a single RDLIB package as an expression of
common function, purpose, or interdependency.
$ski
With this in mind, every package in RDLIB should have as the first part
of its documentation a &package description&, which defines the commonality
of the routines, i.e.\why these routines are contained in a single package.
This description should include a &brief& description of each entry point,
a discussion of any shared or common data structures, and an elucidation
of any intercommunication or interdependency between the routines contained
within the module. For example, if a set of routines uses a defined type
or types as parameters, a brief discussion of each &type& may make the
commonality of the routines clearer. Similarly, if the routines together
perform a reasonably well-defined function, this function should be explained
in sufficient detail to show why the function has been subdivided into
separate routines. In general, the package description should present
the entire package in such a manner that, without going into detail for
each routine, the function and purpose of the package as a whole are clear.
$ski
Several of the routines currently in RDLIB are not part of a package. In
a certain sense, they form their own package, but are not related to other
routines in RDLIB.  Such stand alone routines need not have a package
description.
$ski 2 $cen
ENTRY POINTS
$jus $ski
Each entry point in each package in RDLIB should have a &routine header&,
of the type generated by the HEADER facility. The header input, in the
form of PMF macro calls, will be processed by HEADER and included in
the source code of the package. In addition, a facility on the RDLIB
account, called DOCMNT, will use the same HEADER source and prepare a 
&routine description& for inclusion in the programming notebooks.
This should minimize the amount of documentation work for RDLIB
packages; since the programmer will have to write one-page descriptions
for the final documentation, preparing them in macro form and processing
them should be not only easier, but also will provide simpler documentation
for the source code.
$ski
DOCMNT is invoked as a .MIC file, i.e.:
$ski $ind left +5 $ver
./DOCMNT[52250,262] <fn>
$ski $ind left -5 $jus
where <fn> is the name of files to be used. Input for PMF is taken from
fn.DOC, and final output is written to fn.TXT. The file fn.TMP is used
as a temporary, and deleted within the .MIC file.
$ski
Stand alone routines in RDLIB should also have a routine description.
Further, routines which serve identical purposes or perform identical
functions, but differ in some minor detail, need not have separate
routine descriptions. For example, there are two PRGDIR entry points;
one returns the high-segment ppn identification as a string, the other
as a full word integer. These two entries need not have separate
routine descriptions.
$ski
The macro file will be converted into a routine description in the
following manner:
$ski $ind left 4 $par -4
1.\\WIDTH\-\The width of the description will be the default SCRIBE width.
$ski $par -4
2.\\SYSTEM\-\The text within the SYSTEM macro call, if present, will appear
as a right-justified title for the page. This call should be included.
$ski $par -4
3.\\MODULE\-\The date within the MODULE macro call will appear as the
second line of the right-justified title. The module name will appear
as the first justified text line, preceded by an "Entry:" subtitle.
For example,
$ski $ver
&Entry&:\\FOO
$ski $jus
The text following the MODULE macro call will be placed as a justified
paragraph of text underneath the "Entry:" subtitle, separated from the
subtitle by a blank line. This text should explain the purpose and/or
function of the entry point.
$ski $par -4
4.\\USAGE\-\The text following the USAGE macro call will be placed
verbatim on the page, indented 5 spaces. This text should give the
calling sequence of the routine.
$ski $par -4
5.\\ENTRY\-\Any ENTRY macro calls are ignored.
$ski $par -4
6.\\INPUT\-\The INPUT arguments are placed under a single subtitle 
"Input arguments:". Each input argument is placed indented two spaces
from the subtitle, with continuation lines of the argument description
indented 10 spaces from the subtitle.
$ski $par -4
7.\\OUTPUT\-\The OUTPUT arguments are processed similar to INPUT arguments.
$ski $par -4
8.\\REQUIREMENTS\-\If present, the REQUIREMENTS text is placed in a section
with the subtitle "Requirements:", with no indentation.
$ski $par -4
9.\\EFFECTS\-\If present, the EFFECTS text is processed similar to the
REQUIREMENTS text.
$ski $par -4
10.\ALGORITHM\-\The ALGORITHM call, if present, is processed similar to
the REQUIREMENTS call.
$ski $par -4
11.\NOTES\-\The NOTES text, if present, is processed similar to the
REQUIREMENTS text.
$ski $par -4
12.\INCLUDE\-\The INCLUDE files are listed, one to a line, under a
subtitle "Include files:".
$ski $par -4
13.\EXTERNAL\-\The EXTERNAL calls, if present, are ignored, as any
such dependencies should have been explained in the package description.
$ski $par -4
14.\RESPONSIBLE\-\The RESPONSIBLE call is ignored.
$ski $par -4
15.\CHANGE\-\The CHANGE call is ignored.
$ski $par -4
16.\END\-\The END call must appear. SCRIBE is run in the .MIC file with
the carriage control option, so a form feed will follow every page
to SCRIBE. This permits the concatenation of output files from
DOCMNT to be typed on a final copy terminal.
