$title left 'QED MEMO #1 - LARGE FILE EDITING' LEFT '12/21/78' LEFT 'S. M. Roush'
$skip 3
I. &INTRODUCTION&
$skip 1
This is the first in a series of memos on issues involved
in the specification of a new QED.
The intent is to identify the major design 
issues, suggest approaches and elicit comments and suggestions.
The ultimate goal is to define a common QED for use on all
MDSI systems: the PDP-10, the 940, Series 1, Series 2 the
ST-1, etc.
  Clearly, the editor would not be identical on all of these
systems.
Subsets appropriate to particular
systems would be defined.  
An open question is whether or not strict subsets are desirable.
For example an editor for the ST-1 might have special features
for paper tape editing but otherwise offer a small subset of all the
commands in the specification.
A common implementation is also desirable but
is certainly not entirely feasible.
Different systems will require different file name parsing routines
at a minimum.  
An open question is whether multiple sets of buffer
routines would also be necessary.
$skip 1
The topic of this first memo  is editing files larger
than available primary memory.
This is an issue which, depending on how it is resolved, could
impact the entire editor.
A  related issue that will also be discussed is how
to handle paper tape editing.  
These two problems could be handled in similiar fashions.
We will talk about 'large' files throughout this memo but it
should be kept in mind that the size of file which can
be handled in main memory will vary tremendously from
one system to another.
Two basic approaches to the problem of large files are possible.
First, the distinction between information
in main memory and that on secondary memory could be made
transparent to the user.  
Second, the user could explicitly move a 'window' over
the file using editor commands.  
The window would correspond to the section of the file
currently in primary memory.
Each of these approaches will be discussed below.
$skip 2
&TRANSPARENT BUFFERING&
$skip 1
The transparent approach has two major advantages. 
The first is ease of use; the user need not give explicit
window control commands.
The second advantage is consistency across systems.
In a non-transparent approach the size of the in-memory window would vary widely from system 
to system.
Thus if explicit window manipulation commands are necessary,
identical files may have to be edited differently on different systems.
This may be an increasingly common situation as floppy disk
equipped smart terminal become more widely used.
$skip 1
The implementation of transparent buffering is not as straight
forward as a non-transparent implementation.
However, the UNIX editor on the PDP-11 is an example
of a successful editor running on a
minicomputer and using the transparent approach.
The UNIX editor shares QED's roots and has a very similiar
set of commands.
The transparent approach is more likely to require multiple 
implementations of the editor's buffer manipulation
routines.
$skip 1
A important question is the efficiency of an editor using this
approach.
Personally, I feel that transparent approaches are at no more
of a disadvantage in this respect than window editors.
Local operations, that is, operations on lines near the current line,
can be done efficiently since they will access either lines already
in main memory or lines requiring few disk I/O operations
 to bring them into memory (tape editing
will be discussed shortly).
Global operations, that is, operations on either the entire file
or on lines far from the current line, will be slow if the size of
the in-memory buffer is small compared
to the size of the entire file.
However, window approaches tend to have the identical characteristics
and are often considerably less flexible as well (forbidding operations
on text which the window has already passed by, for example).
Thus, the user who moves sequentially forward through the file, editing 
locally at various points, is able to operate with little
performance degradation with a transparent scheme.
At the same time he has the freedom to move backwards in the
file and perform global FINDs and SUBSTITUTEs when  required.
This brings up  the desirability  
of doing backwards context searches.
In all the current MDSI QEDs a context search to find a line a
relatively small number of lines before the current line will
search almost the entire file.
This makes 'local' editing difficult.
$skip 1
The BOUND command of the Pascal QED editor would also
facilitate local editing.
The BOUND command restricts the effect of commands to a
subsection of the file.
Thus context searches are automatically limited to the
current section of the file.
This is important when a context search fails.
$skip 1
Obviously, paper tape editing of large files has to be
constrained to a forward moving style of operation.
The text currently in primary memory can be accessed
'randomly' but text the window has already passed is
inaccessible.
  Similiarly, text beyond the
window can be accessed only by permanently
moving the window forward.
In a transparent approach two problems arise.
First the user has no explicit control over the window's
movement.
  Second,  the current position of the 
window may be awkward to determine.
One approach to this problem would be to add explicit window
control commands to tape implementations ONLY.
This forsakes any idea of defining strict
subset editors, but it is not clear that this is a  
problem.
Tape editing seems to be a rather special situation and it
seems unreasonable to constrain all users for the sake
of maintaing a paper tape compatible
subset.
$skip 2
$need 4
&EXPLICIT WINDOW CONTROL&
$skip 1
One of the primary issues here is whether the window
may be moved forward only or backward as well.
The forward only approach is both easy to implement and is highly compatible with
paper tape editing.
Its primary disadvantage is that it may be inconvenient to
use.
The only way to edit text which the window has already passed
over is to close out the current edit and begin a new edit of
the file just closed.
Forward and backward movement of the window will involve an
implementation which is just as elaborate as that required
by a transparent approach.
However, the user is no longer constrained to one pass.
motion editing.
Paper tape editing is no longer identical, but
it might be possible to define a strict subset of the
window manipulation commands which are available for tape editing.
This would require careful choice of the window manipulation commands.
$skip 1
A second issue is whether line numbers should be relative
to the start of the buffer (as in MDSI 940 QED) or absolute
(as in ST-1 QED).
If line numbers are relative to the start of the
buffer then line numbered listings are of little value.
Presumably use of any line number
outside the buffer would be an error.
If line numbers are absolute a symbol for addressing
the first line of the window is desirable.
It would also have to be decided whether references to lines outside
the window were errors or implicit commands to move the window.
In any editor where the window can only be moved by explicit
commands global commands may be impossible.
For example to change all occurances of 'foo' to 'foolish' would
require moving the window and issuing the command 
a number of times equal to the number of windows needed to 'cover' 
the file.
An alternative to this would be to introduce 'deferred'
substitutions as is done in the ST-1 QED.
$skip 1
It would be highly desirable to have the windowing invisible
when files will fit in main memory.
However, this can lead to a situation where you suddenly overflow
the capacity of primary memory and you are effectively forced
to operate in a different mode.
For example on the MDSI 940 QED you are suddenly
told that there is no output file open, buffer commands are
now available and must be used, line numbers are now relative
to the start of the buffer rather than absolute and
you are constrained to forword moving window style editing.
This implicit and automatic mode switch could be rather
disconcerting, especially to the novice user.
The problem is that QED is a file oriented editor.
Typically a file is loaded into memory, edited and then all
or part of the file is written to an output file.
Both the choice of the output file and how much, if any,
of the resulting text is to be saved are determined &after&
all editing has taken place.
A single pass window editor translates one or more input
files into one or more output files.
At any given time the window is passing over a
'current' input file. 
Text the window passes over is written to a 'current'
output file, unless output is disabled.
This is a more restrictive mode of operation than that
permitted by the current QEDs when used with 'small' files.
$skip 1
The Pascal QED bound command performs a function somewhat
similiar to a windowing scheme with window movement only via
explicit commands.
Sections defined by the BOUND command are based on logical
divisions within the file.
The size of a window is determined by the amount of buffer
space available.
However the BOUND command's effect of restricting commands
to a subsection of the file can be valuable.
This is especially true in a single pass window
editor in which a reference to a line outside the
window implicitly moves the window.
In such an editor some means of restricting the execution
range of commands is very desirable.
Without such a mechanism a context search which fails moves
the window to the end of the file.
A BOUND command which restricts the effect of commands
to the current window would be valuable with such an
editor.
Implicit movement of the window is convenient in many situations.
Yet when much editing is to be done within the current window,
the ability to restrict commands to the window
is a good safety feature.
A 'bound to the current window' command leaves this decision
under the explicit control of the user.
$skip 1
Finally, a variety of approaches to window movement commands
are possible. 
One approach is to always move the window by as much as possible.
Initially, as much text as will fit in main memory is loaded.
The user can then give a command which writes the current 
buffer to a disk file and reads in as much text as
possible from the current position
in the input file.
This approach is simple but not very flexible.
The user has no control over the 'centering' of the window
and no way in which to inhibit output.
An alternative is to allow the user to specify
a given line as the start (or end) of the window and then
load as much text as possible, writing any intervening
text to a disk file.
Commands for switching input files, switching output
files and reading text without writing it to a file
are also possible.
Precisely defining these commands is a critical step in 
specifying a window style editor.
$skip 2
IV. &CONCLUSIONS&
$SKIP 1
The advantages and disadvantages of the transparent approach
are summarized below.
$ind +5
$par -3
1.\Transparent editors are the easiest to use and to learn to use.
$par -3
2.\Editing a given file may be done identically on different
systems.
$par -3
3.\Paper tape editing cannot be done with a
strict subset of the full editor.
$par -3
4.\The implementation of a transparent editor may be more
complicated than that of a window editor.
$ind -5
$skip 1
The major points made about window editing are:
$ind +5
$par -3
1.\Window editors may be easier to implement.
$par -3
2.\Window editors are highly compatible with paper
tape
editing.
$par -3
3.\In order to retain implementation advantages window 
editors must constrain the user to single pass editing.
$par -3
4.\Window editors usually require some explicit window
manipulation commands.
$par -3
5.\The mode of operation required by window editors 
would be unfamiliar to many present QED users.
$ind -5
$skip 1
The following recommendations are made based on these points.
Any implementation of a window editor which permitted moving
the window backwards as well as forwards would be
just as complicated as the implementation of a transparent
editor.
Thus the only window editor which makes sense is a single pass 
editor.
The disadvantages of such an editor are substantial.
In particular the operating constraints placed on the 
user are a major disadvantage.
In comparison the disadvantages of the transparent approach
are minor.
Insisting that paper tape editing be done with
a strict subset of the full editor is not reasonable.
The implementation of transparent editors appears
to be a manageable problem.
The best approach seems to be
to design a transparent style editor and define a special
set of commands for use in a paper tape editor.
