#system (CMDUTL)
#module (CMD LOOKUP,8/3/80)
This routine finds the next token in a text line, looks it up in a table
of names, and returns the code field from the matching table entry.
#usage
TYPE CMD_LOOKUP_RECORD = RECORD
        TEXT: PACKED ARRAY [1..10] OF CHAR;
        ABBREV: 1 .. 10;
	CODE: INTEGER;
     END;

EXTERNAL FUNCTION CMD_LOOKUP
      ( LINE: PACKED ARRAY [1..*] OF CHAR;
        VAR CURSOR: INTEGER;
	TOKEN_CHARS: SET OF CHAR;
        LIST: ARRAY [1..*] OF CMD_LOOKUP_RECORD;
        VAR MATCH: INTEGER): BOOLEAN;
#input (LINE)is any text string.
#input (CURSOR)is the index of a character in the text line.
#input (TOKEN_CHARS)is the set of characters which may occur in an "alphabetic"
token.
#input (LIST)is an array of name description records.
Each record contains either (1) the text of an alphabetic name and the length
of the minimum possible abbreviation of the name, or (2) the text of a special
character sequence and its length.
It also contains an integer code.
#output (<return\value>)is true if there is a token in the input line
which matches one of the entries in the name list.
#output (MATCH)is unchanged if CMD_LOOKUP returns FALSE.
If it returns TRUE, then MATCH is set to the CODE field from the name list
record which matches the input token.
#output (CURSOR)is advanced to the next non-blank character.
If CMD_LOOKUP returns TRUE, then it is advanced to the character following
the matched token.
#requirements
CURSOR must be greater than zero.
#notes
For the purposes of this routine, a token may be either an alphabetic
string or a non-alphabetic string.
An alphabetic string is any string of contiguous characters from the
TOKEN_CHARS set.
It is converted to upper case before matching, and may be an abbreviation of
the name list entry.
A non-alphabetic string is a string of characters starting with one which
is not in TOKEN_CHARS.
It must match the name list entry exactly;
the ABBREV field of the name list entry specifies its length.
$skip
If a string might match more than one entry in the name list, then the index
of the first matching entry will be returned.
$skip
If the token characters were ['A'..'Z'], and the name
list contained the entries ('ABCDEF',3,1), ('XYZZ',4,2), ('<=',2,3),
and ('<',1,4), then the following behaviour would occur:
$skip $ind +5 $verb
Before          After           Match
------          -----           -----
ABCD < 3        ABCD < 3        1
^                   ^
ABCD < 3        ABCD < 3        4
    ^                 ^
ABCD < 3        ABCD < 3        Failure
      ^                ^
   ABCXYZ+2       ABCXYZ+2      Failure
^                 ^
A<>B            A<>B            4
 ^                ^
$skip $ind -5 $just
#include (CMDUTL.INC)
#end
