	TITLE	MAC - PASCAL CODE EMISSION ROUTINES

	SEARCH  PASSYM

GLINIT==0		;SET TO 1 IF INITPROCEDURES TO BE SUPPORTED

;
; THESE ARE MACRO VERSIONS OF PASCAL PROCEDURES MAC, MAC5, MAC4R, ET. AL
;
	ENTRY	MAC
	ENTRY	MAC5
	ENTRY	MAC4
	ENTRY	MAC4R
	ENTRY	MAC3
	ENTRY	MAC3R
	ENTRY	MAC3B

	EXTERN	ERROR
	EXTERN	ERRORWITHTEXT
	IFN	GLINIT,<
	EXTERN	INITGLOBALS
>
	EXTERN	CIX
	EXTERN	CURPROC
	EXTERN	IC
	EXTERN	CODE

NIL=377777
NO=0
RIGHT=1
CIXMAX=^D3000		;!!!!!! REASSEMBLE IF THIS CHANGES!!!!!!

	$RELOC

;
; EXTERNAL VAR CODE: PACKED RECORD
;	RELOCATION:  PACKED ARRAY[0..CIXMAX] OF 0..3
;	INFORMATION: PACKED ARRAY[0..CIXMAX] OF CHAR (* 0..177B *)
;	INSTRUCTION: PACKED ARRAY[0..CIXMAX] OF PDPINSTR
;	END
;
; INFOFFSET AND INSTOFFSET ARE THE OFFSETS WITHIN THIS RECORD TO
; THE INFORMATION AND INSTRUCTION FIELDS, RESPECTIVELY
;
INFOFFSET=<<CIXMAX*2+^D35>/^D36>
INSTOFFSET=<INFOFFSET+1+<<CIXMAX+4>/5>>

;
; PUBLIC PROCEDURE MAC5 (FRELBYTE: RELBYTE; FINSTR: INSTRANGE; FAC, FINXREG: ACRANGE; FADDRESS: ADDRRANGE);
;
MAC5:	DMOVE	REG4,REG3
	MOVEI	REG3,0		; ZERO INDIRECTION BIT
	JRST	MAC.

;
; PUBLIC PROCEDURE MAC4R (FINSTR: INSTRANGE; FAC, FINXREG: ACRANGE; FADDRESS: ADDRRANGE);
;
MAC4R:	DMOVE	REG4,REG2
	MOVEI	REG3,0		; NO INDIRECTION
	DMOVE	REG1,REG
	MOVEI	REG,RIGHT	; RELOCATE
	JRST	MAC.

;
; PUBLIC PROCEDURE MAC4 (FINSTR: INSTRANGE; FAC, FINXREG: ACRANGE; FADDRESS: ADDRRANGE)
;
MAC4:	DMOVE	REG4,REG2
	MOVEI	REG3,0
	DMOVE	REG1,REG
	MOVEI	REG,NO
	JRST	MAC.

;
; PUBLIC PROCEDURE MAC3 (FINSTR: INSTRANGE; FAC: ACRANGE; FADDRESS: ADDRRANGE);;
;
MAC3:	MOVE	REG5,REG2
	SETZB	REG3,REG4
	DMOVE	REG1,REG
	MOVEI	REG,NO
	JRST	MAC.

;
; PUBLIC PROCEDURE MAC3B (FINSTR: INSTRANGE; FAC: ACRANGE; FADDRESS: ADDRRANGE)
;
;   RELOCATES UNLESS THE ADDRESS IS A REGISTER
;
MAC3B:	CAIG	REG2,17
	JRST	MAC3

;
; PUBLIC PROCEDURE MAC3R (FINSTR: INSTRANGE; FAC: ACRANGE; FADDRESS: ADDRRANGE)
;
MAC3R:	MOVE	REG5,REG2
	SETZB	REG3,REG4
	DMOVE	REG1,REG
	MOVEI	REG,RIGHT
	JRST	MAC.

;
; PUBLIC PROCEDURE MAC (FRELBYTE: RELBYTE; FINSTR: INSTRANGE; FAC: ACRANGE;
;			INDBIT: IBRANGE; FINXREG: ACRANGE; FADDRESS: ADDRRANGE)
;
;  If called from PASCAL programs, REG5 contains the address of the 6th 
;  parameter + 1, whereas the above routines pass it directly and 
;  bypass its retrieval.
;
MAC:	MOVE	REG5,-1(REG5)		; GET FADDRESS
MAC.:	

;
; (*$X5 IF NOT INITGLOBALS THEN BEGIN	*)
;
	IFN	GLINIT,<
	SKIPE	INITGLOBALS
	JRST	MAC.1
>
;
;   CIX := CIX + 1
;
	AOS	AC1,CIX
;
;  IF CIX > CIXMAX THEN BEGIN
;
	CAIG	AC1,CIXMAX
	JRST	MAC.OK
;
;    IF CURPROC = NIL
;      THEN ERRORWITHTEXT (356,'MAIN      ')
;      ELSE ERRORWITHTEXT (356,CURPROC^.NAME)
;    CIX := 0
;  END;
;
	MOVEI	REG,^D356
	MOVE	REG1,CURPROC		; DON'T BOTHER TO SAVE THE PARAMETERS
	CAIE	REG1,NIL		; SINCE NO CODE IS EMITTED AFTER ERRORS
	JRST	MAC.2
	DMOVE	REG1,MAC.MAIN
	JRST	.+2
MAC.2:	DMOVE	REG1,0(REG1)
	PUSHJ	TOPP,ERRORWITHTEXT
	SETZB	AC1,CIX
;
; WITH CODE, INSTRUCTION[CIX] DO BEGIN
;
;   INSTR 	:= FINSTR
;   AC 		:= FAC
;   INDBIT	:= FINDBIT
;   INXREG	:= FINXREG
;   ADDRESS	:= FADDRESS
;
MAC.OK:	ADDI	AC1,CODE
	ADDI	AC1,INSTOFFSET		; GETS ADDRESS OF INSTRUCTION[CIX]
	DPB	REG1,BPINSTR	
	DPB	REG2,BPAC
	DPB	REG3,BPIBIT
	DPB	REG4,BPINXREG
	HRRM	REG5,0(AC1)
;
;   INFORMATION[CIX] := ' '
;
	MOVE	AC1,CIX
	IBP	AC1,BPINFO		;THIS IS AN "ADJBP" INSTRUCTION
					;SUITABLE ONLY FOR THE KL10
	ADDI	AC1,INFOFFSET
	MOVEI	REG1," "
	DPB	REG1,AC1
;
;   RELOCATION[CIX] := FRELBYTE
;
	MOVE	AC1,CIX
	IBP	AC1,BPRELOC		; ADJBP
	DPB	REG,AC1
;
;  IC := IC + 1
;
	AOS	IC
	POPJ	TOPP,			;AND RETURN
;
	IFN	GLINIT,<
MAC.1:	MOVEI	REG,^D507
	JRST	ERROR			;NOT ALLOWED IN INITPROCEDURE
>
BPINSTR:
	POINT	9,0(AC1),8
BPAC:
	POINT	4,0(AC1),12
BPIBIT:
	POINT	1,0(AC1),13
BPINXREG:
	POINT	4,0(AC1),17
BPINFO:
	POINT	7,CODE,6
BPRELOC:
	POINT	2,CODE,1
MAC.MAIN:
	ASCII	/MAIN      /
	PRGEND
	TITLE	INCREGC - MACRO VERSION OF PASCAL "INCREMENTREGC" PROCEDURE

	SEARCH 	PASSYM

	ENTRY	INCREMENTREGC

	EXTERN	REGC,REGCMAX,ERROR

	$RELOC

;
; PUBLIC PROCEDURE INCREMENTREGC
; BEGIN
;  REGC := REGC + 1;
;  IF REGC > REGCMAX THEN BEGIN
;    ERROR (310);
;    REGC := REGIN
;  END;
; END;
;
INCREMENTREGC:
	AOS	REG,REGC
	CAMG	REG,REGCMAX
	POPJ	TOPP,
	MOVEI	REG,1
	MOVEM	REG,REGC
	MOVEI	REG,^D310
	JRST	ERROR
;
;
	PRGEND
	TITLE	CHECKLC

	SEARCH	PASSYM

	ENTRY	CHECKLC

	EXTERN	LC,LCMAX

	$RELOC

;
; PROCEDURE CHECKLC (I: INTEGER);
; BEGIN
;  LC := LC + I;
;  IF LC > LCMAX THEN LCMAX := LC;
; END;
;
CHECKLC:
	ADDB	REG,LC
	CAMLE	REG,LCMAX
	MOVEM	REG,LCMAX
	POPJ	TOPP,
	END
