TENIO - Low Level File I/O Interface Package for TOPS-10	MACRO %53A(1155) 12:27  6-Jun-80 Page 1
TENIO	MAC	 8-Jan-69 21:39		Some Initial Trumpet Soundings

					SUBTTL	Some Initial Trumpet Soundings
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				;									;
				;	At long last!							;
				;									;
				;	This is TENIO.  TENIO is a collection of subroutines designed	;
				;	to provide an intelligent interface to file I/O on TOPS-10.	;
				;	Although its initial use was as an assembly code interface, it	;
				;	is set up so that any reasonable language could be made to	;
				;	talk to it.							;
				;									;
				;	Some basic philosophy:  the interface provides a rather gene-	;
				;	ralized capability to read or write one or more words to any	;
				;	location in any file.  Since TOPS-10 allows file I/O only	;
				;	in even multiples of 200 (octal) words at a time, TENIO uses	;
				;	its own set of intermediate buffers to allow I/O to proceed	;
				;	at any word.  (This buffering may be suppressed if it's not	;
				;	required.)  The user may specify the position in the file at	;
				;	which I/O will occur, or may allow TENIO to do it via a se-	;
				;	quential file pointer mechanism.  (That pointer may also be	;
				;	explicitly reset by the user.)  TENIO uses TOPS-10 dump mode	;
				;	I/O for all its I/O activities, as it appears to be not only	;
				;	more convenient but also faster than other TOPS-10 I/O modes.	;
				;									;
				;	Where possible and sensible, TENIO has made use of the most	;
				;	recent facilities provided by the environment.  This includes	;
				;	using SVC FILOP. to do file openings and using several machine	;
				;	capabilities not available on either the KA10 or the KI10	;
				;	(excluding the string instructions).  Should it ever become	;
				;	necessary to retrofit TENIO to a KI10, special attention	;
				;	should be paid to the coding assumption that BLT will always	;
				;	completely update its accumulator pointers upon completion.	;
				;	Also, no provision has been made in this code for multiple	;
				;	section PDP-10s or for file block numbers which exceed a	;
				;	halfword in size.						;
				;									;
				;	In order to avoid naming conflicts, all entry points end with	;
				;	a ".".  If the "." would cause the name to exceed six charac-	;
				;	ters, the second character of the name is omitted.		;
				;									;
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
TENIO - Low Level File I/O Interface Package for TOPS-10	MACRO %53A(1155) 12:27  6-Jun-80 Page 2
TENIO	MAC	 8-Jan-69 21:39		PASCRAP and Other Commentary

					SUBTTL	PASCRAP and Other Commentary
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				;									;
				;	This package has been extensively overhauled in order to allow	;
				;	the PASCAL I/O system to use it.  One of the PASCAL system	;
				;	goals is to enable large programs to segment themselves with	;
				;	GETSEGs.  This requires that all references to scratch storage	;
				;	be register relative, and that base registers be defined at	;
				;	initialization.  As a result, TENIO now follows some rather	;
				;	nominally bizarre interface conventions:			;
				;									;
				;	1.  Shortly after entry, each routine must call TNAB. (TENIO	;
				;	    NAB) to grab pointers to its scratch storage (in R2) and	;
				;	    AC block (in R3).						;
				;									;
				;	2.  Absolutely no absolute reference to variable storage	;
				;	    (except for the job data area) is allowed.			;
				;									;
				;	3.  If TENIO needs to call an external routine which (A)	;
				;	    could be required for a PASCAL program, and (B) needs	;
				;	    some scratch storage of its own, R15 must be set equal	;
				;	    to its value on entry.					;
				;									;
				;	4.  On exit, R2 must still point to TENIO's scratch storage	;
				;	    (the dispatcher may use it to find the register block	;
				;	    if PASCAL is active).					;
				;									;
				;	5.  TENIO may not increment the UUO return pointer itself;	;
				;	    separate exit points (SKIP1. and SKIP2.) in the UUO		;
				;	    dispatcher are provided to do the job.			;
				;									;
				;	For PASCAL runtime purposes, it is assumed that this code will	;
				;	run with interrupts masked; accordingly, Rs 16 and 17 may get	;
				;	clobbered.  The dispatcher will restore them on exit.  Also,	;
				;	in order to make our life easier, register numbers are not	;
				;	allowed to wrap around (i.e., if AC is 17, AC+1 may not be	;
				;	used in the call).						;
				;	4-28-80:  Quick and dirty modified to run under Tymshare (SVC	;
				;	FILOP.s removed and a few CHANIOs tossed in).  WARNING:  this	;
				;	should NOT be taken as a production quality I/O system.  --QQSV	;
				;									;
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
TENIO - Low Level File I/O Interface Package for TOPS-10	MACRO %53A(1155) 12:27  6-Jun-80 Page 3
TENIO	MAC	 8-Jan-69 21:39		Scratch Area for This Beast (And Other Random Definitions)

					SUBTTL	Scratch Area for This Beast (And Other Random Definitions)
				;
				;	First, the usual random scratch.
				;
					TITLE	TENIO - Low Level File I/O Interface Package for TOPS-10
					SEARCH	OPDEFS(OPDEFS.UNV[31024,314530]); Now, more than ever, DEC doth byte
					EXTERN	APOIN.,LUOAD.	; Hooks to calling interface
					ENTRY	IOUUO.,TENIO.,RET14.,RET16.; Yutzy Kortezojan entry grab
					INTERN	OPENF.,COSEF.,TUNCF.,RDBLK.,RBLKR.,RDWRD.,RWRDR.; Real
					INTERN	WBLK.,WBLKR.,WRWRD.,WWRDR.,NOTEF.,NAMEF.,PINTF.; TENIO
					INTERN	FOSVC.,FUSHF.	; starting handles
400000'					TWOSEG			; For sure, reentrant
				;
				;	All dirty core appears in other assemblies (see comments above).
				;	This defines macros to facilitate its reference.  (Oh, for a
				;	DSECT pseudo op!)  R2 points to it after TNAB. has been called.
				;
				;	First, the data areas needed for parameters to the TOPS-10 I/O
				;	calls.
				;
				;	A FILOP. block.
				;
					DEFINE	FUNCOD<0(2)>	; Channel # to use,,FILOP. function code
					DEFINE	IOMODE<1(2)>	; I/O mode (always 57--synchronous dump)
					DEFINE	FILDEV<2(2)>	; SIXBIT device (possibly ersatz)
				;
					DEFINE	IOLST<3(2)>	; Overlap dump mode I/O list here
				;
					DEFINE	FILBUF<3(2)>	; Buffer pointers (not used by dump mode)
					DEFINE	BLKPTR<5(2)>	; LOOKUP type block pointer
				;
				;	A LOOKUP/ENTER/RENAME block.  This is used by file closing as
				;	well as opening.
				;
					DEFINE	LUKENT<6(2)>	; Length of remaining stuff (usually 5)
					DEFINE	ENTPPN<7(2)>	; Proj #,,Prog # for file
					DEFINE	ENTNAM<10(2)>	; SIXBIT file name
					DEFINE	ENTEXT<11(2)>	; SIXBIT extension,,returned error code
					DEFINE	ENTPRO<12(2)>	; Nine bits of protection, 27 bits of junk
					DEFINE	ENTLEN<13(2)>	; Returned word length of file
				;
				;	Additional length used to truncate files.
				;
					DEFINE	RNJUNK<14(2)>	; Version, spool name, and estimated crap
					DEFINE	RNALOC<17(2)>	; Actual block length allocated for file
				;
				;	Internal name block (for file name decoding) and a PATH block
				;	(overlapped with LOOKUP block above).
				;
					DEFINE	INTBLK<15(2)>	; Decoded file name scratch area
		000005		MAXSFD==	5		; Maximum depth SFD supported
				;
				;
				;	The blocks.  (See below.)
				;
TENIO - Low Level File I/O Interface Package for TOPS-10	MACRO %53A(1155) 12:27  6-Jun-80 Page 3-1
TENIO	MAC	 8-Jan-69 21:39		Scratch Area for This Beast (And Other Random Definitions)

					DEFINE	BS.<4+MAXSFD+INTBLK>; File Block Start
					DEFINE	BLOCKS<BS.>	; Channel 1
				;
				;	Other blocks are not directly referenced (see real scratch
				;	storage for listing).
				;
					DEFINE	LSTBLK<16*BLKSIZ+BS.>; Channel 17 (the last)
				;
				;	File block layout.  These are pointed to by R1 or R3 (the latter
				;	primarily in OPENF and CLOSEF).  FBGR must be defined in line.
				;
					DEFINE	FILNAM<0(FBGR)>	; File name, in SIXBIT
					DEFINE	EXTPRO<1(FBGR)>	; Extension,,nine bits of protection stuff
					DEFINE	CURSOR<2(FBGR)>	; Sequential file pointer (word address)
					DEFINE	SWCHBF<3(FBGR)>	; Switches,,internal buffer pointer
					DEFINE	BLKNUM<4(FBGR)>	; Current block,,next expected block
					DEFINE	EOF<5(FBGR)>	; End of file pointer (word address)
		000006		BLKSIZ==	6		; Length of the above
	777777	777777		FBGR==		-1		; (Safety first)
				;
				;	Switches in SWCHBF left half as follows:
				;
		400000		INOK==		400000		; Input allowed (must match WILLRD)
		200000		OUTOK==		200000		; Output allowed (must match WILLWR)
		600000		OPENED==	INOK+OUTOK	; Something is allowed
		100000		BUFOK==		100000		; Internal buffering allowed
		040000		TRUNC==		40000		; Current buffer has < 200 words
		020000		DIRTY==		20000		; Current buffer must be rewritten
		010000		TENBUF==	10000		; Internal buffer supplied by TENIO
		004000		MULTAC==	4000		; File is multiple writable
				;
				;	Switches in left half of OPENF register
				;
		400000		WILLRD==	400000		; File may be read
		200000		WILLWR==	200000		; File may be written
		100000		NOEMPT==	100000		; Initial file empty should be suppressed
		040000		INTERN==	40000		; Name data is in internal block form
		020000		NOCREA==	20000		; Output file will not be created
		010000		WILMUL==	10000		; Output file should be multi accessible
		004000		WONTBF==	4000		; No buffer should be supplied
		002000		EXLENG==	2000		; User supplied string length and pointer
				;
				;	N.B.:  EXLENG also appears in FORTRAN interface.
				;
				;
				;	Switch in right half of TRUNCF switch register
				;
		000001		TRNCLZ==	1		; Leave file closed after truncation
				;
				;	Finally, the layout of an internal name block.  R1 always
				;	points to these.  (We use either INTBLK or a block provided
				;	by the caller.)
				;
					DEFINE	DEVICE<0(1)>	; Device (possibly ersatz) of file
					DEFINE	INTNAM<1(1)>	; (Internal) file name, in sixbit
TENIO - Low Level File I/O Interface Package for TOPS-10	MACRO %53A(1155) 12:27  6-Jun-80 Page 3-2
TENIO	MAC	 8-Jan-69 21:39		Scratch Area for This Beast (And Other Random Definitions)

					DEFINE	PATH<1(1)>	; Argument block for PATH. (overlapped)
					DEFINE	INTEXT<2(1)>	; Extension,,prot code and SFD count
					DEFINE	PPN<3(1)>	; Proj #,,prog # for file
				;
					DEFINE	ACS<0(3)>	; Register block, after TNAB. call
				;
				;	A few Tymshare goodies.
				;
	043000	000000			opdef	chanio[43b8]	; The Tymshare answer to SVC FILOP.
		000000		.chrel==	0		; Equivalent to RELEAS
		000004		.chlk==		4		; Equivalent to LOOKUP
		000005		.chent==	5		; Equivalent to ENTER
		000013		.chopn==	13		; Equivalent to OPEN
		000041		.chmen==	41		; Equivalent to multiaccess update FILOP.
		000042		.chvrb==	42		; Equivalent to update RIB FILOP.
		000045		.chftr==	45		; Truncate a file--a new Tymshare joy!
				;
					SALL			; Suppress macro expansion
400000'					RELOC	400000		; The rest is clean
TENIO - Low Level File I/O Interface Package for TOPS-10	MACRO %53A(1155) 12:27  6-Jun-80 Page 4
TENIO	MAC	 8-Jan-69 21:39		OPENF - Open or Test a File

					SUBTTL	OPENF - Open or Test a File
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				;									;
				;	OPENF (op code 5)--This subroutine is used to open a file for	;
				;	input or output, or to test its existence.  Parameters:		;
				;									;
				;	A:	Left half is option switches (see above).  If neither	;
				;		input nor output is specified, the file's existence	;
				;		will be tested.  Right half is file name string		;
				;		pointer, internal name block pointer (see above),	;
				;		or string length, as specified by option switches.	;
				;	A+1:	If internal buffering is used, this points to a user	;
				;		specified internal buffer or contains zero, in which	;
				;		case TENIO will supply the buffer.  If no buffering	;
				;		is specified, A+1 is ignored.				;
				;	A+2:	If an explicit string length is specified in A, this	;
				;		contains an ILDB byte pointer to read the string.	;
				;		A+2 is ignored in all other cases.			;
				;	E:	Channel number to use, or zero (in which case TENIO	;
				;		will allocate a channel number).			;
				;									;
				;	Return codes:							;
				;									;
				;	+0:	Error; A contains error code from system or -1 if	;
				;		TENIO detected the error.  The file was not opened.	;
				;	+1:	Success (or file exists).  Registers unchanged; E will	;
				;		contain the channel number if TENIO supplied it.	;
				;									;
				;	OPENF must be invoked before I/O can be done on a file.		;
				;									;
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

400000'				TENIO.:	BLOCK	0		; A handle to grab
400000'				IOUUO.:	BLOCK	0		; Obsolete handle
400000'	265 16 0 00 000000*	OPENF.:	JSP	16,TNAB.##	; Find our registers and scratch
400001'	135 04 0 00 000000*		LDB	4,APOIN.	; Fetch AC number
400002'	201 12 0 03 000000 		MOVEI	12,ACS		; and point to AC
400003'	271 12 0 04 000000 		ADDI	12,0(4)
400004'	200 05 0 12 000000 		MOVE	5,0(12)		; Fetch switches and pointer (or count)
400005'	500 02 0 00 000005 		HLL	2,5		; Save switches
400006'	305 04 0 00 000016 		CAIGE	4,16		; Large register specified?
400007'	254 00 0 00 400016'		JMP	OREGOK		; No. No tests needed
400010'	603 02 0 00 002000 		TLNZ	2,EXLENG	; Yes. String length specified?
400011'	254 00 0 00 400266'		JMP	BADOPE		; Yes. Would wrap around
400012'	305 04 0 00 000017 		CAIGE	4,17		; No. Was it R17?
400013'	254 00 0 00 400016'		JMP	OREGOK		; No. Looks good
400014'	607 02 0 00 004000 		TLNN	2,WONTBF	; Yes. Is buffer needed?
400015'	254 00 0 00 400266'		JMP	BADOPE		; Yes. Can't get it
400016'	550 13 0 00 000000*	OREGOK:	HRRZ	13,LUOAD.	; Find effective word
400017'	307 13 0 00 000017 		CAIG	13,17		; (may be in registers)
400020'	271 13 0 03 000000 		ADDI	13,ACS
400021'	550 06 0 13 000000 		HRRZ	6,0(13)		; Fetch channel
400022'	326 06 0 00 400026'		JUMPNZ	6,GAVECH	; Did he give us one?
400023'	265 17 0 00 400205'		JSP	17,CHNGET	; No. Get our own
400024'	254 00 0 00 400266'		JMP	BADOPE		; 0 All busy. Give up
TENIO - Low Level File I/O Interface Package for TOPS-10	MACRO %53A(1155) 12:27  6-Jun-80 Page 4-1
TENIO	MAC	 8-Jan-69 21:39		OPENF - Open or Test a File

400025'	254 00 0 00 400036'		JMP	GOTCH		; 1 Got one
				;
				;	User supplied channel number. Validate it.
				;
400026'	303 06 0 00 000017 	GAVECH:	CAILE	6,17		; In legal range?
400027'	254 00 0 00 400266'		JMP	BADOPE		; No
400030'	571 03 0 06 777777 		HRREI	3,-1(6)		; Perhaps
400031'	321 03 0 00 400266'		JUMPM	3,BADOPE	; Zero is reserved for terminal I/O
400032'	221 03 0 00 000006 		IMULI	3,BLKSIZ	; Seems valid. Find file block
400033'	271 03 0 02 000026 		ADDI	3,BLOCKS
		000003		FBGR==		3		; (Poor man's USING)
400034'	332 00 0 03 000003 		SKIPZ	SWCHBF		; Is file already open?
400035'	254 00 0 00 400266'		JMP	BADOPE		; Yes. Can't do it twice
400036'	516 06 0 02 000000 	GOTCH:	HRLZM	6,FUNCOD	; Valid channel. Save for FILOP.
400037'	603 02 0 00 040000 		TLNZ	2,INTERN	; Is this an internal name call?
400040'	254 00 0 00 400176'		JMP	GOTBLK		; Yes. Take short cut
400041'	603 02 0 00 002000 		TLNZ	2,EXLENG	; No. Explicit length supplied?
400042'	254 00 0 00 400202'		JMP	GRBLEN		; Yes. Fetch it
400043'	201 00 0 00 777777 		MOVEI	0,777777	; No. Allow very long string
400044'	201 07 0 05 000000 		MOVEI	7,0(5)		; (assume will terminate)
400045'	607 07 0 00 000017 	DECGO:	TLNN	7,17		; Index in byte pointer or
400046'	606 07 0 00 777760 		TRNN	7,777760	; string in registers?
400047'	254 00 0 00 400266'		JMP	BADOPE		; Yes. That's a no no
				;
				;	The external routine called below is, in fact, really an internal
				;	routine (separated so others can use it); accordingly, it does
				;	not take a standard PUSHJ 17,etc. call with register saving.
				;	DECOD. and STRTD. (see CLOSEF below) assume R0 contains the
				;	maximum allowable string size, R1 points to an internal block
				;	to build into, and R7 points to the input string.  Rs 2,
				;	3, 12, 13, and 15 are preserved; R14 is the link register.
				;	ALL OTHER REGISTERS MAY GET SMASHED!  You have been warned.
				;
400050'	201 01 0 02 000015 		MOVEI	1,INTBLK	; Point to internal name block and
400051'	265 14 0 00 000000*		JSP	14,DECOD.##	; decode the file string
400052'	254 00 0 00 400266'		JMP	BADOPE		; 0 Bad data. Give up
400053'	603 02 0 00 600000 	BUFCHK:	TLNZ	2,WILLRD+WILLWR	; 1 Name OK. Is this just a test?
400054'	603 02 0 00 004000 		TLNZ	2,WONTBF	; (or perhaps no buffer is wanted?)
400055'	254 00 0 00 400062'		JMP	BLDOPE		; One or the other. Try the file
400056'	332 11 0 12 000001 		SKIPZ	11,1(12)	; Did user give me a buffer?
400057'	254 00 0 00 400062'		JMP	BLDOPE		; Apparently she did
				;
				;	ANYBF., BFGET., and BFDMP. may hit Rs 5, 6, and 17.
				;
400060'	265 16 0 00 000000*		JSP	16,ANYBF.##	; Will one be available?
400061'	254 00 0 00 400266'		JMP	BADOPE		; 0 No buffer. Give up
400062'	201 06 0 00 000057 	BLDOPE:	MOVEI	6,57		; 1 Looks OK. Build OPEN block
400063'	200 07 0 01 000000 		MOVE	7,DEVICE
400064'	124 06 0 02 000001 		DMOVEM	6,IOMODE	; Always use synchronous dump mode
400065'	402 00 0 02 000003 		CLEARM	FILBUF		; Buffers are none of TOPS-10's business
				;
				;	For Tymshare, we can't use SVC FILOP. to do the work, so we're
				;	stuck with a bunch of CHANIOs for OPEN, LOOKUP, and ENTER functions.
				;
400066'	554 05 0 02 000000 		hlrz	5,funcod	; Hang on to channel
TENIO - Low Level File I/O Interface Package for TOPS-10	MACRO %53A(1155) 12:27  6-Jun-80 Page 4-2
TENIO	MAC	 8-Jan-69 21:39		OPENF - Open or Test a File

400067'	505 05 0 00 000013 		hrli	5,.chopn	; First, open the device
400070'	043 05 0 02 000001 		chanio	5,iomode	; (equivalent to OPEN)
400071'	254 00 0 00 400266'		jmp	badope		; 0 Can't get started. Bizarre!
400072'	265 17 0 00 400214'		JSP	17,BLDENT	; 1 Now build LOOKUP block
400073'	505 05 0 00 000004 		hrli	5,.chlk		; and open input side of things
400074'	043 05 0 02 0000chanio	5,lukent	; (equivalent to LOOKUP)
400075'	254 00 0 00 400166'		JMP	NOXIST		; 0 Doesn't exist, or something
400076'	607 02 0 00 600000 		TLNN	2,WILLRD+WILLWR	; 1 File exists. Do we need it?
400077'	254 00 0 00 400162'		JMP	TESTOK		; No. Clear it and cheer
400100'	607 02 0 00 200000 		TLNN	2,WILLWR	; Yes. Input only?
400101'	254 00 0 00 400120'		JMP	OPENDN		; Yes. Proceed to copy attributes
400102'	603 02 0 00 100000 		TLNZ	2,NOEMPT	; Output file. Empty first?
400103'	254 00 0 00 400111'		JMP	OPENUP		; No
400104'	403 06 0 00 000007 		clearb	6,7		; Yes. Build extra long ENTER block
400105'	124 06 0 02 000014 		dmovem	6,rnjunk
400106'	124 06 0 02 000016 		dmovem	6,-1+rnaloc
400107'	201 07 0 00 200011 		movei	7,200011	; and set bit so Tymshare will automatically
400110'	202 07 0 02 000006 		movem	7,lukent	; chop file on ENTER
400111'	505 05 0 00 000005 	openup:	hrli	5,.chent	; Assume single access update
400112'	603 02 0 00 010000 		tlnz	2,wilmul	; Is multi access desired?
400113'	505 05 0 00 000041 		hrli	5,.chmen	; Yes. Set it up
400114'	043 05 0 02 000006 		chanio	5,lukent	; Now open output side (equivalent to ENTER)
400115'	254 00 0 00 400156'		JMP	FAILOP		; 0 No can do. Bitch a bit
400116'	306 07 0 00 200011 		cain	7,200011	; Was file emptied?
400117'	402 00 0 02 000013 		clearm	entlen		; Yes. Better remind Tymshare
400120'	554 05 0 02 000000 	OPENDN:	HLRZ	5,FUNCOD	; 1 Success. Get channel number
400121'	550 06 0 13 000000 		HRRZ	6,0(13)		; Did the user supply this channel number?
400122'	302 06 0 05 000000 		CAIE	6,0(5)
400123'	542 05 0 13 000000 		HRRM	5,0(13)		; No. Return our number
400124'	200 07 0 02 000010 		MOVE	7,ENTNAM	; Save actual file name
400125'	544 10 0 02 000012 		HLR	10,ENTPRO	; Save actual protection code
400126'	421 10 0 00 000777 		ANDCMI	10,777		; (no junk bits)
400127'	124 07 0 03 000000 		DMOVEM	7,FILNAM
400130'	200 06 0 02 000013 		MOVE	6,ENTLEN	; Save EOF pointer
400131'	202 06 0 03 000005 		MOVEM	6,EOF
400132'	402 00 0 03 000002 		CLEARM	CURSOR		; Start cursor at beginning
400133'	201 06 0 00 000001 		MOVEI	6,1		; No current block; first block
400134'	202 06 0 03 000004 		MOVEM	6,BLKNUM	; will come next
400135'	554 06 0 00 000002 		HLRZ	6,2		; Now build switches
400136'	405 06 0 00 600000 		ANDI	6,OPENED	; Take INOK, OUTOK from WILLRD, WILLWR
400137'	603 02 0 00 010000 		TLNZ	2,WILMUL	; Multiple simultaneous access OK?
400140'	435 06 0 00 004000 		ORI	6,MULTAC	; Yes. Reflect it
400141'	603 02 0 00 004000 		TLNZ	2,WONTBF	; Internal buffering OK?
400142'	254 00 0 00 400154'		JMP	SETSWT		; No. Set switches and leave
400143'	435 06 0 00 100000 		ORI	6,BUFOK		; Yes. Remember that
400144'	505 06 0 11 000000 		HRLI	6,0(11)		; Fetch possible buffer address
400145'	326 11 0 00 400154'		JUMPNZ	11,SETSWT	; If user supplied one, we're done
400146'	435 06 0 00 010000 		ORI	6,TENBUF	; No such luck. It's mine
400147'	206 06 0 03 000003 		MOVSM	6,SWCHBF	; Save switches and
400150'	201 04 0 03 000003 		MOVEI	4,SWCHBF	; set to allocate a buffer
				;
				;	See ANYBF. note above.  This is a nonstandard external call and
				;	may smash registers.  Since ANYBF. returned OK, this call should
				;	never fail.
				;
TENIO - Low Level File I/O Interface Package for TOPS-10	MACRO %53A(1155) 12:27  6-Jun-80 Page 4-3
TENIO	MAC	 8-Jan-69 21:39		OPENF - Open or Test a File

400151'	265 16 0 00 000000*		JSP	16,BFGET.##	; GMABP (getmeabufferplease)
400152'	254 04 0 00 400152'		HALT	.		; 0 HWIMB? (helpwhereismybuffer)
400153'	254 00 0 00 000000*		JMP	SKIP1.##	; 1 Thank you. Bye bye
				;
400154'	206 06 0 03 000003 	SETSWT:	MOVSM	6,SWCHBF	; No buffer allocation needed. Just
400155'	254 00 0 00 400153*		JMP	SKIP1.##	; store switches (and possible buffer)
				;
				;	Either we don't need to leave the file open, or something
				;	went seriously awry.  Purge the channel and leave appropriately.
				;
400156'	550 06 0 02 000011 	failop:	hrrz	6,entext	; A failure. Snarf return code
400157'	202 06 0 12 000000 	setrc:	movem	6,0(12)
400160'	201 07 0 00 000000*		MOVEI	7,LEAVE.##	; and set marker
400161'	254 00 0 00 400163'		JMP	BLAST
				;
400162'	201 07 0 00 400155*	TESTOK:	MOVEI	7,SKIP1.##	; Just a test. Leave OK
400163'	505 05 0 00 000000 	blast:	hrli	5,.chrel	; Pitch the channel
400164'	043 05 0 00 000000 		chanio	5,0		; (equivalent to RELEAS)
400165'	254 00 0 07 000000 		JMP	0(7)		; and leave
				;
				;	The file doesn't exist.  That might or might not be bad.
				;	(Maybe we can make one.)
				;
400166'	550 06 0 02 000011 	noxist:	hrrz	6,entext	; Can't input. Why not?
400167'	326 06 0 00 400157'		jumpnz	6,setrc		; If not nonexistant file, abandon ship
400170'	603 02 0 00 200000 		TLNZ	2,WILLWR	; That was it. Will we write to the file?
400171'	603 02 0 00 020000 		TLNZ	2,NOCREA	; Yes. May we create it?
400172'	254 00 0 00 400156'		JMP	FAILOP		; No (or not output). Forget it
400173'	512 10 0 02 000011 		HLLZM	10,ENTEXT	; Yes. Reset error flag
400174'	402 00 0 02 000013 		clearm	entlen		; On Tymshare, watch out for leftover length
400175'	254 00 0 00 400111'		JMP	OPENUP		; Now open for output
				;
				;	File name comes from internal format block.  Take short cut.
				;
400176'	201 01 0 05 000000 	GOTBLK:	MOVEI	1,0(5)		; User specified internal block
400177'	303 01 0 00 000017 		CAILE	1,17		; Is it in the registers?
400200'	254 00 0 00 400053'		JMP	BUFCHK		; No
400201'	254 00 0 00 400266'		JMP	BADOPE		; Yes. Stop it cold
				;
				;	User specified string length.  Byte pointer is in AC+2.
				;
400202'	201 00 0 05 000000 	GRBLEN:	MOVEI	0,0(5)		; Fetch length
400203'	200 07 0 12 000002 		MOVE	7,2(12)		; and byte pointer
400204'	254 00 0 00 400045'		JMP	DECGO
TENIO - Low Level File I/O Interface Package for TOPS-10	MACRO %53A(1155) 12:27  6-Jun-80 Page 5
TENIO	MAC	 8-Jan-69 21:39		OPENF - A Few Sundry Subroutines

					SUBTTL	OPENF - A Few Sundry Subroutines
				;
				;	CHNGET--Subroutine to scan the file blocks and find an unused one.
				;	On exit, R3 points to the first unused file block and R6 contains
				;	its channel number.  Link by 1(17) if one is found, by R17 if one
				;	isn't.
				;
400205'	201 03 0 02 000152 	CHNGET:	MOVEI	3,LSTBLK	; Last block first
400206'	201 06 0 00 000017 		MOVEI	6,17
400207'	336 00 0 03 000003 	TCH:	SKIPNZ	SWCHBF		; Test CHannel. Already open?
400210'	254 00 0 17 000001 		JMP	1(17)		; No. Grab it
400211'	275 03 0 00 000006 		SUBI	3,BLKSIZ	; Yes. Back up to next one
400212'	367 06 0 00 400207'		SOJP	6,TCH
400213'	254 00 0 17 000000 		JMP	0(17)		; Glug! All channels busy
				;
				;	BLDENT--Subroutine to build a LOOKUP/ENTER/RENAME block.  This
				;	routine copies information from the internal name block pointed
				;	to by R1 to the LOOKUP block.  Rs 6 and 7 are used as scratch.  On
				;	exit, R10 contains the extension in its left half.  Link by R17.
				;
400214'	120 06 0 01 000001 	BLDENT:	DMOVE	6,INTNAM	; Grab name, ext, protection+SFD flag
400215'	200 10 0 00 000007 		MOVE	10,7		; Save extension and protection
400216'	541 07 0 00 000000 		HRRI	7,0
400217'	124 06 0 02 000010 		DMOVEM	6,ENTNAM	; Store name and extension
400220'	201 06 0 00 000005 		MOVEI	6,5		; Five words in a LOOKUP block
400221'	626 10 0 00 000777 		TRZN	10,777		; Any specified SFDs?
400222'	334 07 0 01 000003 		SKP	7,PPN		; No. Use direct PPN
400223'	201 07 0 01 000001 		MOVEI	7,PATH		; Yes. Point to explicit path
400224'	124 06 0 02 000006 		DMOVEM	6,LUKENT
400225'	516 10 0 02 000012 		HRLZM	10,ENTPRO	; Store protection
400226'	254 00 0 17 000000 		JMP	0(17)
TENIO - Low Level File I/O Interface Package for TOPS-10	MACRO %53A(1155) 12:27  6-Jun-80 Page 6
TENIO	MAC	 8-Jan-69 21:39		CLOSEF - Close and Deallocate a File

					SUBTTL	CLOSEF - Close and Deallocate a File
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				;									;
				;	CLOSEF (op code 6)--This subroutine is used to close and	;
				;	deallocate a file after the user has finished doing I/O.	;
				;	Parameters:							;
				;									;
				;	A:	Right half is an option code, as follows:		;
				;		0 ==> Close one file	4 ==> Close and rename file	;
				;		1 ==> Destroy one file	as per internal name block	;
				;		2 ==> Close all files	5 ==> Close and rename file	;
				;		3 ==> Close and rename	as per string length in left	;
				;		file as per file name	half and byte pointer in AC+1	;
				;		string							;
				;		For codes 3 and 4, the left half is a pointer to the	;
				;		appropriate string or block.				;
				;	E:	Ignored for code 2; contains the file number to close	;
				;		otherwise						;
				;									;
				;	Returns:							;
				;									;
				;	+0:	Error; A contains error code from system, or -1 if	;
				;		TENIO detected the error.				;
				;	+1:	Success; registers unchanged.				;
				;									;
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

400227'	265 16 0 00 400000*	COSEF.:	JSP	16,TNAB.##	; Grab TENIO scratch and register block
400230'	135 05 0 00 400001*		LDB	5,APOIN.	; Find specified AC
400231'	201 12 0 05 000000 		MOVEI	12,0(5)
400232'	271 12 0 03 000000 		ADDI	12,ACS
400233'	550 04 0 12 000000 		HRRZ	4,0(12)		; Fetch function code
400234'	307 05 0 00 000016 		CAIG	5,16		; Is AC number small enough?
400235'	254 00 0 00 400240'		JMP	CREGOK		; Yes
400236'	306 04 0 00 000005 		CAIN	4,5		; Maybe not. RENAME string length given?
400237'	254 00 0 00 400266'		JMP	BADOPE		; Yes. No register wrap around allowed
400240'	306 04 0 00 000002 	CREGOK:	CAIN	4,2		; Close all files?
400241'	254 00 0 00 400252'		JMP	CLOZAL		; Yes. Set up a loop
400242'	307 04 0 00 000005 		CAIG	4,5		; No. Is function valid?
400243'	265 14 0 00 400504'		JSP	14,GETBLK	; Yes. Find file block
400244'	254 00 0 00 400266'		JMP	BADOPE		; 0 Invalid (or bad function). Error out
400245'	271 12 0 03 000000 		ADDI	12,ACS		; 1 Restore AC pointer
400246'	322 05 0 00 400266'		JUMPZ	5,BADOPE	; If file not open, don't reclose
400247'	265 14 0 00 400270'		JSP	14,SHUTF	; Shut the file down
400250'	254 00 0 00 400266'		JMP	BADOPE		; 0 and leave, unsuccessfully
400251'	254 00 0 00 400162*		JMP	SKIP1.##	; 1 or successfully
				;
				;	Close all requested.  Set up a loop.
				;
400252'	403 04 0 00 000000 	CLOZAL:	CLEARB	4,0		; Set close code and no errors yet
400253'	201 01 0 02 000152 		MOVEI	1,LSTBLK	; Start with the last block
		000001		FBGR==		1		; R1 now points to file blocks
400254'	505 02 0 00 000740 		HRLI	2,740		; Set up channel 17 (aligned as AC)
400255'	336 05 0 01 000003 	CLZLUP:	SKIPNZ	5,SWCHBF	; Is this file open?
400256'	254 00 0 00 400261'		JMP	CLZNXT		; No
TENIO - Low Level File I/O Interface Package for TOPS-10	MACRO %53A(1155) 12:27  6-Jun-80 Page 6-1
TENIO	MAC	 8-Jan-69 21:39		CLOSEF - Close and Deallocate a File

400257'	265 14 0 00 400270'		JSP	14,SHUTF	; Yes. Close it down
400260'	474 00 0 00 000000 		SETO	0,0		; 0 Trouble. Remember it
400261'	274 02 0 00 401211'	CLZNXT:	SUB	2,[40,,0]	; 1 Step channel backwards
400262'	275 01 0 00 000006 		SUBI	1,BLKSIZ
400263'	301 01 0 02 000026 		CAIL	1,BLOCKS	; Have we reached the beginning yet?
400264'	254 00 0 00 400255'		JMP	CLZLUP		; No. Try next file
400265'	322 00 0 00 400251*		JUMPZ	0,SKIP1.##	; Yes. Leave happily if no error;
400266'	476 00 0 12 000000 	BADOPE:	SETOM	0(12)		; otherwise, bitch
400267'	254 00 0 00 400160*		JMP	LEAVE.##
				;
				;	SHUTF is only slightly a subroutine, as the RENAME and DESTROY
				;	options break out into separate stuff.  On entry, R1 points to
				;	a file block, R2 (left half) contains the AC style channel number 
				;	(to be ORed into an instruction word), R4 contains the close
				;	code, and R5 contains the switches and buffer address.  If the
				;	code is 0 (for close), this routine will link by R14 on failure,
				;	by 1(14) on success.  Renames just amble their separate way.
				;
400270'	302 04 0 00 000001 	SHUTF:	CAIE	4,1		; Destroying the file?
400271'	265 16 0 00 400672'		JSP	16,FLUSH	; No. Purge buffer if necessary
				;
				;	Current kludge:  if FLUSH generates a disk error, no signal
				;	will be returned.  So it goes.
				;
				;	FILFIN is a dive into SHUTF without purging the buffer.
				;
400272'	607 05 0 00 010000 	FILFIN:	TLNN	5,TENBUF	; Did we allocate an internal buffer?
400273'	254 00 0 00 400277'		JMP	CLFINI		; No
400274'	551 06 0 05 000000 		HRRZI	6,0(5)		; Yes. Purge it
400275'	265 16 0 00 000000*		JSP	16,BFDMP.##	; HIABYMH (hereisabufferyoumayhave)
400276'	254 00 0 14 000000 	RET14.:	JMP	0(14)		; 0 Release snark. Give up
400277'	402 00 0 01 000003 	CLFINI:	CLEARM	SWCHBF		; 1 Deallocate the file block
400300'	326 04 0 00 400304'		JUMPNZ	4,RENAM		; A non close function?
400301'	265 17 0 00 400723'		JSP	17,IOOP		; No. Close the file and pitch the channel
400302'	071 00 0 00 000000 		RELEAS	0
400303'	254 00 0 14 000001 		JMP	1(14)		; Ta ta
				;
				;	Destroy or rename the file.  Generate a RENAME block.
				;
400304'	362 04 0 00 400334'	RENAM:	SOJZ	4,DSTROY	; If destroy, just kill file name
400305'	306 04 0 00 000003 		CAIN	4,4-1		; Did we get an internal block?
400306'	254 00 0 00 400336'		JMP	INTREN		; Yes. Use it directly
400307'	265 17 0 00 400343'		JSP	17,GETPTH	; No. Build internal name block
		000003		FBGR==		3		; (switched by GETPTH)
400310'	306 04 0 00 000004 		CAIN	4,5-1		; Explicit string length given?
400311'	254 00 0 00 400340'		JMP	RENLEN		; Yes
400312'	554 07 0 12 000000 		HLRZ	7,0(12)		; No. Fetch string pointer
400313'	201 00 0 00 777777 		MOVEI	0,777777	; Assume very long length
400314'	265 14 0 00 000000*	RENDEC:	JSP	14,STRTD.##	; Update internal name block
400315'	254 00 0 00 400325'		JMP	CLFAIL		; 0 Decode failed. Just release channel
400316'	265 17 0 00 400214'	RENBLD:	JSP	17,BLDENT	; 1 Build a RENAME block
400317'	265 17 0 00 400723'	RENGO:	JSP	17,IOOP		; Now rename and close the file
400320'	055 00 0 02 000006 		RENAME	LUKENT
400321'	254 00 0 00 400331'		JMP	RENERR		; 0 Save error code
400322'	265 17 0 00 400723'		JSP	17,IOOP		; 1 Success. Release the channel
TENIO - Low Level File I/O Interface Package for TOPS-10	MACRO %53A(1155) 12:27  6-Jun-80 Page 6-2
TENIO	MAC	 8-Jan-69 21:39		CLOSEF - Close and Deallocate a File

400323'	071 00 0 00 000000 		RELEAS	0
400324'	254 00 0 00 400265*		JMP	SKIP1.##	; and leave
				;
400325'	476 00 0 12 000000 	CLFAIL:	SETOM	0(12)		; Failure. Report same
400326'	265 17 0 00 400723'	RENKIL:	JSP	17,IOOP		; Now let go of the channel
400327'	071 00 0 00 000000 		RELEAS	0
400330'	254 00 0 00 400267*		JMP	LEAVE.##	; and get out of here
				;
400331'	550 06 0 02 000011 	RENERR:	HRRZ	6,ENTEXT	; Rename error. Pluck error code
400332'	202 06 0 12 000000 		MOVEM	6,0(12)		; and return it
400333'	254 00 0 00 400326'		JMP	RENKIL
				;
400334'	402 00 0 02 000006 	DSTROY:	CLEARM	LUKENT		; Destroy file. Use short form block
400335'	254 00 0 00 400317'		JMP	RENGO
				;
400336'	554 01 0 12 000000 	INTREN:	HLRZ	1,0(12)		; Grab user supplied internal block
400337'	254 00 0 00 400316'		JMP	RENBLD		; and build RENAME block from it
				;
400340'	554 00 0 12 000000 	RENLEN:	HLRZ	0,0(12)		; Fetch user supplied string length
400341'	200 07 0 12 000001 		MOVE	7,1(12)		; AC+1 has byte pointer
400342'	254 00 0 00 400314'		JMP	RENDEC
				;
				;
				;	GETPTH, USEPTH--Subroutines to build an internal name block
				;	for an open channel.  On entry, R1 points to the file block
				;	(GETPTH) or R3 points to the file block and R1 points to a
				;	supplied internal name block (USEPTH), and R2 contains the
				;	AC aligned channel number.  Rs 6 and 7 are used as scratch.
				;	On exit, R10 contains the device (in case we need it).  Link
				;	by R17.
				;
400343'	201 03 0 01 000000 	GETPTH:	MOVEI	3,0(1)		; Save file block pointer
400344'	201 01 0 02 000015 		MOVEI	1,INTBLK	; Use our own internal block
				;
				;	If there's a Tymshare equivalent for SVC PATH., I havent found it
				;	yet.  Accordingly, the device is assumed to be DSK: (probably OK)
				;	and the PPN is set to 0 (may not be OK at all).  Sorry about that.
				;
400345'	120 06 0 03 000000 	usepth:	DMOVE	6,FILNAM	; Grab name, extension, prot code
400346'	421 07 0 00 000777 		ANDCMI	7,777		; Assume no SFDs
400347'	124 06 0 01 000001 		DMOVEM	6,INTNAM	; Finish building internal block
400350'	402 00 0 01 000003 		clearm	ppn		; No way to retrieve the PPN
400351'	205 10 0 00 446353 		movsi	10,'DSK'	; Assume is DSK: for device
400352'	254 00 0 17 000000 		JMP	0(17)
		000001		FBGR==		1		; Set up for stuff below
TENIO - Low Level File I/O Interface Package for TOPS-10	MACRO %53A(1155) 12:27  6-Jun-80 Page 7
TENIO	MAC	 8-Jan-69 21:39		TRUNCF - Truncate and (Optionally) Close a File

					SUBTTL	TRUNCF - Truncate and (Optionally) Close a File
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				;									;
				;	TRUNCF (op code 14)--This subroutine is used to truncate a	;
				;	file that is already open for output.  Optionally, the file	;
				;	may be left closed.  Parameters:				;
				;									;
				;	A:	File address to set the EOF and sequential pointer to.	;
				;	A+1:	Word of switches.  Currently, only bit 35 is relevant;	;
				;		if set, the file will be left closed on exit.		;
				;	E:	File number to close					;
				;									;
				;	Returns:							;
				;									;
				;	+0:	Error; A contains the error code from the system, or	;
				;		-1 if TENIO detected the error.				;
				;	+1:	Success; registers unchanged.				;
				;									;
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

400353'	265 13 0 00 400773'	TUNCF.:	JSP	13,OUTCHK	; Make sure we're properly open
400354'	303 12 0 00 000016 		CAILE	12,16		; AC number too large?
400355'	254 00 0 00 400425'		JMP	FRET		; Yes. Do not try
400356'	271 12 0 03 000000 		ADDI	12,ACS		; No. Find A
400357'	200 00 0 12 000000 		MOVE	0,0(12)		; Fetch new EOF
400360'	313 00 0 01 000005 		CAMLE	0,EOF		; Bigger than current EOF?
400361'	254 00 0 00 400266'		JMP	BADOPE		; Yes. Disallow it
400362'	554 06 0 01 000004 		HLRZ	6,BLKNUM	; No. Look at current buffered block
400363'	275 06 0 00 000001 		SUBI	6,1		; (DEC counts from 1)
400364'	242 06 0 00 000007 		LSH	6,7
400365'	315 00 0 00 000006 		CAMGE	0,6		; Is it past new EOF?
400366'	553 00 0 01 000004 		HRRZS	BLKNUM		; Yes. Wipe it out
400367'	606 00 0 00 000177 		TRNN	0,177		; Is truncation to even block boundary?
400370'	254 00 0 00 400373'		JMP	CLEAN		; Yes. Just flush buffer
400371'	265 15 0 00 400610'		JSP	15,BFSWAP	; No. Fetch new last block
400372'	665 05 0 00 060000 		TLOSKP	5,DIRTY+TRUNC	; Mark end and force rewrite later
				;
400373'	265 16 0 00 400672'	CLEAN:	JSP	16,FLUSH	; Purge intermediate buffer
				;
				;
				;	In this instance, Tymshare actually made our life easier.  By
				;	providing a real truncate function, they did away with the need
				;	for the nasty close and reopen sequence (and its attendent risk)
				;	necessary when running vanilla TOPS-10.
				;
400374'	554 06 0 00 000002 	trungo:	hlrz	6,2		; Isolate the channel number
400375'	242 06 0 00 777773 		lsh	6,-5
400376'	505 06 0 00 000045 		hrli	6,.chftr	; Now truncate the file
400377'	043 06 0 12 000000 		chanio	6,0(12)		; (no native equivalent)
400400'	254 00 0 00 400412'		jmp	fretrc		; 0 No go. Return with reason
400401'	202 00 0 01 000005 	NEWEOF:	MOVEM	0,EOF		; 1 Set up new EOF
400402'	202 00 0 01 000002 		MOVEM	0,CURSOR	; and sequential file pointer
400403'	200 07 0 12 000001 		MOVE	7,1(12)		; Fetch switch argument
400404'	606 07 0 00 000001 		TRNN	7,TRNCLZ	; Should file be closed at end?
400405'	254 00 0 00 400747'		JMP	SKPOUT		; No. Return happily
TENIO - Low Level File I/O Interface Package for TOPS-10	MACRO %53A(1155) 12:27  6-Jun-80 Page 7-1
TENIO	MAC	 8-Jan-69 21:39		TRUNCF - Truncate and (Optionally) Close a File

400406'	400 04 0 00 000000 		CLEAR	4,0		; Yes. Set close code
400407'	265 14 0 00 400270'		JSP	14,SHUTF	; Do whatever's needed to shut down
400410'	254 00 0 00 400266'		JMP	BADOPE		; 0 Trouble in a funny place
400411'	254 00 0 00 400324*		JMP	SKIP1.##	; 1 Looks good
400412'	552 06 0 12 000000 	fretrc:	HRRZM	6,0(12)		; Return return code
400413'	254 00 0 00 400425'		JMP	FRET		; and exit
TENIO - Low Level File I/O Interface Package for TOPS-10	MACRO %53A(1155) 12:27  6-Jun-80 Page 8
TENIO	MAC	 8-Jan-69 21:39		I/O Routines - Calling Sequences and Register Usage Protocol

					SUBTTL	I/O Routines - Calling Sequences and Register Usage Protocol
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				;									;
				;	Data transfers are handled by RDBLK, RDBLKR, RDWRD, RDWRDR,	;
				;	WRBLK, WRBLKR, WRWRD, and WRWRDR.  For the block oriented rou-	;
				;	tines, the block address is in A, the block length is in A+1;	;
				;	for the word oriented routines, the word to be read or written	;
				;	is in A.  The random routines have the file address from which	;
				;	to read or write in the next sequential register after the	;
				;	above; the sequential routines use the saved sequential file	;
				;	pointer (CURSOR) from the file block.  Both random and sequen-	;
				;	tial routines will update the file address at exit; the block	;
				;	oriented routines will update the memory address and length as	;
				;	well.  All routines exit+0 on error; the input routines exit+1	;
				;	if an EOF is hit (in which case only partial I/O may be done),	;
				;	+2 if all went well.  The output routines exit+1 if no error	;
				;	was found.  For all routines the file number will be in E.	;
				;									;
				;	This collection of routines is much more interrelated than	;
				;	OPENF and CLOSEF; accordingly, there is a more formalized re-	;
				;	gister usage protocol.  In general, R0 will contain the current	;
				;	file address cursor (word address); R1 points to the relevant	;
				;	file block; R2 (left) contains channel number AC aligned; R2	;
				;	(right) points to our scratch storage (for PASCAL).  R3 keeps	;
				;	track of the current user memory address; it is used as a BLT	;
				;	pointer, so the right half register is used for input routines,	;
				;	the left half for output routines.  R4 contains the negative	;
				;	of the remaining length to read or write; R5 contains SWCHBF	;
				;	(switches in left half, intermediate buffer pointer in right	;
				;	half).  Rs 6, 7, and 10 are scratch registers of varying de-	;
				;	grees of locality (see comments in the code).  R11, incredibly	;
				;	enough, is not used for anything, R12 points to A, and R13	;
				;	points to the file pointer (i.e., either A+2 or CURSOR).  Rs 14	;
				;	through 17 are hierarchical subroutine links; the protocol is	;
				;	that lowest level routines link by R17,second level routines by	;
				;	R16, etc.  No routine may touch a link register above its level	;
				;	(e.g., if it links by R16, Rs 14 and 15 are off limits); it may	;
				;	use a lower level register (in the example above, R17) for lo-	;
				;	cal scratch if it desires.  Since there is absolutely nothing	;
				;	recursive about this code, there is no stack pointer.		;
				;									;
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
TENIO - Low Level File I/O Interface Package for TOPS-10	MACRO %53A(1155) 12:27  6-Jun-80 Page 9
TENIO	MAC	 8-Jan-69 21:39		RDBLK - Read a Sequential Block from File

					SUBTTL	RDBLK - Read a Sequential Block from File
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				;									;
				;	RDBLK (op code 1)--Read a sequential block from a file into	;
				;	memory (see general I/O routines comments for calling se-	;
				;	quence).  This will exit+1 if a read of any length (including	;
				;	zero) is attempted beyond the end of the file.			;
				;									;
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

400414'	265 13 0 00 400476'	RDBLK.:	JSP	13,INCHEK	; Find file block and scratch storage
400415'	303 12 0 00 000016 		CAILE	12,16		; Is AC # > 16?
400416'	254 00 0 00 400425'		JMP	FRET		; Yes. No wrap around allowed
400417'	271 12 0 03 000000 		ADDI	12,ACS		; No. Point to AC
400420'	201 13 0 01 000002 		MOVEI	13,CURSOR	; Use sequential file pointer
400421'	200 00 0 13 000000 	BLFTCH:	MOVE	0,0(13)		; Fetch file pointer
400422'	321 00 0 00 400425'		JUMPM	0,FRET		; Negative pointer. No go
400423'	550 03 0 12 000000 		HRRZ	3,0(12)		; Point to input buffer
400424'	307 03 0 00 000017 		CAIG	3,17		; Is buffer in registers?
400425'	254 00 0 00 400330*	FRET:	JMP	LEAVE.##	; Yes. Centralized Fail RETurn (exit+0)
400426'	210 04 0 12 000001 		MOVN	4,1(12)		; No. Fetch negative length
400427'	327 04 0 00 400425'		JUMPP	4,FRET		; User gave negative length. Ungood
400430'	265 14 0 00 400523'		JSP	14,READ		; Do it!
				;
				;	Read succeeded.  Figure amount actually read; use requested
				;	length for EOF calculation.  (We can't use the length in R4
				;	because it got adjusted so it wouldn't actually try to read
				;	past the end of file.)
				;
400431'	200 07 0 12 000000 		MOVE	7,0(12)		; Find buffer beginning
400432'	542 03 0 12 000000 		HRRM	3,0(12)		; Return updated buffer pointer
400433'	275 03 0 07 000000 		SUBI	3,0(7)		; Compute actual length read
400434'	505 03 0 00 000000 		HRLI	3,0		; Make sure left half is clear
400435'	200 07 0 12 000001 		MOVE	7,1(12)		; Fetch original desired length
400436'	276 07 0 00 000003 		SUBM	7,3		; Difference is length to return
400437'	202 03 0 12 000001 		MOVEM	3,1(12)
400440'	270 07 0 13 000000 		ADD	7,0(13)		; Find desired final file pointer
400441'	313 07 0 01 000005 		CAMLE	7,EOF		; Was it past file end?
400442'	254 00 0 00 400746'		JMP	SVCRSR		; Yes. Save cursor and exit+1
400443'	202 00 0 13 000000 	DUBSKP:	MOVEM	0,0(13)		; No. Save final file pointer
400444'	202 05 0 01 000003 		MOVEM	5,SWCHBF	; and switches
400445'	254 00 0 00 000000*		JMP	SKIP2.##	; Exit+2
TENIO - Low Level File I/O Interface Package for TOPS-10	MACRO %53A(1155) 12:27  6-Jun-80 Page 10
TENIO	MAC	 8-Jan-69 21:39		RDBLKR, RDWRD, and RDWRDR - Single Word and Random Block Input

					SUBTTL	RDBLKR, RDWRD, and RDWRDR - Single Word and Random Block Input
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				;									;
				;	RDBLKR (op code 2)--Read a random block.  The file pointer	;
				;	is in A+2; otherwise, this just feeds into RDBLK.		;
				;									;
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

400446'	265 13 0 00 400476'	RBLKR.:	JSP	13,INCHEK	; Find file block and test for input
400447'	303 12 0 00 000015 		CAILE	12,15		; Would AC number force wrap around?
400450'	254 00 0 00 400425'		JMP	FRET		; Yes. Forbid it
400451'	271 12 0 03 000000 		ADDI	12,ACS		; No. Point to A
400452'	201 13 0 12 000002 		MOVEI	13,2(12)	; Find file pointer
400453'	254 00 0 00 400421'		JMP	BLFTCH		; The rest is the same as sequential
TENIO - Low Level File I/O Interface Package for TOPS-10	MACRO %53A(1155) 12:27  6-Jun-80 Page 11
TENIO	MAC	 8-Jan-69 21:39		RDBLKR, RDWRD, and RDWRDR - Single Word and Random Block Input

				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				;									;
				;	RDWRD (op code 7) and RDWRDR (op code 10)--Sequential and ran-	;
				;	dom word input.  This code sets R3 to point to A (in saved	;
				;	AC block) and sets up a length of 1.  That effectively fakes	;
				;	RDBLK and RDBLKR into dealing with a one word block.		;
				;									;
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

400454'	265 13 0 00 400476'	RDWRD.:	JSP	13,INCHEK	; Check input and find file block
400455'	271 12 0 03 000000 		ADDI	12,ACS		; Set up AC pointer
400456'	201 13 0 01 000002 		MOVEI	13,CURSOR	; Use saved file pointer
400457'	200 00 0 13 000000 	WDFTCH:	MOVE	0,0(13)		; Fetch file pointer
400460'	321 00 0 00 400425'		JUMPM	0,FRET		; If negative, give up
400461'	201 03 0 12 000000 		MOVEI	3,0(12)		; Point to saved AC
400462'	474 04 0 00 000000 		SETO	4,0		; Negative length = -1
400463'	265 14 0 00 400523'		JSP	14,READ		; Read the word
400464'	316 00 0 13 000000 		CAMN	0,0(13)		; Did cursor advance?
400465'	254 00 0 00 400747'		JMP	SKPOUT		; No; Must be EOF. Exit+1
400466'	254 00 0 00 400443'		JMP	DUBSKP		; Yes. Exit+2

400467'	265 13 0 00 400476'	RWRDR.:	JSP	13,INCHEK	; Check input and get file block
400470'	201 17 0 00 400457'		MOVEI	17,WDFTCH	; Set up input take off spot
400471'	303 12 0 00 000016 	WRDRAN:	CAILE	12,16		; Might AC+1 wrap around to 0?
400472'	254 00 0 00 400425'		JMP	FRET		; Yes. That's a no no
400473'	271 12 0 03 000000 		ADDI	12,ACS		; No. Point to AC
400474'	201 13 0 12 000001 		MOVEI	13,1(12)	; Find file pointer
400475'	254 00 0 17 000000 		JMP	0(17)		; and do random word input or output
TENIO - Low Level File I/O Interface Package for TOPS-10	MACRO %53A(1155) 12:27  6-Jun-80 Page 12
TENIO	MAC	 8-Jan-69 21:39		Input Data Transfer Subroutines--INCHEK, GETBLK

					SUBTTL	Input Data Transfer Subroutines--INCHEK, GETBLK
				;
				;	INCHEK--Subroutine to find a file block and insure that input
				;	is acceptable on it.  This routine calls GETBLK to do most of
				;	its dirty work.  Link by R13 (a very brief deep subroutine call).
				;
400476'	265 14 0 00 400503'	INCHEK:	JSP	14,BTNAB	; Find the file block and other scratch
400477'	254 00 0 00 400425'		JMP	FRET		; 0 Invalid channel number. Duck out
400500'	603 05 0 00 400000 		TLNZ	5,INOK		; 1 Is input valid?
400501'	254 00 0 13 000000 		JMP	0(13)		; Yes. Return
400502'	254 00 0 00 400425'		JMP	FRET		; No. Don't try
				;
				;	BTNAB--Subroutine to find a file block and scratch storage.
				;	On entry, R15 must be unchanged from its value at entry (it
				;	may be some sort of weird PASCAL scratch storage pointer).
				;	GETBLK--Subroutine to just find a file block.  On entry, LUOAD.
				;	(looks like location 40) points to the channel number.  On exit,
				;	R1 points to the file block, R2 (left) contains the channel
				;	number aligned for ORing into an I/O instruction, R2 (right)
				;	points to the TENIO. scratch area, R5 contains the switches
				;	and buffer address, and R12 contains the AC number.  Link
				;	by 1(14) on success, by R14 on invalid channel number.
				;
400503'	265 16 0 00 400227*	BTNAB:	JSP	16,TNAB.##	; Find scratch area and registers
400504'	550 01 0 00 400016*	GETBLK:	HRRZ	1,LUOAD.	; Fetch channel number
400505'	307 01 0 00 000017 		CAIG	1,17		; (may be in registers)
400506'	271 01 0 03 000000 		ADDI	1,ACS
400507'	550 01 0 01 000000 		HRRZ	1,0(1)
400510'	201 05 0 01 000000 		MOVEI	5,0(1)		; Align channel number
400511'	242 05 0 00 000005 		LSH	5,5		; into AC slot
400512'	505 02 0 05 000000 		HRLI	2,0(5)
400513'	303 01 0 00 000017 		CAILE	1,17		; Is channel in valid range?
400514'	254 00 0 14 000000 		JMP	0(14)		; No. Exit+0
400515'	361 01 0 14 000000 		SOJM	1,0(14)		; Channel zero is reserved, too
400516'	221 01 0 00 000006 		IMULI	1,BLKSIZ	; Valid. Find file block
400517'	271 01 0 02 000026 		ADDI	1,BLOCKS
400520'	200 05 0 01 000003 		MOVE	5,SWCHBF	; Fetch switches, buffer pointer,
400521'	135 12 0 00 400230*		LDB	12,APOIN.	; and AC number
400522'	254 00 0 14 000001 		JMP	1(14)		; Exit+1
TENIO - Low Level File I/O Interface Package for TOPS-10	MACRO %53A(1155) 12:27  6-Jun-80 Page 13
TENIO	MAC	 8-Jan-69 21:39		Input Data Transfer Subroutines--READ

					SUBTTL	Input Data Transfer Subroutines--READ
				;
				;	READ--Subroutine to manage input operations for all input data
				;	transfer functions.  On entry, R0 contains the file address from
				;	which to read, R1 points to the file block, R2 contains the
				;	AC aligned channel number and scratch area pointer, R3 is
				;	the user's input buffer pointer, R4 is the negative of the length
				;	to be read, and R5 contains the internal buffer pointer and the
				;	usual collection of switches.  On exit, Rs 0 and 3 have been
				;	updated as required and as much input as could be done was.  Link
				;	by R14.  This routine sideways exits to FRET if an error of some
				;	sort is encountered.
				;
400523'	200 07 0 00 000000 	READ:	MOVE	7,0		; Compute negative length of maximum
400524'	274 07 0 01 000005 		SUB	7,EOF		; that could be read
400525'	315 04 0 00 000007 		CAMGE	4,7		; Did the user request more?
400526'	200 04 0 00 000007 		MOVE	4,7		; Yes. Trim request down to size
400527'	325 04 0 14 000000 		JUMPNM	4,0(14)		; If nothing will be read, leave now
400530'	402 00 0 02 000004 		CLEARM	1+IOLST		; Something will. Set I/O list terminator
400531'	606 00 0 00 000177 		TRNN	0,177		; Are we on a disk block boundary?
400532'	254 00 0 00 400550'		JMP	EVENBI		; Yes. May do direct input
400533'	265 15 0 00 400610'		JSP	15,BFSWAP	; No. Get block into intermediate buffer
400534'	200 07 0 00 000000 		MOVE	7,0		; Find address in buffer from which to
400535'	405 07 0 00 000177 		ANDI	7,177		; begin copying (buffer address+offset)
400536'	201 10 0 05 000000 		MOVEI	10,0(5)
400537'	271 10 0 07 000000 		ADDI	10,0(7)
400540'	504 03 0 00 000010 		HRL	3,10		; Generate BLT pointer
400541'	275 07 0 00 000200 		SUBI	7,200		; Compute remaining buffer length
400542'	315 07 0 00 000004 		CAMGE	7,4		; Is that more than we need?
400543'	200 07 0 00 000004 		MOVE	7,4		; Yes. Don't get carried away!
400544'	274 04 0 00 000007 		SUB	4,7		; Update remaining input length
400545'	274 00 0 00 000007 		SUB	0,7		; Update file input pointer
400546'	276 03 0 00 000007 		SUBM	3,7		; Compute first address not hit
400547'	251 03 0 07 777777 		BLT	3,-1(7)		; Copy just up to it
				;
				;	BLKCHK leaves information in Rs 6 and 15.  The latter is a
				;	violation of our link register protocol.  Sigh.
				;
400550'	265 16 0 00 400652'	EVENBI:	JSP	16,BLKCHK	; Is there a full block left?
400551'	254 00 0 00 400574'		JMP	RDTAIL		; 0 No. Copy the tail
400552'	600 00 0 00 000000 		NOP	0		; 1 Yes. Buffer is tail block
400553'	265 16 0 00 400672'		JSP	16,FLUSH	; 2 Yes; buffer in middle. Purge it
400554'	201 07 0 15 000000 	RDIRCT:	MOVEI	7,0(15)		; 3 Yes, and buffer no problem
400555'	265 17 0 00 400717'		JSP	17,FIND		; Tell I/O system where to read
400556'	074 00 0 07 000000 		USETI	0(7)		; (feed to IOOP)
400557'	515 07 0 04 000000 		HRLZI	7,0(4)		; Fetch remaining negative length
400560'	541 07 0 03 777777 		HRRI	7,-1(3)		; and starting address - 1
400561'	202 07 0 02 000003 		MOVEM	7,IOLST		; The result is an I/O word
400562'	265 17 0 00 400723'		JSP	17,IOOP		; Now read a whole bunch
400563'	056 00 0 02 000003 		IN	IOLST		; (executed with channel number)
400564'	254 00 0 00 400566'		JMP	INUP		; 0 All went well. How nice
				;
				;	Send all disk errors through this point.
				;
400565'	254 00 0 00 400425'	DSKERR:	JMP	FRET		; 1 Trouble. Shouldn't happen
TENIO - Low Level File I/O Interface Package for TOPS-10	MACRO %53A(1155) 12:27  6-Jun-80 Page 13-1
TENIO	MAC	 8-Jan-69 21:39		Input Data Transfer Subroutines--READ

				;
400566'	274 00 0 00 000004 	INUP:	SUB	0,4		; Now update file pointer
400567'	275 03 0 04 000000 		SUBI	3,0(4)		; and buffer pointer
400570'	602 04 0 00 000177 		TRNZ	4,177		; Was this an even block length?
400571'	271 06 0 00 000001 		ADDI	6,1		; No. Adjust to next block
400572'	542 06 0 01 000004 		HRRM	6,BLKNUM	; Keep track of next I/O block
400573'	254 00 0 14 000000 		JMP	0(14)		; And that's it
				;
				;	No full blocks to be read.  Use the intermediate buffer if we
				;	can.
				;
400574'	325 04 0 14 000000 	RDTAIL:	JUMPNM	4,0(14)		; Quit if no more at all
400575'	607 05 0 00 100000 		TLNN	5,BUFOK		; Some left. Is there a buffer?
400576'	254 00 0 00 400606'		JMP	NOBUFR		; No. Must read in directly
400577'	265 15 0 00 400610'		JSP	15,BFSWAP	; Yes. Fetch current disk block
400600'	505 03 0 05 000000 		HRLI	3,0(5)		; Copy from front of buffer
400601'	460 07 0 00 000004 		SETCM	7,4		; Compute length remaining - 1
400602'	271 00 0 07 000001 		ADDI	0,1(7)		; Update final file pointer
400603'	271 07 0 03 000000 		ADDI	7,0(3)		; Compute last location in buffer
400604'	251 03 0 07 000000 		BLT	3,0(7)		; and move in the tail
400605'	254 00 0 14 000000 		JMP	0(14)
				;
400606'	201 06 0 15 000000 	NOBUFR:	MOVEI	6,0(15)		; No buffer. Get final block number
400607'	254 00 0 00 400554'		JMP	RDIRCT		; and use direct input
TENIO - Low Level File I/O Interface Package for TOPS-10	MACRO %53A(1155) 12:27  6-Jun-80 Page 14
TENIO	MAC	 8-Jan-69 21:39		Input Data Transfer Subroutines--BFSWAP

					SUBTTL	Input Data Transfer Subroutines--BFSWAP
				;
				;	BFSWAP--Subroutine to insure that the intermediate buffer con-
				;	tains the desired disk block.  If the current block is not the one
				;	desired this routine will flush it to disk (if necessary) and read
				;	in the new one.  On entry, R0 contains the current file pointer.
				;	All scratch registers get clobbered.  On exit, the block number
				;	has been updated.  Link by R15.  This will sideways exit to FRET
				;	if it gets in trouble.
				;
400610'	607 05 0 00 100000 	BFSWAP:	TLNN	5,BUFOK		; Is there a buffer?
400611'	254 00 0 00 400425'		JMP	FRET		; No. Get out now
400612'	200 06 0 00 000000 		MOVE	6,0		; Yes. Compute desired block number
400613'	242 06 0 00 777771 		LSH	6,-7
400614'	271 06 0 00 000001 		ADDI	6,1		; (DEC counts from 1)
400615'	554 16 0 01 000004 		HLRZ	16,BLKNUM	; Is it the current block?
400616'	306 06 0 16 000000 		CAIN	6,0(16)
400617'	254 00 0 15 000000 		JMP	0(15)		; Yes. All set
400620'	265 16 0 00 400672'		JSP	16,FLUSH	; No. Purge to disk if needed
400621'	200 16 0 01 000005 		MOVE	16,EOF		; Compute last block in file
400622'	271 16 0 00 000177 		ADDI	16,177		; (don't add 1 if on block boundary)
400623'	242 16 0 00 777771 		LSH	16,-7
400624'	305 16 0 06 000000 		CAIGE	16,0(6)		; Is it beyond the end?
400625'	254 00 0 00 400645'		JMP	VIRGIN		; Yes. Zero the buffer
400626'	201 07 0 06 000000 		MOVEI	7,0(6)		; No. Tell input where to read
400627'	265 17 0 00 400717'		JSP	17,FIND
400630'	074 00 0 07 000000 		USETI	0(7)		; Set pointer; channel ORed in
400631'	201 07 0 05 777777 		MOVEI	7,-1(5)		; Find starting buffer address - 1
400632'	505 07 0 00 777600 		HRLI	7,-200		; Disk block is 200 (octal) words
400633'	202 07 0 02 000003 		MOVEM	7,IOLST
400634'	265 17 0 00 400723'		JSP	17,IOOP		; Read in the disk block
400635'	056 00 0 02 000003 		IN	IOLST
400636'	354 00 0 01 000004 		AOSKP	BLKNUM		; Success. Increment next block
400637'	254 00 0 00 400565'		JMP	DSKERR		; Failure. Exit sideways
400640'	621 05 0 00 040000 		TLZ	5,TRUNC		; Assume full buffer read
400641'	306 16 0 06 000000 		CAIN	16,0(6)		; Is this the final block?
400642'	661 05 0 00 040000 	TRUNCO:	TLO	5,TRUNC		; Yes. Assume it's truncated
400643'	506 06 0 01 000004 		HRLM	6,BLKNUM	; This is now our buffer
400644'	254 00 0 15 000000 		JMP	0(15)
				;
400645'	402 00 0 05 000000 	VIRGIN:	CLEARM	0(5)		; Beyond file end. Zero the whole
400646'	201 07 0 05 000001 		MOVEI	7,1(5)		; buffer
400647'	505 07 0 05 000000 		HRLI	7,0(5)		; Build BLT pointer
400650'	251 07 0 05 000177 		BLT	7,177(5)	; Zzzzzzzzzap!
400651'	254 00 0 00 400642'		JMP	TRUNCO		; (This is now the last block)
TENIO - Low Level File I/O Interface Package for TOPS-10	MACRO %53A(1155) 12:27  6-Jun-80 Page 15
TENIO	MAC	 8-Jan-69 21:39		Input Data Transfer Subroutines--BLKCHK

					SUBTTL	Input Data Transfer Subroutines--BLKCHK
				;
				;	BLKCHK--Subroutine to determine whether there are any full sized
				;	blocks to be read or written and, if there are, whether the
				;	intermediate buffer contains one of them.  On exit, R15 will
				;	contain the block number of the current file pointer and R6 will
				;	contain the block number following the last full block to be
				;	transfered (part of it may or may not also be transfered).
				;	Links:  by R16 ==> no full blocks to transfer (in which case
				;	R6 will contain 0), 1(16) ==> buffer contains block following
				;	full block, and part of it will be transfered, 2(16) ==> buffer
				;	contains a full block which will be transfered, 3(16) ==> buffer
				;	contains no block which will be transfered.  For the last three
				;	returns, there will be one or more full blocks to transfer.  Note
				;	that although this routine links by R16, it returns values in
				;	R15.  This is a (nearly) unavoidable violation of protocol.
				;
400652'	210 06 0 00 000004 	BLKCHK:	MOVN	6,4		; Get length remaining
400653'	242 06 0 00 777771 		LSH	6,-7		; Convert to full blocks left
400654'	200 15 0 00 000000 		MOVE	15,0		; Compute current block number
400655'	242 15 0 00 777771 		LSH	15,-7
400656'	271 15 0 00 000001 		ADDI	15,1
400657'	322 06 0 16 000000 		JUMPZ	6,0(16)		; No full blocks left. Exit+0
400660'	271 06 0 15 000000 		ADDI	6,0(15)		; Some left. Find trailing block number
400661'	554 17 0 01 000004 		HLRZ	17,BLKNUM	; Fetch current block number
400662'	307 15 0 17 000000 		CAIG	15,0(17)	; Is buffer outside transfer range?
400663'	305 06 0 17 000000 		CAIGE	6,0(17)
400664'	254 00 0 16 000003 		JMP	3(16)		; Yes (or it doesn't exist). Exit+3
400665'	302 06 0 17 000000 		CAIE	6,0(17)		; Maybe. Is it trailing block?
400666'	254 00 0 16 000002 		JMP	2(16)		; No; must be interior. Exit+2
400667'	606 04 0 00 000177 		TRNN	4,177		; Yes. Will some be transfered?
400670'	254 00 0 16 000003 		JMP	3(16)		; No. Exit+3
400671'	254 00 0 16 000001 		JMP	1(16)		; Yes. Exit+1
TENIO - Low Level File I/O Interface Package for TOPS-10	MACRO %53A(1155) 12:27  6-Jun-80 Page 16
TENIO	MAC	 8-Jan-69 21:39		Input Data Transfer Subroutines--FLUSH

					SUBTTL	Input Data Transfer Subroutines--FLUSH
				;
				;	FLUSH--Subroutine to update the disk from the intermediate
				;	buffer if the buffer has been modified.  No parameters; Rs 7 and
				;	10 are used as scratch.  Link by R16.
				;
400672'	607 05 0 00 020000 	FLUSH:	TLNN	5,DIRTY		; Is buffer dirty?
400673'	254 00 0 16 000000 	RET16.:	JMP	0(16)		; No. No need to write it then
400674'	554 07 0 01 000004 		HLRZ	7,BLKNUM	; Yes. Fetch its disk block number
400675'	322 07 0 16 000000 		JUMPZ	7,0(16)		; Null. How odd. Just leave
400676'	265 17 0 00 400717'		JSP	17,FIND		; Valid. Tell TOPS-10 where to go
400677'	075 00 0 07 000000 		USETO	0(7)
400700'	201 07 0 05 777777 		MOVEI	7,-1(5)		; Build I/O list
400701'	603 05 0 00 040000 		TLNZ	5,TRUNC		; Is this possibly < 200 words?
400702'	254 00 0 00 400713'		JMP	SMALBF		; Yes. Figure out how many
400703'	505 07 0 00 777600 		HRLI	7,-200		; No. Use full amount
400704'	202 07 0 02 000003 	PUTOUT:	MOVEM	7,IOLST
400705'	265 17 0 00 400723'		JSP	17,IOOP		; Now write the block
400706'	057 00 0 02 000003 		OUT	IOLST
400707'	354 00 0 01 000004 		AOSKP	BLKNUM		; Success. Increment block counter
400710'	254 00 0 00 400565'		JMP	DSKERR		; Failure. Get out fast
400711'	621 05 0 00 020000 		TLZ	5,DIRTY		; Block is now clean
400712'	254 00 0 16 000000 		JMP	0(16)
				;
400713'	210 17 0 01 000005 	SMALBF:	MOVN	17,EOF		; Remaining length is low order seven
400714'	435 17 0 00 777600 		ORI	17,-200		; bits of negative EOF pointer
400715'	505 07 0 17 000000 		HRLI	7,0(17)		; (Try it if you don't believe me!)
400716'	254 00 0 00 400704'		JMP	PUTOUT		; Now write it normally
TENIO - Low Level File I/O Interface Package for TOPS-10	MACRO %53A(1155) 12:27  6-Jun-80 Page 17
TENIO	MAC	 8-Jan-69 21:39		Input Data Transfer Subroutines--FIND and IOOP

					SUBTTL	Input Data Transfer Subroutines--FIND and IOOP
				;
				;	FIND--Subroutine to locate a particular disk block.  On entry,
				;	R7 contains the relevant number and 0(17) is a USETI or USETO
				;	(for input and output, respectively) instruction (without a
				;	channel number).  R10 is used as scratch.  On exit, TOPS-10
				;	has been informed.  Link by 1(17).
				;
400717'	550 10 0 01 000004 	FIND:	HRRZ	10,BLKNUM	; Fetch next block number
400720'	306 07 0 10 000000 		CAIN	7,0(10)		; Is it the requested one?
400721'	254 00 0 17 000001 		JMP	1(17)		; Yes. No system call needed
400722'	542 07 0 01 000004 		HRRM	7,BLKNUM	; No. It will be soon...
				;
				;	IOOP--Subroutine to execute an I/O instruction that contains
				;	a channel number as its AC field.  On entry, 0(17) contains
				;	the relevant I/O instruction (with no channel number specified).
				;	R10 is used as scratch.  Link by 1(17) if the instruction does
				;	not skip, by 2(17) if it does.
				;
400723'	510 10 0 00 000002 	IOOP:	HLLZ	10,2		; Grab channel number
400724'	434 10 0 17 000000 		OR	10,0(17)	; OR in the rest of the instruction
400725'	256 00 0 00 000010 		XCT	10		; Do it!
400726'	254 00 0 17 000001 		JMP	1(17)		; Instruction did not skip. Exit+1
400727'	254 00 0 17 000002 		JMP	2(17)		; Instruction skipped. Exit+2
TENIO - Low Level File I/O Interface Package for TOPS-10	MACRO %53A(1155) 12:27  6-Jun-80 Page 18
TENIO	MAC	 8-Jan-69 21:39		WRBLK, WRBLKR - Write Blocks of Memory to a File

					SUBTTL	WRBLK, WRBLKR - Write Blocks of Memory to a File
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				;									;
				;	WRBLK (op code 3)--Write a sequential memory block to file	;
				;	WRBLKR (op code 4)--Write a random memory block to file		;
				;	See general I/O routines comments for calling sequences.	;
				;	(In order to avoid conflicts with the PASCAL I/O system,	;
				;	WRBLK has dropped the "R".  Yuch.)				;
				;									;
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

400730'	265 13 0 00 400773'	WBLK.:	JSP	13,OUTCHK	; Find file block for file
400731'	303 12 0 00 000016 		CAILE	12,16		; Do registers wrap around?
400732'	254 00 0 00 400425'		JMP	FRET		; Yes. Ungood
400733'	271 12 0 03 000000 		ADDI	12,ACS		; No. Point to A
400734'	201 13 0 01 000002 		MOVEI	13,CURSOR	; Use sequential file pointer
400735'	200 00 0 13 000000 	BLSHUV:	MOVE	0,0(13)		; Fetch actual file pointer
400736'	321 00 0 00 400425'		JUMPM	0,FRET		; (object if negative)
400737'	514 03 0 12 000000 		HRLZ	3,0(12)		; Get output buffer location
400740'	607 03 0 00 777760 		TLNN	3,-20		; Is it in the registers?
400741'	254 00 0 00 400425'		JMP	FRET		; Yes. That's illegal
400742'	210 04 0 12 000001 		MOVN	4,1(12)		; No. Fetch negative block length
400743'	265 14 0 00 401000'		JSP	14,WRITE	; and write the block
400744'	546 03 0 12 000000 		HLRM	3,0(12)		; Update buffer pointer
400745'	402 00 0 12 000001 		CLEARM	1(12)		; No more to be written
400746'	202 00 0 13 000000 	SVCRSR:	MOVEM	0,0(13)		; Update file cursor
400747'	202 05 0 01 000003 	SKPOUT:	MOVEM	5,SWCHBF	; Restore switches
400750'	254 00 0 00 400411*		JMP	SKIP1.##	; and leave successfully


400751'	265 13 0 00 400773'	WBLKR.:	JSP	13,OUTCHK	; Find file block and check output
400752'	303 12 0 00 000015 		CAILE	12,15		; The usual wrap around check
400753'	254 00 0 00 400425'		JMP	FRET		; No go
400754'	271 12 0 03 000000 		ADDI	12,ACS		; OK. Point to A
400755'	201 13 0 12 000002 		MOVEI	13,2(12)	; File pointer is in AC+2
400756'	254 00 0 00 400735'		JMP	BLSHUV		; Now just write a block
TENIO - Low Level File I/O Interface Package for TOPS-10	MACRO %53A(1155) 12:27  6-Jun-80 Page 19
TENIO	MAC	 8-Jan-69 21:39		WRWRD, WRWRDR - Write a Single Word to a File

					SUBTTL	WRWRD, WRWRDR - Write a Single Word to a File
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				;									;
				;	WRWRD (op code 11)--Write a sequential word to file		;
				;	WRWRDR (op code 12)--Write a random word to a file		;
				;	Again, see the general I/O routine comments for calling se-	;
				;	quences.							;
				;									;
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

400757'	265 13 0 00 400773'	WRWRD.:	JSP	13,OUTCHK	; Again, check output
400760'	271 12 0 03 000000 		ADDI	12,ACS		; Point to A
400761'	201 13 0 01 000002 		MOVEI	13,CURSOR	; Do it sequentially
400762'	200 00 0 13 000000 	WDSHUV:	MOVE	0,0(13)		; Fetch cursor
400763'	321 00 0 00 400425'		JUMPM	0,FRET		; (barf if negative)
400764'	205 03 0 12 000000 		MOVSI	3,0(12)		; Set output buffer in saved ACs
400765'	474 04 0 00 000000 		SETO	4,0		; Length is one
400766'	265 14 0 00 401000'		JSP	14,WRITE	; Write the word
400767'	254 00 0 00 400746'		JMP	SVCRSR		; Save the cursor and exit


400770'	265 13 0 00 400773'	WWRDR.:	JSP	13,OUTCHK	; The usual output check
400771'	201 17 0 00 400762'		MOVEI	17,WDSHUV	; Write out the AC,
400772'	254 00 0 00 400471'		JMP	WRDRAN		; after random I/O setup
TENIO - Low Level File I/O Interface Package for TOPS-10	MACRO %53A(1155) 12:27  6-Jun-80 Page 20
TENIO	MAC	 8-Jan-69 21:39		Output Data Transfer Subroutines--OUTCHK, WRITE, EOFUP

					SUBTTL	Output Data Transfer Subroutines--OUTCHK, WRITE, EOFUP
				;
				;	OUTCHK--Subroutine to find a file block and insure that
				;	output is OK (analogously with INCHEK).  Link by R13 (a
				;	short but very deep subroutine).
				;
400773'	265 14 0 00 400503'	OUTCHK:	JSP	14,BTNAB	; Find the file block
400774'	254 00 0 00 400425'		JMP	FRET		; 0 No can do. Leave fast
400775'	603 05 0 00 200000 		TLNZ	5,OUTOK		; 1 Is output OK?
400776'	254 00 0 13 000000 		JMP	0(13)		; Yes. Return
400777'	254 00 0 00 400425'		JMP	FRET		; No. Take a dive
				;
				;	WRITE--Subroutine to manage output operations for all four
				;	output functions.  On entry, the left half of R3 points to
				;	the user's output buffer; other registers are similar to
				;	those used for READ.  On exit, Rs 0 and 3 have been updated.
				;	Link by R14; sideways exit to FRET if anything proves amiss.
				;
401000'	322 04 0 14 000000 	WRITE:	JUMPZ	4,0(14)		; If nothing to write, leave now
401001'	402 00 0 02 000004 		CLEARM	1+IOLST		; Something. Set up I/O list terminator
401002'	606 00 0 00 000177 		TRNN	0,177		; Are we at an even disk block boundary?
401003'	254 00 0 00 401024'		JMP	EVENBO		; Yes
401004'	265 15 0 00 400610'		JSP	15,BFSWAP	; No. Get required disk block into buffer
401005'	200 07 0 00 000000 		MOVE	7,0		; Compute starting buffer offset
401006'	405 07 0 00 000177 		ANDI	7,177
401007'	541 03 0 05 000000 		HRRI	3,0(5)		; Set up copy to starting address
401010'	271 03 0 07 000000 		ADDI	3,0(7)
401011'	275 07 0 00 000200 		SUBI	7,200		; Compute negative buffer tail length
401012'	315 07 0 00 000004 		CAMGE	7,4		; Is it more than total copy length?
401013'	200 07 0 00 000004 		MOVE	7,4		; Yes. Copy only what we should
401014'	274 04 0 00 000007 		SUB	4,7		; Compute negative length left
401015'	274 00 0 00 000007 		SUB	0,7		; Update file cursor
401016'	276 03 0 00 000007 		SUBM	3,7		; Compute first location not hit
401017'	251 03 0 07 777777 		BLT	3,-1(7)		; and copy required block
401020'	661 05 0 00 020000 		TLO	5,DIRTY		; Buffer is now dirty
401021'	265 17 0 00 401066'		JSP	17,EOFUP	; Update end of file if needed
401022'	325 04 0 14 000000 		JUMPNM	4,0(14)		; If done, quit here
401023'	265 16 0 00 400672'		JSP	16,FLUSH	; Else, purge buffer (possibly avoid seek)
401024'	265 16 0 00 400652'	EVENBO:	JSP	16,BLKCHK	; Any full blocks to write?
401025'	254 00 0 00 401055'		JMP	WRTAIL		; 0 No. Write partial one
401026'	254 00 0 00 401032'		JMP	BIGOUT		; 1 Yes; tail block needs no purge
401027'	625 05 0 00 060000 		TLZSKP	5,TRUNC+DIRTY	; 2 Yes; ditch internal block
401030'	254 00 0 00 401032'		JMP	BIGOUT		; 3 Yes. Buffer not affected
401031'	553 00 0 01 000004 		HRRZS	BLKNUM		; Clear out buffer number
401032'	201 07 0 15 000000 	BIGOUT:	MOVEI	7,0(15)		; Fetch requested block number
401033'	265 17 0 00 400717'		JSP	17,FIND		; and point I/O system to it
401034'	075 00 0 07 000000 		USETO	0(7)		; 0 (to be executed)
401035'	205 07 0 04 000177 		MOVSI	7,177(4)	; 1 Compute negative word count of
401036'	621 07 0 00 000177 		TLZ	7,177		; blocks to write
401037'	544 07 0 00 000003 		HLR	7,3		; Compute starting address - 1
401040'	275 07 0 00 000001 		SUBI	7,1
401041'	202 07 0 02 000003 		MOVEM	7,IOLST		; and build I/O list
401042'	265 17 0 00 400723'		JSP	17,IOOP		; Now write the block
401043'	057 00 0 02 000003 		OUT	IOLST
401044'	254 00 0 00 401046'		JMP	OUTUP		; 0 Success
TENIO - Low Level File I/O Interface Package for TOPS-10	MACRO %53A(1155) 12:27  6-Jun-80 Page 20-1
TENIO	MAC	 8-Jan-69 21:39		Output Data Transfer Subroutines--OUTCHK, WRITE, EOFUP

401045'	254 00 0 00 400565'		JMP	DSKERR		; 1 Failure. Give up early
				;
401046'	564 17 0 00 000007 	OUTUP:	HLRO	17,7		; Now get negative length written and
401047'	274 00 0 00 000017 		SUB	0,17		; update file cursor
401050'	274 04 0 00 000017 		SUB	4,17		; and remaining length
401051'	541 07 0 00 000000 		HRRI	7,0		; Clear out right half junk to
401052'	274 03 0 00 000007 		SUB	3,7		; update output pointer
401053'	542 06 0 01 000004 		HRRM	6,BLKNUM	; Save next I/O system block
401054'	265 17 0 00 401066'		JSP	17,EOFUP	; Update end of file if needed
401055'	325 04 0 14 000000 	WRTAIL:	JUMPNM	4,0(14)		; Again, duck if finished
401056'	265 15 0 00 400610'		JSP	15,BFSWAP	; Not done. Fetch current buffer
401057'	541 03 0 05 000000 		HRRI	3,0(5)		; Grab buffer address for BLT output
401060'	460 07 0 00 000004 		SETCM	7,4		; Compute last word hit
401061'	270 07 0 00 000003 		ADD	7,3		; (buffer+length-1)
401062'	251 03 0 07 000000 		BLT	3,0(7)		; and smash the buffer
401063'	661 05 0 00 020000 		TLO	5,DIRTY		; which is now dirty
401064'	274 00 0 00 000004 		SUB	0,4		; Update file cursor
401065'	201 17 0 14 000000 		MOVEI	17,0(14)	; and set up return address for...
				;
				;	EOFUP--Subroutine to update the end of file marker and flag
				;	the buffer as truncated, if necessary.  Link by R17.
				;
401066'	317 00 0 01 000005 	EOFUP:	CAMG	0,EOF		; Have we exceeded the old EOF?
401067'	254 00 0 17 000000 		JMP	0(17)		; No. Return
401070'	202 00 0 01 000005 		MOVEM	0,EOF		; Yes. This is now it
401071'	621 05 0 00 040000 		TLZ	5,TRUNC		; Assume full block
401072'	602 00 0 00 000177 		TRNZ	0,177		; Are we at a block boundary?
401073'	661 05 0 00 040000 		TLO	5,TRUNC		; No. Must be a short buffer
401074'	254 00 0 17 000000 		JMP	0(17)
TENIO - Low Level File I/O Interface Package for TOPS-10	MACRO %53A(1155) 12:27  6-Jun-80 Page 21
TENIO	MAC	 8-Jan-69 21:39		NOTEF - Return Current File Status

					SUBTTL	NOTEF - Return Current File Status
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				;									;
				;	NOTEF (op code 17)--This subroutine returns the current status	;
				;	and pointers for a file.  Parameters:				;
				;									;
				;	E:	Channel number of the file to be noted			;
				;									;
				;	Return codes:							;
				;									;
				;	+0:	Error; registers are unchanged				;
				;	+1:	Success.  Registers will be as follows:			;
				;									;
				;	A:	Current sequential file pointer				;
				;	A+1:	Current end of file pointer				;
				;	A+2:	Status switches.  Bit 35 = 1 ==> input is OK; bit	;
				;		34 = 1 ==> output is OK.				;
				;									;
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

401075'	265 14 0 00 400503'	NOTEF.:	JSP	14,BTNAB	; Find the file block
401076'	254 00 0 00 400425'		JMP	FRET		; 0 Invalid channel number
401077'	322 05 0 00 400425'		JUMPZ	5,FRET		; 1 If not open, give up
401100'	303 12 0 00 000015 		CAILE	12,15		; File open. Will A+2 wrap around?
401101'	254 00 0 00 400425'		JMP	FRET		; Yes. Stop it now
401102'	271 12 0 03 000000 		ADDI	12,ACS		; No. Point to A
401103'	200 06 0 01 000002 		MOVE	6,CURSOR	; Return sequential pointer
401104'	200 07 0 01 000005 		MOVE	7,EOF		; Return EOF pointer
401105'	124 06 0 12 000000 		DMOVEM	6,0(12)
401106'	400 04 0 00 000000 		CLEAR	4,0
401107'	603 05 0 00 400000 		TLNZ	5,INOK		; Is input legal?
401110'	435 04 0 00 000001 		ORI	4,1		; Yes. Return switch
401111'	603 05 0 00 200000 		TLNZ	5,OUTOK		; Output legal?
401112'	435 04 0 00 000002 		ORI	4,2		; Yes. Return that switch
401113'	202 04 0 12 000002 		MOVEM	4,2(12)		; Return status switches
401114'	254 00 0 00 400750*		JMP	SKIP1.##	; Happily home
TENIO - Low Level File I/O Interface Package for TOPS-10	MACRO %53A(1155) 12:27  6-Jun-80 Page 22
TENIO	MAC	 8-Jan-69 21:39		NAMEF - Return Full Internal Name of Current File

					SUBTTL	NAMEF - Return Full Internal Name of Current File
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				;									;
				;	NAMEF (op code 15)--This subroutine returns an internal name	;
				;	block for an open file.  Parameters:				;
				;									;
				;	A:	Pointer to a nine word block for the full name.  This	;
				;		may be as small as five words if no SFDs will be used.	;
				;	E:	Channel number of the relevant file.			;
				;									;
				;	Return codes:							;
				;									;
				;	+0:	Error (file not open, bad channel number, etc.)		;
				;	+1:	Name returned in block.					;
				;									;
				;	Registers are unchanged in either case.				;
				;									;
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

401115'	265 14 0 00 400503'	NAMEF.:	JSP	14,BTNAB	; Find the file block
401116'	254 00 0 00 400425'		JMP	FRET		; 0 Couldn't do. Give up
401117'	607 05 0 00 600000 		TLNN	5,OPENED	; 1 Open for something?
401120'	254 00 0 00 400425'		JMP	FRET		; No
401121'	271 12 0 03 000000 		ADDI	12,ACS		; Yes. Find A
401122'	201 03 0 01 000000 		MOVEI	3,0(1)		; Set up other file block pointer
401123'	200 01 0 12 000000 		MOVE	1,0(12)		; Point to user's internal block
401124'	265 17 0 00 400345'		JSP	17,USEPTH	; Generate the block
401125'	202 10 0 01 000000 		MOVEM	10,DEVICE	; Save the real disk
401126'	254 00 0 00 401114*		JMP	SKIP1.##	; That's it
TENIO - Low Level File I/O Interface Package for TOPS-10	MACRO %53A(1155) 12:27  6-Jun-80 Page 23
TENIO	MAC	 8-Jan-69 21:39		POINTF - Set Sequential File Pointer

					SUBTTL	POINTF - Set Sequential File Pointer
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				;									;
				;	POINTF (op code 20)--This subroutine is used to set the se-	;
				;	quential file pointer for a file.  Parameters:			;
				;									;
				;	A:	The new sequential file pointer for the file.		;
				;	E:	Channel number of the file whose pointer is to be set.	;
				;									;
				;	Returns:							;
				;									;
				;	+0:	Error.							;
				;	+1:	Success.						;
				;									;
				;	Registers are unchanged in either case.				;
				;									;
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

401127'	265 14 0 00 400503'	PINTF.:	JSP	14,BTNAB	; Find file block
401130'	254 00 0 00 400425'		JMP	FRET		; 0 Invalid channel number. Barf
401131'	271 12 0 03 000000 		ADDI	12,ACS		; 1 Find A
401132'	603 05 0 00 600000 		TLNZ	5,OPENED	; Is file open for something?
401133'	335 02 0 12 000000 		SKIPNM	2,0(12)		; Yes. Is new pointer negative?
401134'	254 00 0 00 400425'		JMP	FRET		; Yes (or file not open). Give up
401135'	202 02 0 01 000002 		MOVEM	2,CURSOR	; No. Store new pointer
401136'	254 00 0 00 401126*		JMP	SKIP1.##	; and cheer off
TENIO - Low Level File I/O Interface Package for TOPS-10	MACRO %53A(1155) 12:27  6-Jun-80 Page 24
TENIO	MAC	 8-Jan-69 21:39		FIOSVC - Just Return Next Available Channel (for Now)

					SUBTTL	FIOSVC - Just Return Next Available Channel (for Now)
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				;									;
				;	FIOSVC (op code 16)--This op is used to subdispatch in order	;
				;	to extend TENIO's capabilities.  The effective address is an	;
				;	index which dispatches to a collection of sub operators.	;
				;									;
				;	Currently there is only one suboperator:			;
				;	CHANNL (sub op 0)--This returns the next available (according	;
				;	to TENIO) channel number.  It is the channel that will be used	;
				;	if the user OPENFs a file and lets TENIO generate a channel.	;
				;	Parameter:							;
				;									;
				;	A:	On successful exit, this will contain the channel	;
				;		number for the next OPENF.				;
				;									;
				;	Return codes:							;
				;									;
				;	+0:	No more channels available.  Registers are unchanged.	;
				;	+1:	OK.  A contains the channel number.			;
				;									;
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

401137'	265 16 0 00 400503*	FOSVC.:	JSP	16,TNAB.##	; Find AC block and scratch
401140'	550 01 0 00 400504*		HRRZ	1,LUOAD.	; Fetch effective address
401141'	326 01 0 00 400425'		JUMPNZ	1,FRET		; Currently, only 0 is legal
401142'	135 12 0 00 400521*		LDB	12,APOIN.	; Fetch AC number
401143'	271 12 0 03 000000 		ADDI	12,ACS
401144'	265 17 0 00 400205'		JSP	17,CHNGET	; Find next channel number
401145'	254 00 0 00 400425'		JMP	FRET		; 0 No more channels. Quit
401146'	202 06 0 12 000000 		MOVEM	6,0(12)		; 1 Return channel number
401147'	254 00 0 00 401136*		JMP	SKIP1.##
TENIO - Low Level File I/O Interface Package for TOPS-10	MACRO %53A(1155) 12:27  6-Jun-80 Page 25
TENIO	MAC	 8-Jan-69 21:39		FLUSHF - Update External File Copy

					SUBTTL	FLUSHF - Update External File Copy
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				;									;
				;	FLUSHF (op code 13)--This subroutine updates the disk by	;
				;	writing the internal buffer to the disk (if it is dirty) and	;
				;	(optionally) updating the file RIB pointers.  Parameters:	;
				;									;
				;	A:	Option code, as follows:				;
				;		Bit 35 = 1 ==> file RIB should be updated		;
				;		Bit 34 = 1 ==> all open files should be updated		;
				;		Other bits are ignored.					;
				;	E:	Ignored if bit 34 = 1; contains the file number to be	;
				;		updated otherwise.					;
				;									;
				;	Returns:							;
				;									;
				;	+0:	Error (invalid file number, file not open, or file	;
				;		not open for output).					;
				;	+1:	Success.						;
				;									;
				;	Registers are not changed by this subroutine.			;
				;									;
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

401150'	265 16 0 00 401137*	FUSHF.:	JSP	16,TNAB.##	; Find ACs and scratch
401151'	135 12 0 00 401142*		LDB	12,APOIN.	; Fetch AC
401152'	271 12 0 03 000000 		ADDI	12,ACS
401153'	200 04 0 12 000000 		MOVE	4,0(12)
401154'	602 04 0 00 000002 		TRNZ	4,2		; Is this flush all?
401155'	254 00 0 00 401162'		JMP	FLSHAL		; Yes
401156'	265 13 0 00 400773'		JSP	13,OUTCHK	; No. Make sure open for output
401157'	265 15 0 00 401176'		JSP	15,PURGE	; Update the disk
401160'	254 00 0 00 400425'		JMP	FRET		; 0 Trouble. Bitch lightly
401161'	254 00 0 00 401147*		JMP	SKIP1.##	; 1 Hunky dory. That was easy
				;
				;	Flush all files.  Step through the file blocks; flush all
				;	blocks that are currently open for output.
				;
401162'	201 01 0 02 000026 	FLSHAL:	MOVEI	1,BLOCKS	; Find first block
401163'	505 02 0 00 000040 		HRLI	2,40		; (Channel 1, properly aligned)
401164'	332 05 0 01 000003 	FSHLUP:	SKIPZ	5,SWCHBF	; Is this file open?
401165'	607 05 0 00 200000 		TLNN	5,OUTOK		; Yes. Is it for output?
401166'	254 00 0 00 401171'		JMP	FLNEXT		; No. Step to next one
401167'	265 15 0 00 401176'		JSP	15,PURGE	; Yes. File it as needed
401170'	254 00 0 00 400425'		JMP	FRET		; 0 Can't do. Quit early
401171'	270 02 0 00 401211'	FLNEXT:	ADD	2,[40,,0]	; 1 Step to next channel
401172'	271 01 0 00 000006 		ADDI	1,BLKSIZ
401173'	307 01 0 02 000152 		CAIG	1,LSTBLK	; Over the end?
401174'	254 00 0 00 401164'		JMP	FSHLUP		; No. Do next file
401175'	254 00 0 00 401161*		JMP	SKIP1.##	; Yes. Skip return home
				;
				;	PURGE--Subroutine to update the disk for one file.  On entry,
				;	R1 points to the relevant file block, R2 contains the properly
				;	aligned channel number, R5 contains the file switches and buffer
				;	pointer, and R13 contains the update RIB switch.  On exit, SWCHBF
TENIO - Low Level File I/O Interface Package for TOPS-10	MACRO %53A(1155) 12:27  6-Jun-80 Page 25-1
TENIO	MAC	 8-Jan-69 21:39		FLUSHF - Update External File Copy

				;	has been updated.  Rs 7, 10, 16, and 17 get hit.  Link by 1(15)
				;	on success, by R15 if some kind of failure occurred.
				;
401176'	265 16 0 00 400672'	PURGE:	JSP	16,FLUSH	; Clear out the TENIO buffer
401177'	202 05 0 01 000003 		MOVEM	5,SWCHBF	; and say so
401200'	606 04 0 00 000001 		TRNN	4,1		; Is RIB update required?
401201'	254 00 0 15 000001 		JMP	1(15)		; No. Leave
401202'	513 00 0 01 000004 		HLLZS	BLKNUM		; Yes. Don't count on next block
				;
				;	Again, Tymshare doesn't support SVC FILOP., but the CHANIO
				;	equivalent is virtually identical.
				;
401203'	554 00 0 00 000002 		hlrz	0,2		; Find the channel number
401204'	242 00 0 00 777773 		lsh	0,-5
401205'	505 00 0 00 000042 		hrli	0,.chvrb	; Now update the RIB
401206'	043 00 0 00 000000 		chanio	0,0		; (equivalent to update RIB FILOP.)
401207'	254 00 0 15 000000 		jmp	0(15)		; 0 Can't do. Abort flush call
401210'	254 00 0 15 000001 		JMP	1(15)		; 1 Success. Leave normally
				;
				;	And the end of it all.
				;
401211'					LIT			; Pool them
401211'	000040	000000
					END

NO ERRORS DETECTED

HI-SEG. BREAK IS 401212
PROGRAM BREAK IS 000000
CPU TIME USED 06:07.493

10P CORE USED
TENIO - Low Level File I/O Interface Package for TOPS-10	MACRO %53A(1155) 12:27  6-Jun-80 Page S-1
TENIO	MAC	 8-Jan-69 21:39		SYMBOL TABLE

ANYBF.		400060'	ext	GRBLEN		400202'		SHUTF		400270'		
AOSKP	354000	000000		INCHEK		400476'		SKIP1.		401175'	ext	
APOIN.		401151'	ext	INOK		400000	spd	SKIP2.		400445'	ext	
BADOPE		400266'		INTERN		040000	spd	SKIPNM	335000	000000		
BFDMP.		400275'	ext	INTREN		400336'		SKIPNZ	336000	000000		
BFGET.		400151'	ext	INUP		400566'		SKIPZ	332000	000000		
BFSWAP		400610'		IOOP		400723'		SKP	334000	000000		
BIGOUT		401032'		IOUUO.		400000'	ent	SKPOUT		400747'		
BLAST		400163'		JMP	254000	000000		SMALBF		400713'		
BLDENT		400214'		JUMPM	321000	000000		SOJM	361000	000000		
BLDOPE		400062'		JUMPNM	325000	000000		SOJP	367000	000000		
BLFTCH		400421'		JUMPNZ	326000	000000		SOJZ	362000	000000		
BLKCHK		400652'		JUMPP	327000	000000		STRTD.		400314'	ext	
BLKSIZ		000006	spd	JUMPZ	322000	000000		SUB		000032	spd	
BLSHUV		400735'		LEAVE.		400425'	ext	SVCRSR		400746'		
BTNAB		400503'		LUOAD.		401140'	ext	TCH		400207'		
BUFCHK		400053'		MAXSFD		000005	spd	TENBUF		010000	spd	
BUFOK		100000	spd	MULTAC		004000	spd	TENIO.		400000'	ent	
CHANIO	043000	000000		NAMEF.		401115'	int	TESTOK		400162'		
CHNGET		400205'		NEWEOF		400401'		TLNZ	603000	000000		
CLEAN		400373'		NOBUFR		400606'		TLOSKP	665000	000000		
CLFAIL		400325'		NOCREA		020000	spd	TLZSKP	625000	000000		
CLFINI		400277'		NOEMPT		100000	spd	TNAB.		401150'	ext	
CLOZAL		400252'		NOP	600000	000000		TRNCLZ		000001	spd	
CLZLUP		400255'		NOTEF.		401075'	int	TRNZ	602000	000000		
CLZNXT		400261'		NOXIST		400166'		TRUNC		040000	spd	
COSEF.		400227'	int	OPENDN		400120'		TRUNCO		400642'		
CREGOK		400240'		OPENED		600000	spd	TRUNGO		400374'		
DECGO		400045'		OPENF.		400000'	int	TUNCF.		400353'	int	
DECOD.		400051'	ext	OPENUP		400111'		USEPTH		400345'		
DIRTY		020000	spd	OREGOK		400016'		VIRGIN		400645'		
DSKERR		400565'		OUTCHK		400773'		WBLK.		400730'	int	
DSTROY		400334'		OUTOK		200000	spd	WBLKR.		400751'	int	
DUBSKP		400443'		OUTUP		401046'		WDFTCH		400457'		
EOFUP		401066'		PINTF.		401127'	int	WDSHUV		400762'		
EVENBI		400550'		PURGE		401176'		WILLRD		400000	spd	
EVENBO		401024'		PUTOUT		400704'		WILLWR		200000	spd	
EXLENG		002000	spd	RBLKR.		400446'	int	WILMUL		010000	spd	
FAILOP		400156'		RDBLK.		400414'	int	WONTBF		004000	spd	
FBGR		000001	spd	RDIRCT		400554'		WRDRAN		400471'		
FILFIN		400272'		RDTAIL		400574'		WRITE		401000'		
FIND		400717'		RDWRD.		400454'	int	WRTAIL		401055'		
FLNEXT		401171'		READ		400523'		WRWRD.		400757'	int	
FLSHAL		401162'		RENAM		400304'		WWRDR.		400770'	int	
FLUSH		400672'		RENBLD		400316'		.CHENT		000005	spd	
FOSVC.		401137'	int	RENDEC		400314'		.CHFTR		000045	spd	
FRET		400425'		RENERR		400331'		.CHLK		000004	spd	
FRETRC		400412'		RENGO		400317'		.CHMEN		000041	spd	
FSHLUP		401164'		RENKIL		400326'		.CHOPN		000013	spd	
FUSHF.		401150'	int	RENLEN		400340'		.CHREL		000000	spd	
GAVECH		400026'		RET14.		400276'	ent	.CHVRB		000042	spd	
GETBLK		400504'		RET16.		400673'	ent	
GETPTH		400343'		RWRDR.		400467'	int	
GOTBLK		400176'		SETRC		400157'		
GOTCH		400036'		SETSWT		400154'		
    S@9