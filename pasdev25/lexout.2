INPUT:   *
INPUT:   *   Lookahead Example
INPUT:   *
INPUT:   *      The Lookahead Feature is used to recognize Fortran-style "DO" and "GOTO"
INPUT:   *
INPUT:   <DO> <GOTO> <ID> <NUMBER> ;
INPUT:     
INPUT:   "SPACE" ::= [' '];
INPUT:   "DIGIT" ::= ['0' '1' '2' '3' '4' '5' '6' '7' '8' '9'];
INPUT:   "LETTER" ::= ['A' 'B' 'C' 'D' 'E' 'F' 'G' 'H' 'I' 'J' 'K' 'L' 'M' 'N'
INPUT:                 'O' 'P' 'Q' 'R' 'S' 'T' 'U' 'V' 'W' 'X' 'Y' 'Z'];
INPUT:     
INPUT:   <NUMBER> ::= "DIGIT" + ;


                     "DIGIT"
  8:      O-------------------------------->(O)


                    ____________
                   /            \
                  !              \
                  ! ___________   !
                  V/           \  !
                  /             \/
               ->( 0      8    0 )____
              /   \             /     \
             /     \___________/       \
            /                           !
           /                            V
  8:      O                            (O)


   <NUMBER> ******* IS ASSIGNED THE NFA ****  8
INPUT:   <TID> ::= "LETTER" ( "LETTER" ! "DIGIT" )* ;


                     "LETTER"
  8:      O-------------------------------->(O)


                     "LETTER"
 10:      O-------------------------------->(O)


                     "DIGIT"
 12:      O-------------------------------->(O)


                    ___________
                   /           \
                  /             \
               ->( 0     10    0 )____
              /   \             /     \
             /     \___________/       \
            /                           !
           /                            V
 10:      O                            (O)
           \                           /\
            \       ___________        /
             \     /           \      /
              \   /             \    /
               ->( 0     12    0 )__/
                  \             /
                   \___________/


  9: ******* IS THE NEW LABEL FOR **** 10


                    ____________
                   /            \
                  !              \
                  ! ___________   !
                  V/           \  !
                  /             \/
               ->( 0      9    0 )____
              /   \             /     \
             /     \___________/       \
            /                           !
           /                            V
  9:      O                            (O)
           \                           /\
            \                          /
             \________________________/


                  ___________            ___________
                 /           \          /           \
                /             \        /             \
  8:      O--->( 0      8    0 )----->( 0     9   (O) )
                \             /        \             /
                 \___________/          \___________/


   <TID> ******* IS ASSIGNED THE NFA ****  8
INPUT:   <DO>  ::= 'D' 'O' / <NUMBER> <TID> '=' (<TID> ! <NUMBER>) ',' ;


                     'D'
  8:      O-------------------------------->(O)


                     'O'
  9:      O-------------------------------->(O)


                  ___________            ___________
                 /           \          /           \
                /             \        /             \
  8:      O--->( 0      8    0 )----->( 0     9   (O) )
                \             /        \             /
                 \___________/          \___________/


 10: ****** IS COPIED FROM ***** <NUMBER>


 11: ****** IS COPIED FROM ***** <TID>


                  ___________            ___________
                 /           \          /           \
                /             \        /             \
 10:      O--->( 0     10    0 )----->( 0    11   (O) )
                \             /        \             /
                 \___________/          \___________/


                     '='
 11:      O-------------------------------->(O)


                  ___________            ___________
                 /           \          /           \
                /             \        /             \
 10:      O--->( 0     10    0 )----->( 0    11   (O) )
                \             /        \             /
                 \___________/          \___________/


 12: ****** IS COPIED FROM ***** <TID>


 14: ****** IS COPIED FROM ***** <NUMBER>


                    ___________
                   /           \
                  /             \
               ->( 0     12    0 )____
              /   \             /     \
             /     \___________/       \
            /                           !
           /                            V
 12:      O                            (O)
           \                           /\
            \       ___________        /
             \     /           \      /
              \   /             \    /
               ->( 0     14    0 )__/
                  \             /
                   \___________/


 11: ******* IS THE NEW LABEL FOR **** 12


                  ___________            ___________
                 /           \          /           \
                /             \        /             \
 10:      O--->( 0     10    0 )----->( 0    11   (O) )
                \             /        \             /
                 \___________/          \___________/


                     ','
 11:      O-------------------------------->(O)


                  ___________            ___________
                 /           \          /           \
                /             \        /             \
 10:      O--->( 0     10    0 )----->( 0    11   (O) )
                \             /        \             /
                 \___________/          \___________/


   <DO> **** IS ASSIGNED THE NFA ****  8// 10
INPUT:   <GOTO> ::= 'G' 'O' 'T' 'O' / <NUMBER>;


                     'G'
  8:      O-------------------------------->(O)


                     'O'
  9:      O-------------------------------->(O)


                  ___________            ___________
                 /           \          /           \
                /             \        /             \
  8:      O--->( 0      8    0 )----->( 0     9   (O) )
                \             /        \             /
                 \___________/          \___________/


                     'T'
  9:      O-------------------------------->(O)


                  ___________            ___________
                 /           \          /           \
                /             \        /             \
  8:      O--->( 0      8    0 )----->( 0     9   (O) )
                \             /        \             /
                 \___________/          \___________/


                     'O'
  9:      O-------------------------------->(O)


                  ___________            ___________
                 /           \          /           \
                /             \        /             \
  8:      O--->( 0      8    0 )----->( 0     9   (O) )
                \             /        \             /
                 \___________/          \___________/


 10: ****** IS COPIED FROM ***** <NUMBER>


   <GOTO> **** IS ASSIGNED THE NFA ****  8// 10
INPUT:   <ID> ::= <TID>


  8: ****** IS COPIED FROM ***** <TID>


   <ID> ******* IS ASSIGNED THE NFA ****  8


*** NFA <*****END OF DATA*****>:

0000030441:'*****END OF DATA*****'      0000030450    - NIL -  
0000030450:''                             - NIL -     - NIL -  


*** NFA <DO>:

0000031524:','                          0000031533    - NIL -  
0000031425:"LETTER"                     0000031434    - NIL -  
0000031434:''                           0000031400    - NIL -  
0000031407:"DIGIT"                      0000031416    - NIL -  
0000031416:''                           0000031400    - NIL -  
0000031371:''                           0000031425  0000031407
0000031400:''                           0000031362  0000031371
0000031353:''                           0000031371  0000031362
0000031335:"LETTER"                     0000031344    - NIL -  
0000031344:''                           0000031353    - NIL -  
0000031326:''                           0000031335    - NIL -  
0000031362:''                           0000031506    - NIL -  
0000031461:"DIGIT"                      0000031470    - NIL -  
0000031470:''                           0000031452  0000031461
0000031443:''                           0000031461    - NIL -  
0000031452:''                           0000031506    - NIL -  
0000031477:''                           0000031326  0000031443
0000031301:'='                          0000031310    - NIL -  
0000031254:"LETTER"                     0000031263    - NIL -  
0000031263:''                           0000031227    - NIL -  
0000031236:"DIGIT"                      0000031245    - NIL -  
0000031245:''                           0000031227    - NIL -  
0000031220:''                           0000031254  0000031236
0000031227:''                           0000031211  0000031220
0000031202:''                           0000031220  0000031211
0000031164:"LETTER"                     0000031173    - NIL -  
0000031173:''                           0000031202    - NIL -  
0000031155:''                           0000031164    - NIL -  
0000031137:"DIGIT"                      0000031146    - NIL -  
0000031146:''                           0000031130  0000031137
0000031121:''                           0000031137    - NIL -  
0000031130:''                           0000031155    - NIL -  
0000031272:''                           0000031121    - NIL -  
0000031211:''                           0000031301    - NIL -  
0000031317:''                           0000031272    - NIL -  
0000031310:''                           0000031477    - NIL -  
0000031515:''                           0000031317    - NIL -  
0000031506:''                           0000031524    - NIL -  
0000031542:''                           0000031515    - NIL -  
0000031074:'O'                          0000031103    - NIL -  
0000031056:'D'                          0000031065    - NIL -  
0000031065:''                           0000031074    - NIL -  
0000031112:''                           0000031056    - NIL -  
0000031103:''                           0000031542    - NIL -  
0000031551:''                           0000031112    - NIL -  
0000031533:''                             - NIL -     - NIL -  


*** NFA <GOTO>:

0000031713:"DIGIT"                      0000031722    - NIL -  
0000031722:''                           0000031704  0000031713
0000031675:''                           0000031713    - NIL -  
0000031650:'O'                          0000031657    - NIL -  
0000031623:'T'                          0000031632    - NIL -  
0000031576:'O'                          0000031605    - NIL -  
0000031560:'G'                          0000031567    - NIL -  
0000031567:''                           0000031576    - NIL -  
0000031614:''                           0000031560    - NIL -  
0000031605:''                           0000031623    - NIL -  
0000031641:''                           0000031614    - NIL -  
0000031632:''                           0000031650    - NIL -  
0000031666:''                           0000031641    - NIL -  
0000031657:''                           0000031675    - NIL -  
0000031731:''                           0000031666    - NIL -  
0000031704:''                             - NIL -     - NIL -  


*** NFA <ID>:

0000032037:"LETTER"                     0000032046    - NIL -  
0000032046:''                           0000032012    - NIL -  
0000032021:"DIGIT"                      0000032030    - NIL -  
0000032030:''                           0000032012    - NIL -  
0000032003:''                           0000032037  0000032021
0000032012:''                           0000031774  0000032003
0000031765:''                           0000032003  0000031774
0000031747:"LETTER"                     0000031756    - NIL -  
0000031756:''                           0000031765    - NIL -  
0000031740:''                           0000031747    - NIL -  
0000031774:''                             - NIL -     - NIL -  


*** NFA <NUMBER>:

0000030705:"DIGIT"                      0000030714    - NIL -  
0000030714:''                           0000030732  0000030705
0000030723:''                           0000030705    - NIL -  
0000030732:''                             - NIL -     - NIL -  ****** CODES FOR TERMINAL SYMBOLS ******

          CODE   SYMBOL
          -40   ','
          -39   '='
          -38   'Z'
          -37   'Y'
          -36   'X'
          -35   'W'
          -34   'V'
          -33   'U'
          -32   'T'
          -31   'S'
          -30   'R'
          -29   'Q'
          -28   'P'
          -27   'O'
          -26   'N'
          -25   'M'
          -24   'L'
          -23   'K'
          -22   'J'
          -21   'I'
          -20   'H'
          -19   'G'
          -18   'F'
          -17   'E'
          -16   'D'
          -15   'C'
          -14   'B'
          -13   'A'
          -12   '9'
          -11   '8'
          -10   '7'
           -9   '6'
           -8   '5'
           -7   '4'
           -6   '3'
           -5   '2'
           -4   '1'
           -3   '0'
           -2   ' '
           -1   '*****END OF DATA*****'


****** CODES FOR NONTERMINALS TO BE RECOGNIZED ******

          CODE   NONTERMINAL
            1   '*****END OF DATA*****'
            2   'DO'
            3   'GOTO'
            4   'ID'
            5   'NUMBER'****** MINIMIZED DFA NEXT STATE TABLE ******

      -40 -39 -38 -37 -36 -35 -34 -33 -32 -31 -30 -29 -28 -27 -26 -25 -24 -23 -22 -21 -20 -19 -18 -17 
    __________________________________________________________________________________________________
    !
  1 !   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 
    !
  2 !   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 
    !
  3 !   0   0   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3 
    !
  4 !   0   0   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3 
    !
  5 !   0   0   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3 
    !
  6 !   0   0   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3 
    !
  7 !   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 
    !
  8 !   7   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 
    !
  9 !   0   0   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3  17   3   3 
    !
 10 !   0  14  10  10  10  10  10  10  10  10  10  10  10  10  10  10  10  10  10  10  10  10  10  10 
    !
 11 !   0   0  10  10  10  10  10  10  10  10  10  10  10  10  10  10  10  10  10  10  10  10  10  10 
    !
 12 !   0   0   3   3   3   3   3   3   3   3   3   3   3   4   3   3   3   3   3   3   3   3   3   3 
    !
 13 !   7   0  13  13  13  13  13  13  13  13  13  13  13  13  13  13  13  13  13  13  13  13  13  13 
    !
 14 !   0   0  13  13  13  13  13  13  13  13  13  13  13  13  13  13  13  13  13  13  13  13  13  13 
    !
 15 !   0   0   3   3   3   3   3   3   3   3   3   3   3   5   3   3   3   3   3   3   3   3   3   3 
    !
 16 !   0   0   3   3   3   3   3   3  15   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3 
    !
 17 !   0   0   3   3   3   3   3   3   3   3   3   3   3  16   3   3   3   3   3   3   3   3   3   3 ****** MINIMIZED DFA NEXT STATE TABLE ******

      -16 -15 -14 -13 -12 -11 -10  -9  -8  -7  -6  -5  -4  -3  -2  -1 
    __________________________________________________________________
    !
  1 !   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 
    !
  2 !   0   0   0   0   2   2   2   2   2   2   2   2   2   2   0   0 
    !
  3 !   3   3   3   3   3   3   3   3   3   3   3   3   3   3   0   0 
    !
  4 !   3   3   3   3  11  11  11  11  11  11  11  11  11  11   0   0 
    !
  5 !   3   3   3   3   6   6   6   6   6   6   6   6   6   6   0   0 
    !
  6 !   3   3   3   3   6   6   6   6   6   6   6   6   6   6   0   0 
    !
  7 !   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 
    !
  8 !   0   0   0   0   8   8   8   8   8   8   8   8   8   8   0   0 
    !
  9 !  12   3   3   3   2   2   2   2   2   2   2   2   2   2   0   1 
    !
 10 !  10  10  10  10  10  10  10  10  10  10  10  10  10  10   0   0 
    !
 11 !  10  10  10  10  11  11  11  11  11  11  11  11  11  11   0   0 
    !
 12 !   3   3   3   3   3   3   3   3   3   3   3   3   3   3   0   0 
    !
 13 !  13  13  13  13  13  13  13  13  13  13  13  13  13  13   0   0 
    !
 14 !  13  13  13  13   8   8   8   8   8   8   8   8   8   8   0   0 
    !
 15 !   3   3   3   3   3   3   3   3   3   3   3   3   3   3   0   0 
    !
 16 !   3   3   3   3   3   3   3   3   3   3   3   3   3   3   0   0 
    !
 17 !   3   3   3   3   3   3   3   3   3   3   3   3   3   3   0   0 

****** START STATE:    9****** FINAL/BACKUP STATES IN MINIMIZED DFA ******

          DFA STATE   FINAL/BACKUP STATE (S)
            0      *<**ERROR**>
            1      *<*****END OF DATA*****> 
            2      *<NUMBER> 
            3      *<ID> 
            4      *<ID>  <DO> 
            5      *<ID>  <GOTO> 
            6      *<GOTO> 
            7      *<DO> 
            8      
            9      
           10      *<ID> 
           11      *<ID> 
           12      *<ID> 
           13      
           14      
           15      *<ID> 
           16      *<ID> 
           1  *<ID> ****** COMPACTED VERSION OF MINIMIZED DFA NEXT STATE TABLE ******

             DEFAULT  BASE

           1      0      0
           2      1     38
           3      1     48
           4      3     84
           5      3     94
           6      5      0
           7      1      0
           8      1    104
           9      3    116
          10      1    142
          11     10    179
          12      3     91
          13      8    216
          14     13    252
          15      3    102
          16      3     98
          17      3    104              NEXT  CHECK              NEXT  CHECK              NEXT  CHECK              NEXT  CHECK

           1     0      1          51     3      3         101     6      5         151    10     10
           2     0      1          52     3      3         102     6      5         152    10     10
           3     0      1          53     3      3         103     6      5         153    10     10
           4     0      1          54     3      3         104     6      5         154    10     10
           5     0      1          55     3      3         105     6      5         155    10     10
           6     0      1          56     3      3         106     6      5         156    10     10
           7     0      1          57     3      3         107     8      8         157    10     10
           8     0      1          58     3      3         108     8      8         158    10     10
           9     0      1          59     3      3         109     8      8         159    10     10
          10     0      1          60     3      3         110     8      8         160    10     10
          11     0      1          61     3      3         111     8      8         161    10     10
          12     0      1          62     3      3         112     8      8         162    10     10
          13     0      1          63     3      3         113     8      8         163    10     10
          14     0      1          64     3      3         114     8      8         164    10     10
          15     0      1          65     3      3         115     8      8         165    10     10
          16     0      1          66     3      3         116     8      8         166    10     10
          17     0      1          67     3      3         117     1      9         167    10     10
          18     0      1          68     3      3         118     4     12         168    10     10
          19     0      1          69     3      3         119     2      9         169    10     10
          20     0      1          70     3      3         120     2      9         170    10     10
          21     0      1          71     3      3         121     2      9         171    10     10
          22     0      1          72     3      3         122     2      9         172    10     10
          23     0      1          73     3      3         123     2      9         173    10     10
          24     0      1          74     3      3         124     2      9         174    10     10
          25     0      1          75     3      3         125     2      9         175    10     10
          26     0      1          76     3      3         126     2      9         176    10     10
          27     0      1          77     3      3         127     2      9         177    10     10
          28     0      1          78     3      3         128     2      9         178    10     10
          29     0      1          79     3      3         129     5     15         179    10     10
          30     0      1          80     3      3         130    15     16         180    10     10
          31     0      1          81     3      3         131    16     17         181    14     10
          32     0      1          82     3      3         132    12      9         182    11     11
          33     0      1          83     3      3         133     0      0         183    11     11
          34     0      1          84     3      3         134     0      0         184    11     11
          35     0      1          85     3      3         135    17      9         185    11     11
          36     0      1          86     3      3         136     0      0         186    11     11
          37     0      1          87    11      4         137     0      0         187    11     11
          38     0      1          88    11      4         138     0      0         188    11     11
          39     0      1          89    11      4         139     0      0         189    11     11
          40     0      1          90    11      4         140     0      0         190    11     11
          41     2      2          91    11      4         141     0      0         191    11     11
          42     2      2          92    11      4         142     0      0         192     0      0
          43     2      2          93    11      4         143     0      0         193     0      0
          44     2      2          94    11      4         144     7      8         194     0      0
          45     2      2          95    11      4         145    10     10         195     0      0
          46     2      2          96    11      4         146    10     10         196     0      0
          47     2      2          97     6      5         147    10     10         197     0      0
          48     2      2          98     6      5         148    10     10         198     0      0
          49     2      2          99     6      5         149    10     10         199     0      0
          50     2      2         100     6      5         150    10     10         200     0      0              NEXT  CHECK              NEXT  CHECK

         201     0      0         251    13     13
         202     0      0         252    13     13
         203     0      0         253    13     13
         204     0      0         254    13     13
         205     0      0         255     8     14
         206     0      0         256     8     14
         207     0      0         257     8     14
         208     0      0         258     8     14
         209     0      0         259     8     14
         210     0      0         260     8     14
         211     0      0         261     8     14
         212     0      0         262     8     14
         213     0      0         263     8     14
         214     0      0         264     8     14
         215     0      0         265     0      0
         216     0      0         266     0      0
         217     0      0         267     0      0
         218     0     11         268     0      0
         219    13     13         269     0      0
         220    13     13         270     0      0
         221    13     13         271     0      0
         222    13     13         272     0      0
         223    13     13         273     0      0
         224    13     13         274     0      0
         225    13     13         275     0      0
         226    13     13         276     0      0
         227    13     13         277     0      0
         228    13     13         278     0      0
         229    13     13         279     0      0
         230    13     13         280     0      0
         231    13     13         281     0      0
         232    13     13         282     0      0
         233    13     13         283     0      0
         234    13     13         284     0      0
         235    13     13         285     0      0
         236    13     13         286     0      0
         237    13     13         287     0      0
         238    13     13         288     0      0
         239    13     13         289     0      0
         240    13     13         290     0      0
         241    13     13         291     0      0
         242    13     13         292     0     14
         243    13     13
         244    13     13
         245    13     13
         246    13     13
         247    13     13
         248    13     13
         249    13     13
         250    13     13(********************************************)
(*   SCANNER ALGORITHM CREATED BY LEXGEN    *)
(*    INCORPORATES THE LOOKAHEAD FEATURE    *)
(********************************************)

PROGRAM ??????;

CONST
   MAXSTACK    =  ???;  (* MAX INDEX IN STACK FOR LOOKAHEAD *)
   MAXINDEX    =  ???;  (* MAX INDEX USED TO ACCESS BUFFER *)
   BUFFERSIZE  =  ???;  (* MAXINDEX + 1 *)
   MAXTOKEN    =    5;
   DFASTATE1   =    9;  (* CODE FOR INITIAL STATE OF DFA *)
   MAXDFASTATE =   17;  (* CODE FOR MAX STATE OF DFA *)
   MINTERMINAL =  -40;  (* MIN TERMINAL CODE *)
   EODATA      =   -1;  (* CODE FOR END-OF-DATA *)


TYPE
   STATERANGE  = 1..MAXDFASTATE;
   EXSTATERANGE= 0..MAXDFASTATE;
   INDEXRANGE  = 0..MAXINDEX;
   LEXTOKEN    = RECORD
                    TOKEN_TYPE: ???;
                    MORE: ???  (* POINTER TO SYMBOL TABLE, CODE
                                  TO DIFFERENTIATE DIFFERENT SYMBOLS
                                  SUCH AS RELATIONAL OPERATORS OF THE
                                  SAME TOKEN_TYPE, ETC.  *)
                 END;

VAR
   DEFAULT: PACKED ARRAY [STATERANGE] OF EXSTATERANGE := (
      0,1,1,3,3,5,1,1,3,1,10,3,8,13,3,3,3);

   BASE: PACKED ARRAY [STATERANGE] OF 0.. 292 := (
      0,38,48,84,94,0,0,104,116,142,179,91,216,252,102,98,104);

   NEXT: PACKED ARRAY [1.. 292] OF EXSTATERANGE := (

      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
      0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
      3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,
      11,6,6,6,6,6,6,6,6,6,6,8,8,8,8,8,8,8,8,8,8,1,4,2,2,2,2,2,2,2,2,2,
      2,5,15,16,12,0,0,17,0,0,0,0,0,0,0,0,7,10,10,10,10,10,10,10,10,10,
      10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
      10,10,10,10,10,14,11,11,11,11,11,11,11,11,11,11,0,0,0,0,0,0,0,0,0,
      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,13,13,13,13,13,13,13,13,13,
      13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,
      13,13,13,13,8,8,8,8,8,8,8,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
      0,0,0,0,0,0,0,0,0,0,0);

   CHECK: PACKED ARRAY [1.. 292] OF EXSTATERANGE := (
      1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
      1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
      3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,5,5,5,
      5,5,5,5,5,5,5,8,8,8,8,8,8,8,8,8,8,9,12,9,9,9,9,9,9,9,9,9,9,15,16,
      17,9,0,0,9,0,0,0,0,0,0,0,0,8,10,10,10,10,10,10,10,10,10,10,10,10,
      10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
      10,10,10,11,11,11,11,11,11,11,11,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,
      0,0,0,0,0,0,0,0,0,0,0,0,0,11,13,13,13,13,13,13,13,13,13,13,13,13,
      13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,
      13,13,14,14,14,14,14,14,14,14,14,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
      0,0,0,0,0,0,0,0,0,0,0,0,14);

   (* FINAL [X] = 0 IF STATE X IS NOT A FINAL STATE
                 1 IF STATE X RECOGNIZES <*****END OF DATA*****>
                 2 IF STATE X RECOGNIZES <DO>
                 3 IF STATE X RECOGNIZES <GOTO>
                 4 IF STATE X RECOGNIZES <ID>
                 5 IF STATE X RECOGNIZES <NUMBER>
                                                                 *)
   FINAL: PACKED ARRAY [EXSTATERANGE] OF 0..MAXTOKEN := (
      0,1,5,4,4,4,3,2,0,0,4,4,4,0,0,4,4,4);

   (* BACKUP [X] = SET OF ALL BACKUP TOKENS ASSOCIATED WITH STATE X.
                  SEE "FINAL" COMMENT FOR TOKEN CODES. *)

   BACKUP: ARRAY [STATERANGE] OF SET OF 1..MAXTOKEN := (
      [],[],[],[  2],[  3],[],[],[],[],[],[],[],[],[],[],[],[]);

   (* LOOKAHEADFINAL [X] = TRUE IFF LOOKAHEAD WAS REQUIRED TO RECOGNIZE
          TOKEN ASSOCIATED WITH STATE X.  "FINAL" INDICATES WHICH TOKEN
          THAT IS,  AND "BACKUP" IS USED TO FIGURE OUT WHERE TO BACKUP TO. *)

   LOOKAHEADFINAL: PACKED ARRAY [EXSTATERANGE] OF BOOLEAN := (
      FALSE,FALSE,FALSE,FALSE,FALSE,FALSE, TRUE, TRUE,FALSE,FALSE,FALSE,
      FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE);

   BEGIN_INDEX, END_INDEX: INDEXRANGE;
   LEXEME: LEXTOKEN;
   BUFFER: ARRAY [INDEXRANGE] OF MINTERMINAL..EODATA;


PROCEDURE SCAN (VAR BEGIN_INDEX, END_INDEX: INDEXRANGE;
               VAR LEXEME: LEXTOKEN);

   VAR
      NEWTOKEN:  BOOLEAN;
      CURRSTATE, CURRFINAL: EXSTATERANGE;
      OLDINDEX:  INDEXRANGE;
      STACK: ARRAY [0..MAXSTACK] OF
                RECORD
                   INDEX: INDEXRANGE;
                   STATE: STATERANGE
                END;
      TOS: 0..MAXSTACK;  (* CURRENT TOP OF STACK INDEX *)


   PROCEDURE PUSH (ININDEX: INDEXRANGE; INSTATE: STATERANGE);
      BEGIN
         TOS := TOS + 1;
         STACK [TOS].INDEX := ININDEX;
         STACK [TOS].STATE := INSTATE
      END (* PUSH *);


   PROCEDURE GETCHAR (NEWTOKEN: BOOLEAN);
      BEGIN
         <  THIS PROCEDURE OBTAINS THE NEXT INPUT CHARACTER (WHICH
            IS ASSUMED TO BE EODATA IF NO MORE INPUT) AND MODIFIES
            BEGIN_INDEX AND END_INDEX AS NECESSARY DEPENDING ON
            THE BUFFERING SCHEME SO THAT
             (1) IF NEWTOKEN, THEN BEGIN_INDEX POINTS TO THE INPUT
                 CHARACTER JUST OBTAINED, ELSE BEGIN_INDEX POINTS
                 TO THE SAME CHARACTER IT POINTED TO BEFORE.
             (2) END_INDEX IS THE INDEX OF THE NEW CHARACTER JUST
                 OBTAINED.
            SCAN ALLOWS FOR EITHER SEQUENTIAL OR CIRCULAR BUFFER  >
      END (* GETCHAR *);


   BEGIN (* SCAN *)
      NEWTOKEN  := TRUE;
      TOS := 0;
      CURRSTATE := DFASTATE1;  (* START IN INITIAL STATE *)
      CURRFINAL := 0;
      OLDINDEX  := 0;  (* WIDTH OF LEXEME AS OF LAST FINAL STATE *)

      WHILE CURRSTATE <> 0 DO
         BEGIN
            IF BACKUP [CURRSTATE] <> [] THEN
               PUSH ((END_INDEX-BEGIN_INDEX) MOD BUFFERSIZE, CURRSTATE);
            IF FINAL [CURRSTATE] <> 0 THEN
               BEGIN
                  CURRFINAL := CURRSTATE;
                  OLDINDEX := (END_INDEX - BEGIN_INDEX) MOD BUFFERSIZE
               END;
            GETCHAR (NEWTOKEN);
            NEWTOKEN := FALSE;
            WHILE CHECK [BASE [CURRSTATE]-BUFFER [END_INDEX]] <> CURRSTATE DO
               CURRSTATE := DEFAULT [CURRSTATE];
            CURRSTATE := NEXT [BASE [CURRSTATE]-BUFFER [END_INDEX]]
         END;
      IF LOOKAHEADFINAL [CURRFINAL] THEN
         BEGIN
            WHILE NOT (FINAL [CURRFINAL] IN BACKUP [STACK [TOS].STATE]) DO
               TOS := TOS - 1;
            END_INDEX := (STACK [TOS].INDEX + BEGIN_INDEX) MOD BUFFERSIZE
         END
      ELSE
         END_INDEX := (BEGIN_INDEX + OLDINDEX) MOD BUFFERSIZE;

       < COMPUTE LEXEME GIVEN FINAL [CURRFINAL], BEGIN_INDEX, END_INDEX, 
         ETC.                                                          >

   END (* SCAN *);


BEGIN (* MAINLINE *)
          .
          .
          .
   SCAN (BEGIN_INDEX, END_INDEX, LEXEME);
              (* AS NEEDED UNTIL END-OF-DATA LEXEME IS OBTAINED *)
          .
          .
          .
END. (* MAINLINE *)


NO ERRORS
     !