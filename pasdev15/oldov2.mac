	TITLE	OVLTV.
	SEARCH	DEFUUO
	TWOSEG
	RELOC	400000
;    +----------------------------------------------------------------+
;    I                                                                I
;    I                          O V L T V                             I
;    I                          - - - - -                             I
;    I                                                                I
;    +----------------------------------------------------------------+
;
;    MDSI, COMPANY CONFIDENTIAL
;
;    STARTED:  6-Apr-77
;
;    PURPOSE: TO ALLOW AUTOMATIC CALLING OF OVERLAYABLE ROUTINES
;
;    USAGE:
;       GENERATED IN A RESIDENT TRANSFER VECTOR
;       THAT PARALLELS A TABLE OF ENTRIES IN OVERALAYS
;
;    INPUT: 
;
;       <RETURN ADDR>   INDICATES WHICH ENTRY IS REQUIRED
;
;       <RETURN ADDR-1>   INDICATES WHICH MODULE TO RETURN TO
;
;    REQUIREMENTS: 1) NEEDS A PARALLEL TABLE OF ENTRY INFO.  2) NEEDS A
;       TABLE OF AREA DESCRIPTIONS 3) NEEDS A MODULE TABLE  4) SCAL
;	NEEDS TO BE FIXED TO NOT STUFF PUSHDOWN STACK WITH ARGS
;
;    EFFECTS: WILL  CAUSE  THE OVERLAY OF A CALLED ROUTINE IF NECESSARY
;       AND THE OVERLAY OF THE CALLER ON RETURN
;
;    ALGORITHM: 
;
;    RESPONSIBLE: FARMER  BOB
;
;     CHANGES: MODIFIED FOR NEW PASCAL VERSION (CHANGE IN PROCEDURE/
;              FUNCTION CALLING CONVENTIONS) NOVEMBER 10, 1977,
;              BY JERRY ROSEN.

;
;    ------------------------------------------------------------------
;GOT HERE FROM RESIDENT T.V. WITH A PUSHJ 17,OVLTV.
	ENTRY OVLTV.
OVLTV.:	EXCH	1,	0(17)		;(SAVE (1)&GET T.V. LOC)
	MOVE	1,	0(1)		;(GET ENTRY ENTRY=MOD#,,TVLOC)
	MOVEM	2,	SAVE2		;(SAVE (2))
	MOVEM	1,	SAVE1		;(SAVE ENTRY ENTRY)
	MOVEM	3,	SAVE3		;NEEDED FOR AREA ADDR TABLE RIFF

	HRRZ	1,	-1(17)		;(GET CALLER R.A.)
	CAIL	1,	OVBASE		;(FROM RESIDENT??)
	JRST		OVLTV1		;(YA, GOT 0 MODULE#)
;NOW INSERT CURRENT MODULE NUMBER IN RETURN ADDR
	MOVEI	3,	0		;USE AS INDEX FOR ADDR LIST

OVSRCH: MOVE	2,	AREA..(3)	;GET NEXT ADDR IN LIST
	CAIGE	1,	(2)		;IS RETURN ADDR LESS THAN  NEXT OVL?
	JRST		OVLTV5		;YES, IT'S IN AREA (REG3)
	JUMPL	2,	OVLTV0		;IF LEFT HALF -1, LAST ONE ON LIST
	AOJA	3,	OVSRCH		;ELSE INCREMENT AND GO BACK

OVLTV5: SUBI	3,	1		;IF GREATER FOUND, THEN TAKE PREVIOUS

OVLTV0: MOVE	2,	AREA..(3)	;OR ELSE CURRENT INDEX INTO LIST
	MOVE	3,	SAVE3		;RESTORE REG 3

	HRL	1,	10(2)		;(PICK UP CURRENT MODULE NUMBER)
OVLTV1: MOVEM	1,	-1(17)		;DROP(MOD#,,RA) ON STACK(TV R.A.)
	HLRZ	1,	SAVE1		;(GET REQUIRED MODULE #)
	MOVEI	2,	3		;IN REG2, CALCULATE
	IMUL	2,	1		;INDEX INTO MOD TABLE

	HRRZ	2,	MODULE(2)	;(GET REQD MOD'S ORIGIN)
	CAMN	1,	10(2)		;(IS IT CURRENTLY LOADED?)
	JRST		OVLTV2		;YES, SO DON'T READ IT IN

	IMULI	1,	3		;NO, GET MOD TABLE INDEX AGAIN
	PUSHJ	17,	REOVM.		;(READ IN MODULE(1) INTO (2)AREA)

OVLTV2:	HRRZ	2,	SAVE1		;(GET T.V. LOCN FROM ENTRY ENTRY)
	EXCH	2,	SAVE2		;(RESTORE (2), SAVE LOCN FOR START)
	MOVEI	1,	OVLRTN		;(WHERE TO RETURN TO)
	EXCH	1,	0(17)		;(RESTORE(1), SET RETURN)
	JRST		@SAVE2		;(CALL THE OVERLAYED ROUTINE)
;*******RETURNED HERE AFTER ROUTINE TO SEE IF CALLER IS STILL THERE
OVLRTN:	MOVEM	3,	1(17)		;(SAVE (3))
	MOVE	3,	6(17)		;(GET FUNCT VAL2)
	EXCH	3,	5(17)		;(SAVE FV2, GET FV1)
	MOVEM	3,	4(17)		;(NEW PLACE FOR FUNCT VAL1)
	MOVE	3,	0(17)		;( GET RETURN)
	TLNN	3,	-1		;(TESTING FOR MODULE 0)
	JRST		OVLTV3		;(RESIDENT ALWAYS HERE)
	MOVEM	1,	2(17)
	HLRZ	1,	3		;(GET REQD MODULE #)
	MOVEM	2,	SAVE2		;(SAVE (2)
	MOVEI	2,	3		;IN REG2 CALCULATE
	IMUL	2,	1		;MOD TABLE INDEX
	HRRZ	2,	MODULE(2)	;GET MODULE'S ORIGIN
	CAMN	1,	10(2)		;IS IT CURRENTLY LOADED?
	JRST		OVLTV4		;YES, JUST RETURN TO IT
	IMULI	1,	3		;NO, GET MODTABLE INDEX IN 1
	ADD	17,	[6,,6]		;PROTECT FV'S
	PUSHJ	17,	REOVM.		;(AND READ IT IN)
	SUB	17,	[6,,6]
OVLTV4:	MOVE	2,	SAVE2
	MOVE	1,	2(17)
OVLTV3:	EXCH	3,	1(17)		;(RESTORE (3))
	POPJ	17,			;(AND RETURN TO CALLER)

OVLDEL:: OUTSTR	[ASCIZ/OVERLAY ENTRY DELETED
 /]
	0

;    +----------------------------------------------------------------+
;    I                                                                I
;    I                         O V L R S .                            I
;    I                         - - - - - -                            I
;    I                                                                I
;    +----------------------------------------------------------------+
;
;    MDSI, COMPANY CONFIDENTIAL
;
;    STARTED: 22-May-78
;
;    PURPOSE: To intercept calls to user-defined resident routines from
;       overlays,  thus  eliminating the bug described in 'ODMS Version
;       1.5 report'.
;
;    USAGE:
;        RESCAL 0,<resaddr>
;
;    INPUT: 
;
;       <resaddr>  The actual address of the  resident  routine  to  be
;                  called.
;
;    REQUIREMENTS: RESCAL  is a local UUO with opcode 33.  This package
;       contains its own version of the  UUO  dispatcher  UUODSP  which
;       will simply branch to this routine when LUUO 33 is executed.
;
;    EFFECTS: The number of the calling module will be saved on the R17
;       stack.  The return address for the called resident  routine  is
;       set  to OVLRTN,  which will insure that the caller module is in
;       its overlay area.  In previous versions,  resident  calls  were
;       not  intercepted  at  all,  and if an overlay called a resident
;       routine which subsequently called a routine in  another  module
;       within  the  same  overlay  area,  the return from the resident
;       routine would return to the wrong overlay.
;
;    NOTES: In ODMS 1.5,  user-defined resident symbols are detected by
;       not  having  a  dot ('.') in their names.  Periods within names
;       cannot be defined  within  PASCAL,  but  are  perfectly  OK  in
;       MACRO-10.  Users  should  not  place  routines  with periods in
;       their names in the resident if they call any overlaid routines.
;
;    RESPONSIBLE: Jerry Rosen
;
;    CHANGES: NONE.
;
;    ------------------------------------------------------------------
UUO33::	0
	EXTERN	.JBUUO

OVLRS.::MOVEM	1,SAVE1
	MOVEM	2,SAVE2
	MOVEM	3,SAVE3

	HRRZ	1,0(17)			;GET CALLER RETURN ADDRESS
	MOVEI	3,0			;INIT AREA TABLE INDEX

RESOVS:	MOVE	2,AREA..(3)		;GET AREA(R3) ORIGIN
	CAIGE	1,(2)			;IS RA LESS THAN NEXT AREA ORIGIN?
	JRST	OVLRS1			;YES, USE AREA(R3-1)
	JUMPL	2,OVLRS2		;IF LEFTHALF -1, END OF LIST
	AOJA	3,RESOVS		;ELSE INCREM. INDEX & GO BACK

OVLRS1:	SUBI	3,1			;IF HERE, THEN GET REAL INDEX
OVLRS2: MOVE	2,AREA..(3)		;GET OV AREA ORIGIN
	HRL	1,10(2)			;PUT MOD# IN LEFT HALF
	MOVEM	1,0(17)			;AND STUFF ON STACK

	MOVEI	1,OVLRTN		;GET RESIDENT RETURN HANDLER ADDR
	PUSH	17,1			;AND PLACE AS NEW RETURN ADDR

	MOVE	1,SAVE1
	MOVE	2,SAVE2
	HRRZ	3,.JBUUO		;GET EA OF TV UUO TRAP
	EXCH	3,SAVE3			;RESTORE, PLACE ADDR IN MEMORY
	JRST	@SAVE3			;AND GOTO WITHOUT REGISTER


;    +----------------------------------------------------------------+
;    I                                                                I
;    I                         R E O V R M                            I
;    I                         - - - - - -                            I
;    I                                                                I
;    +----------------------------------------------------------------+
;
;    MDSI, COMPANY CONFIDENTIAL
;
;    STARTED:  1-Jun-77
;
;    PURPOSE: TO READ IN A REQUIRED MODULE TO A SPECIFIED OVERLAY AREA
;
;    USAGE:
;       PUSHJ  17, REOVM.
;
;    INPUT: 
;
;       (1)        CONTAINS MODULE TABLE INDEX
;
;       (2)        CONTAINS ORIGIN OF OVERLAY AREA
;
;    REQUIREMENTS: MUST HAVE A MODULE TABLE WITH FILE  NUMBERS,  STATIC
;       INITIALIZAION  BIT,  DATABASE  BIT,  VERSION  NUMBER,  AND DISK
;       BLOCK POINTER  (NOT  REQUIRED  FOR  THE  FIRST  ACCESS  INTO  A
;       DATABASE FILE).
;
;    EFFECTS: WILL READ IN REQUIRED MODULE,  POSSIBLY OPENING FILE.  ON
;       THE FIRST REQUEST FOR A DATABASE MODULE,  IT WILL CALL DATABASE
;       ROUTINE   <DBQRY.>   FOR  A  BLOCK  POINTER,  BUT  ON  SUBSEQUENT
;       REQUESTS,  IT WILL USE THE SAVED POINTER  AND  NOT  INTERROGATE
;       THE DATABASE.
;
;    NOTES: THIS  IS  AN  EXPANDED  VERSION  OF  FARMER BOB'S ORIGINAL,
;       FEATURING DATABASE ACCESS.
;
;    RESPONSIBLE: FARMER BOB
;       JERRY ROSEN
;
;    CHANGES: NONE.
;
;    ------------------------------------------------------------------
 
 
					;
					NUMHED=3  ; 3 HEADER WORDS IN DB
					;
REOVM.: MOVEM	5,	SAVE5		;
	MOVEM	4,	SAVE4		
	LDB	5,	[POINT  9,MODULE+1(1),9]	;GET FILE NUMBER
	HRRE	4,	FILE(5)		;GET CHANNEL NUMBER
	JUMPG	4,	RCHOPN		;GO IF ALREADY OPEN
	JUMPE	4,	ROVR5.		;ERROR IF UNASSIGNED(0)
	PUSHJ	17,	OVRPN.		;ELSE OPEN IT
	JRST		ROVR8.		;***EXTRA***
RCHOPN: MOVEM	3,	SAVE3
	MOVE	4,	MODULE+1(1)	;GET FILE #, DISK LOCN
	SKIPGE	5,	FILE(5)		;GET CHANNEL NUM WORD,SKIP IF NO EXTFL BIT
	JRST		EXTFL.
	AND	4,	[000377777777]	;ZAP FILE # AND EXTFL BIT
	JUMPN	4,	DBSKP.		;IF NON-ZERO, ALREADY HAVE ADDRESS
	MOVE	3,	MODULE+2(1)	;ELSE GET VERSION NUMBER DESIRED
	EXCH	3,	1		;HANG ONTO VERSION NUMBER
	IDIVI	3,	3		;CONVERT MOD INDEX TO MOD NUMBER
	EXCH	3,	1		;AND REPLACE
	HRRE	5,	5		;GET ACTUAL CH NUM FOR DBQRY
	PUSHJ	17,	DBQRY.		;INTERROGATE, RETURN (4) BLOCK ADDRESS
	JUMPE	4,	ROVR7.		;(0)--> VERSION NOT FOUND***
	IMULI	1,	3		;BACK TO MOD TABLE INDEX
	IORM	4,	MODULE+1(1)	;STORE ADDR TO PREVENT ANOTHER LOOKUP
DBSKP.:	IMULI	4,	200		;BLOCK ADDR TO WORD ADDR
	ADDI	4,	NUMHED		;TO SKIP NUMHED DATABASE POINTER WORDS
	MOVEI	3,	200-NUMHED	;AND SET SIZE OF BLOCK TO READ (-NUMHED)
	JRST		GO....		;AND WE'RE SET
EXTFL.:	AND	4,	[000377777777]	;ZAP FILE #
	IMULI	4,	200		;FOR WORD ADDRESS
	MOVEI	3,	200		;AND SIZE OF FULL BLOCK
GO....:	IMULI	4,	5		;WORD ADDR TO BYTE ADDR
	HRRE	5,	5		;GET JUST CHANNEL NUMBER
	MOVEM	3,	SAVEC		;HANG ONTO # WORDS READ IN
	BLIR	2,	5		;GET FIRST BLOCK
	JRST		ROVR1.		;BOMB
	HRRZ	3,	MODULE(1)	;GET INTENDED MODULE ORIGIN
	AOSE		0(3)		;1ST WORD SHOULD BE (-1) FOR A REAL
	JRST		ROVR2.		;MODULE, ELSE WE BOMB
	IDIVI	1,	3		;CONVERT INDEX TO MOD #
	CAME	1,	10(3)		;COMPARE MODULE NUMBERS TO SEE IF
	JRST		ROVR3.		;WE GOT THE RIGHT ONE
	IMULI	1,	3		;BACK TO MODULE TABLE INDEX
	HRRZ	2,	3(3)		;GET LOADED CODE'S ORIGIN TO INSURE
	CAME	2,	3		;IT WAS LOADED FOR THIS OVERLAY AREA
	JRST		ROVR4.
	ADD     2,	SAVEC		;SKIP NUMBER OF WORDS PREVIOUSLY READ IN
	HLRZ	3,	3(3)		;GET WHAT CODE SAYS IS ITS SIZE
	SUB	3,	SAVEC		;LESS NUMBER OF WORDS READ IN BEFORE
	JUMPLE	3,	REOV0 		;WE'RE DONE IF ONLY 200
	BLIR	2,	5		;ELSE GET REST OF IT
	JRST		ROVR1.
REOV0:	MOVE	2,	MODULE(1)	;(REPLACE MODULE ORIGIN)
	JUMPL	2,	REOV1		;(GO IF STATIC INITILIZED)
;READ STATIC INIT CONTROL INTO AREA -- TOO BIG IF ALL WORDS NON ZERO -- BUG
	HRL	2,	2(2)		;(GET STATIC ORIGIN)
	HLLZ	3,	2(2)		;(GET STATIC SIZE)
	ADD	2,	3		;(END OF STATIC AREA)
	HLLZ	3,	7(2)		;(GET SIZE OF FILE)
	JUMPE	3,	REOV5		;(NONE -- JUST ZERO IT)
	SUB	2,	3		;(GIVING INITIAL ADDR TO READ INTO)
	MOVE	4,	MODULE+1(1)	;(GET FILE START)
	AND	4,	[000377777777]	;(JUST GRANULE ADDR)
	IMULI	4,	200		;(CONVERT TO WORD ADDR)
	HRRZ	3,	7(2)		;(STATIC FILE OFFSET)
	ADD	4,	3		;(START OF STATIC FILE)
	IMULI	4,	5		;(GIVING BYTE ADDR)
	HLRZ	3,	7(2)		;(SIZE OF STATIC INIT FILE)
	HLRZ	2,	2		;(CORE ADDR CALCULATED EARILIER)
	MOVEM	2,	SAVEC		;(SAVE FOR AFTER READ)
	HRLM	3,	SAVEC		;(SAVE COUNT IN TOP H-WORD)
	BLIR	2,	5
	JRST		ROVR6.
	MOVE	2,	SAVEC		;(RESTORE INITIL ADDR OF INIT CONTROLS)
	MOVEM	1,	SAVEC		;(SAVE MODULE INDEX)
	HRRZ	1,	MODULE(1)	;(ORIGIN OF MODULE)
	HLRZ	5,	2(1)		;(GET SIZE OF STATIC)
	HRRZ	1,	2(1)		;(ORIGIN OF STATIC AREA)
	HLRZ	4,	2		;(GET COUNT OF CONTROLS)
	MOVN	4,	4
	HRL	2,	4		;(NEGATING THE COUNT)
REOV2:	MOVE	4,	0(2)		;(GET NEXT CONTROL)
	MOVEI	3,	0		;(INCASE WE ZERO SOMETHING)
REOV3:	CAIG	1,	0(4)		;(IF CURRENT<= NEXT PTR)
	JRST	[MOVEM	3,	0(1)	;(ZERO THE LOCN)
		HRRI	1,	1(1)	;(INCREMENT REG 1)
		SOJGE	5,	REOV3	;(GO IF NOT DNOE)
		JRST		REOV6]	;(DONE)
REOV4:	AOBJP	2,	REOV7		;(IS CONTROL DONE?)
	MOVE	3,	0(2)		;(GET DATUM)
	MOVEM	3,	1(4)		;(AND INT THE WORD)
	SOJLE	5,	REOV6
	AOBJN	4,	REOV4		;(DO NEXT ONE)
REOV7:	HRRI	1,	1(4)		;((1):=(4)+1)
	AOBJN	2,	REOV2		;(ON TO NEXT CONTROL)
	MOVE	4,	1		;(REST OF STATIC AREA)
	ADD	4,	5		;(+COUNT= FINAL ADDR)
	JUMPG	5,	REOV3-1		;(GO ZERO REST)
REOV6:	MOVE	1,	SAVEC		;(RESTORE MODULE INDEX)
	HLRZ	2,	MODULE(1)
	JRST		REOV8
REOV5:	MOVN	3,	2(2)		;(-STATATIC COUNT IN LEFT)
	HRR	3,	2(2)		;(STATIC ORIGIN IN RIGHT)
	MOVEI	4,	0
	MOVEM	4,	0(3)
	AOBJN	3,	.-1
	HLRZ	2,	MODULE(1)
REOV8:	MOVSI	4,	400000		;(TO SET INITIALIZED BIT)
	ORM	4,	MODULE(1)	;(SO WE DONT DO AGAIN)
REOV1:	MOVE	3,	SAVE3
	MOVE	4,	SAVE4
	MOVE	5,	SAVE5
	POPJ	17,			;(RETURN)

ROVR1.:	OUTSTR	[ASCIZ/BAD OVERLAY READ
 /]
	0
ROVR2.:	OUTSTR	[ASCIZ/OVERLAID DATA NOT IN MODULE FORMAT
 /]
	0
ROVR3.: OUTSTR	[ASCIZ/INCORRECT MODULE NUMBER READ IN.
 /]
	0
ROVR4.:	OUTSTR	[ASCIZ/ORIGIN CONFLICT
 /]
	0
ROVR5.:	OUTSTR	[ASCIZ/FILE NOT ASSOCIATED  
 /]
	0
ROVR6.:	OUTSTR	[ASCIZ/ERROR IN STATIC READ
 /]
	0
ROVR7.: OUTSTR	[ASCIZ/MODULE VERSION NOT FOUND
 /]
	0
ROVR8.: OUTSTR	[ASCIZ/CAN'T OPEN FILE FOR OVERLAY READ
 /]
	0

;    +----------------------------------------------------------------+
;    I                                                                I
;    I                         O V R O P N                            I
;    I                         - - - - - -                            I
;    I                                                                I
;    +----------------------------------------------------------------+
;
;    MDSI, COMPANY CONFIDENTIAL
;
;    STARTED: 15-Apr-77
;
;    PURPOSE: TO OPEN THE OVERLAY FILE FOR REOVM.
;
;    USAGE:
;       PUSHJ 17,OVRPN.
;
;    INPUT: 
;
;       (5)        A FILE INDEX INTO THE FILE  TABLE  OF  CHANNELS  AND
;                  NAMES
;
;    REQUIREMENTS: A  STORAGE  LOCATION  FOR THE LAST FILE INDEX OPENED
;       AND THE FILE TABLE
;
;    EFFECTS: WILL OPEN THE FILE OR ISSUE A DIAGNOSTIC
;
;    NOTES: SAVES ALL REGISTERS
;
;    RESPONSIBLE: FARMER BOB
;
;    CHANGES: NONE.
;
;    ------------------------------------------------------------------
 
 
;***OPEN THE FILE POINTED TO BY REG 5, USES ONLY ONE CHANNEL
OVRPN.:	MOVEM	6,	SAVE6
	MOVEM	7,	SAVE7
	MOVE	6,	LASTFILE	;(THE LAST ONE WE OPENED)
	MOVE	7,	[377777,,-1]
	SKIPGE	0,	FILE(6)		;SKIP IF BIT NOT SET
	HRRE	7,	7		;ELSE SET BIT IN NEW WORD
	EXCH	7,	FILE(6)			;(GONNA CLOSE IT)
	HRRE	7,	7		;GET REAL CHANNEL NUMBER
	JUMPG	7,	OVRO1		;(HAVE GOT A CHANNEL)
	MOVE	6,	1		;(SAVE REG 1)
	MOVE	7,	0		;(SAVE REG 0
	PUSHJ	17,	GETCN.##	;(GET NEXT AVAILABLE CHANNEL)
	EXCH	7,	0		;(PLACE CHANNEL,RESTORE 0)
	MOVE	1,	6		;(RESTORE 1)
	JRST		OVRO2

OVRO1:	MOVEI	6,	0		;TELL DSNU NOT TO DELETE
	DSNU	6,	7		;OR ANYTHING STUPID LIKE THAT

OVRO2:	MOVEI	6,	0			;(ARG FOR ASNU)
	ADD	5,	[BYTE (3)4(33)FILE+1]	;(INPUT, POINT AT NAME)
	ASNU	5,	7
	POPJ	17,		;UNPARSEABLE, JUST GO HOME NOSKIP
	SUB	5,	[BYTE (3)4(33)FILE+1]
	MOVEM	5,	LASTFILE
	HRRM	7,	FILE(5)		;SAVE UNIT NR
	MOVE	6,	SAVE6
	MOVE	7,	SAVE7
	AOS	0,	(17)		;KLUDGE--SKIP RETURN
	POPJ	17,			;(RETURN)
	0


 
;    +----------------------------------------------------------------+
;    I                                                                I
;    I                         D B Q R Y .                            I
;    I                         - - - - - -                            I
;    I                                                                I
;    +----------------------------------------------------------------+
;
;    MDSI, COMPANY CONFIDENTIAL
;
;    STARTED:  1-Jun-77
;
;    PURPOSE: To interrogate a database file,  returning block  address
;       of a specified module/version pair.  This section also contains
;       the PASCAL run-time  entry  points  <OVLVERSION>,  <OVEXTFILE>,
;       <OVMODFILE>,  and <OVFDELETE>.
;
;    USAGE:
;       for database query---PUSHJ  17,DBQRY.
;       for PASCAL runtime--
;       	OVLVERSION(WHICH : MODULETYPE;
;       		   NUMBER : VERSIONNUMBER;
;       		   var KEY : OVLCODE);
;       	OVEXTFILE(var THIS : OVFILENDX;
;       		  WHERE : packed array[1..25] of char;
;       		  var KEY : OVLCODE);
;       	OVMODFILE(WHICH : MODULETYPE;
;       		  THIS : OVFILENDX;
;       		  var KEY : OVLCODE);
;       	OVFDELETE(THIS : OVFILENDX;  var CODE : OVLCODE);
;
;    INPUT: 
;
;       (1)        for DBQRY.--module number
;
;       (3)        for DBQRY.--version number
;
;       (5)        for DBQRY.--channel number of queried database
;
;       WHICH      Indicates  which  module  is  to  be  altered in the
;                  tables
;
;       THIS       File index in the file table
 
;	NUMBER	   Full-word integer version number
;
;       KEY        Specifies function of file in OVEXTFILE
;
;       WHERE      DECsystem10 standard file identifier
;
;    OUTPUT:
;
;       (4)        for DBQRY.--returns block number of  module/version,
;                  0 if not found
;
;	KEY	   return code indicating error type, if any
;
;    REQUIREMENTS: There is room in the file table for eight entries.
;
;    EFFECTS: Alters the overlay manager's tables.
;
;    RESPONSIBLE: Jerry Rosen
;
;    CHANGES: NONE.
;
;    ------------------------------------------------------------------
 
DBQRY.::MOVEM	6,	SAVE6
	MOVE	6,	[7,,SAVE7]
	BLT	6,	SAVE12		;LIKE STM CIRCA 370
	MOVE	6,	1		;HERE STARTS THE TRICKY STUFF 
	IDIVI	6,	^D127		;DIRECTORY BLOCK #-1 IN 6
	MOVE	12,	6		;AND WORD #-1 IN 7
	MOVEI	11,	1		;STARTING AT REAL BLOCK 1
DBLP..:	SOJL	12,	DBGT..		;KICK OUT IF WE'RE AT RIGHT BLOCK
	IMULI	11,	200*5		;TO GET BYTE ADDR OF BLOCK
	FWIR	10,	5		;GET POINTER TO NEXT BLOCK
	JRST		DBER1.
	JUMPE	10,	DBER2.		;IF ZERO, NO MORE DIRECTORY BLOCKS
	MOVE	11,	10		;ELSE SET UP NEXT BLOCK TO CHECK
	JRST		DBLP..		;AND GO GET NEXT POINTER
DBGT..:	IMULI	11,	200		;WORD # OF PROPER DIRECTORY BLOCK
	ADD	11,	7		;NOW IS WORD OF DIRECTORY ENTRY WE NEED
	IMULI	11,	5		;TO BYTE ADDRESS
	FWIR	10,	5		;10 HAS BLOCK # OF CODE
	JRST		DBER1.
	JUMPE	10,	.		;IF ZERO, MODULE NOT IN DATABASE
DBVER.:	MOVE	11,	10		;KEEP CURRENT DISK ADDR BEING CHECKED
	IMULI	11,	200		;WORD ADDR OF START OF BLOCK
	ADDI	11,	1		;+1 TO GET ADDR OF VERSION #
	IMULI	11,	5		;NOW TO BYTE ADDRESS
	FWIR	10,	5		;AND GET VERSION NUMBER
	JRST		DBER1.
	CAMN	10,	3		;IS IT WRONG VERSION?
	JRST		DBEXT.		;NO, IT'S RIGHT ONE
	SUBI	11,	^D10		;ELSE BACK UP 10 BYTES TO POINTER
	FWIR	10,	5		;GET POINTER TO NEXT VERSION
	JRST		DBER1.
	JUMPE	10,	DBER3.		; 0 -> NO OTHER VERSIONS TO CHECK
	JRST		DBVER.
DBEXT.:	IDIVI	11,	5		;GET WORD ADDR OF BLOCK+2
	SUBI	11,	2		;GET WORD ADDR OF BLOCK
	LSH	11,	-7		;GET BLOCK ADDR
	MOVE	4,	11		;PUT BLOCK ADDR IN REG 4
EXITDB: MOVE	6,	[SAVE7,,7]	;PREPARE FOR BLT AND EXIT
	BLT	6,	12		
	MOVE	6,	SAVE6
	POPJ	17,
DBER1.: OUTSTR 	[ASCIZ/BOMB ON FWIR IN DBQRY.
 /]
	0
DBER2.: OUTSTR  [ASCIZ/SHORT DIRECTORY, MODULE NOT IN DB
 /]
	0
DBER3.:	SETZ	4,	4	
	JRST		EXITDB
 
 
OK=0
NOTDBMOD=3
NOVER=7
NOTABID=10
BADMOD=4
DB=1
MODFILE=2
OVERFL=5
TOOLONG=6
 
OVLVER::MOVEM	1,	SAVE1
	MOVE	1,	[2,,SAVE2]
	BLT	1,	SAVE5
	JUMPE	2,	OERR1.		;NO MODULE ZERO
	IMULI	2,	3		;CONVERT TO MOD TABLE INDEX
	MOVEI	4,	MODULE(2)	;GET MODTABLE ENTRY ADDRESS
	CAIL	4,	FILE		;ARE WE OVER EDGE OF TABLE?
	JRST		OERR1.		;YES, ILLEGAL MODNUMBER
	LDB	5,	[POINT 9,MODULE+1(2),9] ;GET FILE INDEX
	SKIPGE	0,	FILE(5)		;MAKE SURE EXTFL BIT IS ZERO
	JRST		OERR2.
	MOVE	1,	SAVE2		;GET MODULE NUMBER
	HRRE	4,	FILE(5)		;GET CHANNEL NUMBER
	JUMPG	4,	FILEOK		;IS ASSIGNED
	JUMPE	4,	INTERR		;BUT A ZERO IS UNASSIGNED FILE
	PUSHJ	17,	OVRPN.		;OTHERWISE OPEN FILE
	JRST		OERRK.		;CAN'T OPEN IT***
FILEOK: HRRE	5,	FILE(5)		;GET CHANNEL NUMBER FOR DBQRY.
	PUSHJ	17,	DBQRY.		;GET ADDRESS OF MOD VERSION
	MOVE	1,	SAVE1		;RESTORE 1 NOW THAT DBQRY'S DONE
	JUMPE	4,	OERR3.		; 0 -> NOT FOUND
	MOVEM	3,	MODULE+2(2)	;SET IN NEW VERSION #
	DPB	4,	[POINT 26,MODULE+1(2),35]	;LAY IN ADDRESS
	MOVE	3,	[377777777777]	;GET SET 
	ANDM	3,	MODULE(2)	;CREAM OLD STATIC INIT BIT
	HRRZ	3,	MODULE(2)	;GET MODULE'S ORIGIN, AND ZAP
	SETOM	0,	10(3)		;MOD NUMBER TO FORCE OVERLAY READ
	SETZ	3,	3		;SET RETURN CODE=OK
	JRST		EXIT..
OERR1.:	MOVEI	3,	BADMOD		;ERROR RETURN CODE
	JRST		EXIT..
OERRK.: MOVEI	3,	NOTABID		;ERROR--CAN'T OPEN FILE
	JRST		EXIT..
OERR2.: MOVEI	3,	NOTDBMOD
	JRST		EXIT..
OERR3.: MOVEI	3,	NOVER
EXIT..: MOVEM	3,	@SAVE4		;SET RETURN CODE IN LOCN.
	MOVE	2,	SAVE2
	MOVE	3, 	SAVE3
	MOVE	4,	SAVE4
	POPJ	17,
 
 
INTERR: OUTSTR	[ASCIZ/? OVERLAY TABLE ERROR
 /]
	0
 
 
OVEXTF::MOVEM	2,	SAVE2
	MOVEM	3, 	SAVE3
	MOVEM	4,	SAVE4
	MOVE	4,	(4)		;GET PASSED FUNCTION CODE
OVDBC.: MOVEI	3,	0		;PREPARE TO WALK FILE TABLE
	MOVEI	2,	^D7		;# OF FILES OTHER THAN DEFAULT
OXLP..: ADDI	3,	6		;INCREMENT TO NEXT CHANNEL WORD
	SKIPN	0,	FILE(3)		;IS IT A ZERO CHANNEL WORD?
	JRST		FOUND.		;YES, IT WAS NEVER ASSIGNED
	SOJG	2,	OXLP..		;NO, RETURN IF MORE TO CHECK
	JRST	OERR5.			;ELSE BOMB, NO MORE ROOM IN FILTAB
FOUND.:	HRRZ	2,	SAVE3		;GET ADDRESS OF CHARACTERS
	LDB	2,	[POINT 7,4(2),^D34]   ;PICK UP LAST CHARACTER
	CAIE	2,	40		;MAKE SURE IT'S A BLANK
	JRST		OERR6.		;ELSE BOMB
	SETOM	0,	FILE(3)		;SET CHANNEL WORD TO ONES (-1)
	SOJN	4,	OVFCD.		;KICK IF PASSED TO BE MODFILE
	HRLOI	4,	377777		;GET A WORD WITH 0 IN BIT 0
	MOVEM	4,	FILE(3)		;AND PUT IT DOWN
OVFCD.: HRLZ	2,	SAVE3		;GET POINTER TO STRING FOR FILE
	HRRI	2,	FILE+1(3)	;AND TO DESTINATION
	BLT	2,	FILE+5(3)	;TRANSFER CHARACTERS
	EXCH	5,	3		;SAVE 5, GET FILETABLE INDEX
	PUSHJ	17,	OVRPN.		;AND TRY TO OPEN FILE
	JRST		OERR8.		;NO CAN DO
	EXCH	5,	3		;IT'S OK, RESTORE 5
	SETZ	4,	4		;RETURN CODE = OK
	MOVEM	3,	@SAVE2		;SET FILE TABLE INDEX IN VAR
	JRST		OUT$$$
OERR4.: MOVEI	4,	BADMOD		;ERROR RETURNS
	JRST		OUT$$$
OERR8.: MOVEI	4,	NOTABID
	JRST		OUT$$$
OERR5.: MOVEI	4,	OVERFL
	JRST		OUT$$$
OERR6.: MOVEI	4,	TOOLONG
OUT$$$: MOVE 	2,	SAVE2
	MOVEM	4,	@SAVE4		;PLACE RESULT AT END OF POINTER
	MOVE	3,	SAVE3
	MOVE	4,	SAVE4
	POPJ	17,
 
OVMODF::MOVEM	2,	SAVE2
	MOVEM	3,	SAVE3
	MOVEM	4,	SAVE4
	IMULI	2,	3		;GET MOD TABLE INDEX
	MOVEI	4,	MODULE(2)	;GET MOD TABLE ENTRY ADDRESS
	CAIGE	4,	FILE		;SKIP IF OFF END OF TABLE
	CAIG	4,	MODULE		;OR BEFORE LEGAL START
	JRST		OERR1.
	CAIG	3,	^D48		;CHECK FILE INDEX
	CAIGE	3,	0		;FOR LEGALITY
	JRST	OERR7.
	SKIPN	0,	FILE(3)		;MAKE SURE FILE IS ASSOCIATED
	JRST		OERR7.
	LSH	3,	^D26		;MOVE TO PROPER BYTE LOCATION
	MOVEM	3,	MODULE+1(2)	;LAY INTO MODULE TABLE
	SETZM	0,	MODULE+2(2)	;ZAP OLD VERSION NUMBER
	SETZ	3,	3		;SET RETURN CODE
	JRST		EXIT..
OERR7.: MOVEI	3,	NOTABID
	JRST		EXIT..
 
 
OVFDEL::MOVEM	2,	SAVE2
	MOVEM	3,	SAVE3
	MOVEM	4,	SAVE4
	CAIG	2,	^D48		;CHECK FILETABLE INDEX
	CAIG	2,	1		;CANNOT DISASSOCIATE DATABASE
	JRST		OERR10
	HRRE	3,	FILE(2)		;GET CHANNEL NUMBER
	JUMPLE	3,	NOTOPN		;IF NOT OPEN
	MOVEI	4,	0		;ZERO A REGISTER TO INDICATE NORMAL CLOSE
	DSNU	4,	3		;ELSE CLOSE CHANNEL
NOTOPN:	SETZM	0,	FILE(2)		;SET CH# TO UNASSOCIATED
	SKIPA	4,	[3]		;INITIALIZE MODTABLE INDEX
MODLOP: ADDI	4,	3		;INCREMENT MODTABLE INDEX
	MOVEI	3,	MODULE(4)	;GET ADDR OF TABLE ENTRY
	CAIL	3,	FILE		;ARE WE OFF THE EDGE??
	JRST		DONEMD		;YES, KICK OUT
	LDB	3,	[POINT 9,MODULE+1(4),9]	;NO, GET FILE INDEX
	CAME	3,	2		;IS IT ASSOCIATED WITH FILE?
	JRST		MODLOP		;NO, IGNORE IT
	SETZ	3,	3		;YES, GET A ZERO	
	DPB	3,	[POINT 9,MODULE+1(4),9]	;AND ASSOCIATE MOD W/DB
	SETZM	0,	MODULE+2(4)	;RESET VERSION TO VERSION 0
	MOVE	3,	MODULE(4)	;GET ADDR OF OVERLAY AREA
	SETZM	0,	10(3)		;CHANGE MODNUM TO FORCE READIN
	JRST		MODLOP		;BACK FOR MORE
DONEMD: SETZ	3,	3		;SET ZERO RETURN CODE
EXITMD: MOVEM	3,	@SAVE3		;INSTALL RETURN CODE
	MOVE	2, 	SAVE2
	MOVE	3, 	SAVE3
	MOVE	4,	SAVE4
	POPJ	17,
OERR10: MOVEI	3,	NOTABID
	JRST	EXITMD


	RELOC	0
LASTFILE:	BLOCK 1
SAVE1:	BLOCK	1
SAVE2:	BLOCK	1
SAVE3:	BLOCK	1
SAVE4:	BLOCK	1
SAVEC:	BLOCK	1
SAVE5:	BLOCK	1
SAVE6:	BLOCK	1
SAVE7:	BLOCK	1
SAVE10:  BLOCK   1
SAVE11:  BLOCK   1
SAVE12:  BLOCK   1


	LIT
	EXTERN	OVBASE
	EXTERN	AREA..
	EXTERN	FILE,MODULE
	EXTERN	IOUUO.
	PRGEND

	TITLE	UUODSP
 
	SEARCH	DEFUUO
	COMMENT	;
 
	THE UUO DISPATCHER
	******************
 
 
	THE DISPATCHER FIRST SETS UP A STACK (WHICH THE UUO MAY USE
	IF DESIRED).
 
	THE CALLING REGISTERS ARE PLACED ON THE STACK, BEGINNING WITH
	REGISTER ZERO.
 
	THE RETURN LOCATION OF THE UUO IS PLACED IN REGISTER UUORET.
 
	THE EFFECTIVE ADDRESS OF THE UUO IS PLACED IN REGISTER EADDR.
 
	THE "AC" NUMBER IS PLACED IN REGISTER ACP.
 
	THE "AC" NUMBER IS STACKED.
 
	THE EFFECTIVE ADDRESS IS STACKED.
 
	REGISTER ACP IS CONVERTED TO POINT TO THE STACK.
 
	IF THE EFFECTIVE ADDRESS POINTS TO A REGISTER, IT IS CONVERTED
	TO POINT TO THE STACK.
 
	THE DISPATCHER THEN BRANCHES THROUGH UUOTAB INDEXED BY OPCODE.
 
	UPON RETURN, ALL REGISTERS ARE RESTORED FROM THE STACK.
 
	RETURN LOCS:
	  URET   - NORMAL RETURN
	  USKP   - SKIP RETURN
 
 
	MACROS
	******
 
	DEFUUO - DEFINE UUO
	CALLING SEQUENCE: DEFUUO UUONAM
 
 
	UUOENT - DEFINE UUO ENTRY POINT
	CALLING SEQUENCE: UUOENT UUONAM
 
	UUOVCT - SET UP UUO VECTOR
	CALLING SEQUENCE: UUOVCT
 
	AC     - REFER TO "AC"+N
	CALLING SEQUENCE: AC(N)
 
	SETSKP - INCREMENT RETURN LOCATION
	CALLING SEQUENCE: SETSKP COUNT
 
;
;************************************************
;
; THE FOLLOWING MACRO DEFINITIONS SHOULD APPEAR AT THE HEAD
; OF ALL PACKAGES USING THE MACROS, THE PACKAGES CONTAINING
; THE MACROS, AND IN THIS PACKAGE.
;
; EACH OF THE ABOVE PACKAGES SHOULD ALSO CONTAIN THE SAME CALLS
; TO DEFUUO IN THE SAME ORDER!!
;
 
DEFINE DEFUUO(UUONAM)<
IFNDEF UUONUM, <
 UUONUM==0
 UUORDF==-1>
IF2, <
 IFL UUORDF, <
  UUORDF==0
  UUONUM==0>>
UUONUM==UUONUM+1
IFG UUONUM-^O37, <PRINTX <TOO MANY UUO DEFS>>
OPDEF UUONAM [UUONUM_^D27]
.'UUONAM==UUONUM>
 
DEFINE UUOENT(UUONAM)<UUOEN2(\.'UUONAM)>
DEFINE UUOEN2(UUONAM)<UUO'UUONAM::>
 
DEFINE SETSKP(CNT)<ADDI UUORET,CNT>
 
DEFINE AC(X)<<X(ACP)>>
 
STKPTR=^O17
UUORET=^O16
EADDR=^O15
ACP=^O14
 
;************************************************
 
DEFINE UUOVCT<
UUON==1
REPEAT UUONUM, <UUOVC2(\UUON)
UUON==UUON+1>
IFLE UUONUM-^O37, <REPEAT 37-UUONUM+1, <HALT>>>
DEFINE UUOVC2(UUONUM)< JRST UUO'UUONUM##>
 
 
	EXTERN	.JBUUO
	ENTRY	USKP,URET,ULEVEL
	TWOSEG
	RELOC	400000
 
DOUUO:
	MOVEM	STKPTR,STKSAV	; SAVE REGISTER 17...

;*** KLUDGE TO FIELD ODMS RESIDENT CALL WITHOUT STACKING UUO ***
	LDB	STKPTR,[POINT 6,.JBUUO,8]	;GET OPCODE OF UUO
	CAIE	STKPTR,^O33			;IS IT ROSEN'S UUO?
	JRST	DOUUO2				;NO, WE'RE COOL
	MOVE	STKPTR,STKSAV			;YES, RESTORE PASCAL STKPTR
	JRST	OVLRS.##			;AND HIT THE NEW ROUTINE
 
DOUUO2:	AOSG	ULEVEL		; SET UP STACK REGISTER??
	MOVEI	STKPTR,STACK-1
 
	PUSH	STKPTR,0	; STACK ALL REGISTERS...
	MOVEI	0,1(STKPTR)
	HRLI	0,1
	BLT	0,^D15(STKPTR)
	ADD	STKPTR,[XWD ^D14,^D14]
	PUSH	STKPTR,STKSAV
 
	MOVE	UUORET,GOUUO	; RETURN LOC...
	HRRZ	EADDR,.JBUUO	; EFFECTIVE ADDRESS
	LDB	ACP,[POINT 4,.JBUUO,12]	; "AC" NUMBER
	PUSH	STKPTR,ACP	; STACK REAL "AC" NUMBER
	PUSH	STKPTR,EADDR	; STACK TRUE EFFECTIVE ADDRESS
	ADDI	ACP,-^D17(STKPTR)	; CONVERT TO STACK ADDRESS
	CAIG	EADDR,^O17	; IS EFFECTIVE ADDRESS A REGISTER?
	ADDI	EADDR,-^D17(STKPTR)	; CONVERT TO STACK ADDRESS
 
	LDB	W0,[POINT 6,.JBUUO,8]	; OPCODE...
	JRST	UUOTAB-1(W0)	; DISPATCH...
 
USKP:
	ADDI	UUORET,1
 
URET:
	MOVEM	UUORET,GOUUO	; SAVE RETURN LOC...
 
	POP	STKPTR,0	; REMOVE STACKED TRUE "AC" NUMBER
	POP	STKPTR,0	; REMOVE STACKED TRUE EFFECTIVE ADDRESS
 
	POP	STKPTR,STKSAV	; RESTORE ALL REGISTERS...
	ADDI	STKPTR,-^D14
	HRLZ	STKPTR,STKPTR
	BLT	STKPTR,^D14
	MOVE	STKPTR,STKSAV
 
	SOS	ULEVEL		; DECREMENT UUO NESTING LEVEL...
	JRST	@GOUUO		; GO HOME...
 
 
UUOTAB:	UUOVCT	
 
 
	RELOC	0
STACK:	BLOCK	500
STKSAV:	BLOCK	1
ULEVEL:	EXP	-1	; *** ASSUMED TO BE PROPERLY INITED..
GOUUO:	BLOCK	1
		JRST	DOUUO
 
	LOC	41
	JSR	GOUUO
	RELOC
	END

 ucYn