QUICKFIT	MACRO %53A(1155) 17:35  4-Oct-82 Page 1
MMQFIT	MAC	28-May-71 21:33	

						SEARCH	RTSYM
						$MODULE	QUICKFIT^


			000000			DEBUG=	0
					;
					;     ENTRY POINTS
					;
						ENTRY	ALC0.
						ENTRY	NEW.
						ENTRY	DSPOS.
						ENTRY	MARK.
						ENTRY	RLEAS.

						EXTERN	SF$VFY
					;
					;     TTY BREAK
					;
						EXTERN	TWAIT.,DIE.,WRTPC.
					;
					;     HEAP HEADER
					;
			000000			LHEAP=	0		; PTR TO LAST HEAP
			000001			TAIL=	1		; PTR TO WORD PAST END OF HEAP
			000002			FLIST=	2		; PTR (0:ERSIZE+1) TO FREE LIST CHAINS
			000020			ERSIZE=	20		; EXACT RANGE SIZE
			000024			HSIZE=	FLIST+ERSIZE+2	; TOTAL HEADER SIZE
					;
					;     STORAGE PARAMETERS
					;
			000001			SMALL=	1		; DON'T SPLIT LEAVING REMNANTS OF THIS SIZE
			000002			MINSZ=	2		; LIMITS OF EXACT RANGE
			000021			MAXSZ=	MINSZ+ERSIZE-1
			000004			MXTCNT=	4		; NUMBER OF TAIL EXTENSIONS BEFORE COLLAPSE
					;
					;     BLOCK FORMAT
					;
			000000			ASIZE=	0		; BLOCK IN USE, NEG. CNT IN FIRST WORD
			000001			FSIZE=	1		; FREE BLOCK, CNT IN SECOND WORD
									; SIZES INCLUDE HEADER WORD
QUICKFIT	MACRO %53A(1155) 17:35  4-Oct-82 Page 1-1
MMQFIT	MAC	28-May-71 21:33	

			000000			FPREV=	0		; TO LAST BLOCK ON CHAIN (LEFT HW)
									;   OR FLIST(SLOT) IF FIRST
			000000			FNEXT=	0		; TO NEXT BLOCK ON CHAIN (RIGHT HW)
					;
					;     REGISTER ASSIGNMENTS
					;
			000001			REGIN=	1
			000003			HEAP=	EXP1+1	; PTR TO HEAP IN USE
			000002			CNT=	EXP1		; SIZE TO BE ALLOCATED
			000004			SLOT=	EXP1+2	; SLOT INDEX IN FLIST FOR BLOCK
			000001			BLK=	1		; PTR TO BLOCK TO BE FREED
			000005			T=	EXP1+3	; TEMPS
			000006			R=	EXP1+4	; MUST BE T+1
			000007			NB=	EXP1+5	; PTR TO NEXT BLOCK IN COLLAPSE
			000007			RES=	EXP1+5	; PTR TO AREA RETURNED
			000002			HP=	EXP1		; HEAP PTR FOR MARK AND RELEASE

					;
					; PSA STORAGE
					;
						$STATIC	CHEAP,1^
						$STATIC	PASS,1^
						$STATIC	TCNT,1^
						$STATIC	REGSAVE,6^
						$STATIC	DESTREG,1	^; where to put it
						$STATIC	PSASAVE,1^
						$TEMP	PSATEMP,1^
					;
					;     INITIALIZATION:  GET SPACE IN WHICH TO PUT INITIAL PORTION
					;     OF HEAP. INITIALIZE NEW HEAP.
					;
	400000'				ALC0.:
	400000'	550 03 0 00 000000*	INIT:	HRRZ	HEAP,.JBFF##	; GET PTR TO START OF LOW FREE
	400001'	211 00 0 00 000004 		MOVNI	R0,MXTCNT
	400002'	202 00 0 14 000002 		MOVEM	R0,TCNT^.TCNT(psa)^
					;
					;     SUBROUTINE TO INITIALIZE A NEW HEAP HEADER.  ENTERED
					;     WITH HEAP POINTING TO THE NEW HEAP AND CHEAP TO
					;     THE LAST HEAP. MAKES SURE THERE IS SPACE FOR HEAP.
					;
QUICKFIT	MACRO %53A(1155) 17:35  4-Oct-82 Page 1-2
MMQFIT	MAC	28-May-71 21:33	

	400003'	201 05 0 03 001000 	NEWHP:	MOVEI	T,1K(HEAP)	; MAKE SURE THERE IS A K FOR NEW HEAP
	400004'	047 05 0 00 000011 		CORE	T,		; TRY ALLOCATION
	400005'	254 00 0 00 400130'		JRST	HFL.AC		; TOO LITTLE CORE
	400006'	201 05 1 14 000000 		MOVEI	T,@CHEAP	^.CHEAP(psa)^; GET POINTER TO LAST HEAP
	400007'	202 05 0 03 000000 		MOVEM	T,LHEAP(HEAP)
	400010'	201 05 0 03 000024 		MOVEI	T,HSIZE(HEAP);	; GET POINTER TO FIRST FREE WORD
	400011'	202 05 0 03 000001 		MOVEM	T,TAIL(HEAP);
	400012'	205 05 0 00 777756 		MOVSI	T,-ERSIZE-2	; FAST LOOP TO ZERO FREE LIST
	400013'	541 05 0 03 000000 		HRRI	T,(HEAP)	; BUILD CONTROL WORD
	400014'	402 00 0 05 000002 		SETZM	FLIST(T)	; ZERO IT
	400015'	253 05 0 00 400014'		AOBJN	T,.-1
	400016'	202 03 0 14 000000 		MOVEM	HEAP,CHEAP	^.CHEAP(psa)^; UPDATE CURRENT HEAP PTR
	400017'	263 17 0 00 000000 		POPJ	TOP,		; RETURN
					;
					;     SUBROUTINE TO CALCULATE THE SLOT THAT BLOCK BELONGS IN.
					;     ENTERED WITH SIZE LOADED IN CNT, AND RETURNS WITH SLOT
					;     INDEX IN SLOT.
					;
	400020'	305 02 0 00 000002 	CSLOT:	CAIGE	CNT,MINSZ	; CHECK IF BELOW EXACT RANGE
	400021'	254 00 0 00 400026'		JRST	CSLOW
	400022'	303 02 0 00 000021 		CAILE	CNT,MAXSZ	; CHECK IF ABOVE
	400023'	254 00 0 00 400030'		JRST	CSHIGH
	400024'	201 04 0 02 777777 		MOVEI	SLOT,1-MINSZ(CNT)  ;COMPUTE SLOT NUMBER
	400025'	263 17 0 00 000000 		POPJ	TOP,
	400026'	402 00 0 00 000004 	CSLOW:	SETZM	SLOT		; BELOW, SLOT = 0
	400027'	263 17 0 00 000000 		POPJ	TOP,
	400030'	201 04 0 00 000021 	CSHIGH:	MOVEI	SLOT,ERSIZE+1	; ABOVE
	400031'	263 17 0 00 000000 		POPJ	TOP,
					;
					;     NEW -- ALLOCATE STORAGE OF CNT WORDS
					;
	400032'				NEWERR:	
	400032'	200 00 0 17 000000 		MOVE	R0,0(TOP)
						$RTERROR ($EXSPC,$SPCNN)^
	400033'	201 01 0 00 014003 		movei	r1,$errcode($EXSPC,$SPCNN,$false)^$EXSPC*2000+$false*1000+$SPCNN^^
	400034'	254 00 0 00 000000*		jrst	rt.err^
	400035'				NEW.:
	400035'	350 01 0 17 000000 		AOS	R1,0(TOP)	; tick return addr, and get arg block addr
	400036'	201 00 1 01 777777 		MOVEI	R0,@-1(R1)	; EA of arg is size needed
	400037'	135 01 0 00 400425'		LDB	R1,[point 4,-1(R1),12]	; ac bits give reg to store
QUICKFIT	MACRO %53A(1155) 17:35  4-Oct-82 Page 1-3
MMQFIT	MAC	28-May-71 21:33	

	400040'	202 14 0 17 000001 		MOVEM	PSA,PSATEMP^.PSATEMP(top)^
						$GETPSA	QFIT^
	400041'	200 14 0 15 000017 		move	psa,$QFIT(pda)^
	400042'	202 01 0 14 000011 		MOVEM	R1,DESTREG	^.DESTREG(psa)^; store it
	400043'	200 01 0 17 000001 		MOVE	R1,PSATEMP^.PSATEMP(top)^
	400044'	202 01 0 14 000012 		MOVEM	R1,PSASAVE^.PSASAVE(psa)^
						$SAVE	REGSAVE,2,7^
	400045'	124 02 0 14 000003 		dmovem	$first,REGSAVE^.REGSAVE(psa)^
	400046'	124 04 0 14 000005 		dmovem	$first+2,2+REGSAVE^.REGSAVE(psa)^
	400047'	124 06 0 14 000007 		dmovem	$first+4,4+REGSAVE>>>>^^.REGSAVE(psa)^
	400050'	200 02 0 00 000000 		MOVE	EXP1,R0		; load size where needed
	400051'	321 02 0 00 400032'		JUMPL	CNT,NEWERR	; ERROR OUT IF NEGATIVE BLOCK SIZE REQUESTED
	400052'	307 02 0 00 000000 		CAIG	CNT,0		; CAN ALLOCATE ZERO BLOCK ALRIGHT, BUT REQUIRE
	400053'	201 02 0 00 000001 		MOVEI	CNT,1		; AT LEAST TWO WORDS TO TRACK BLOCK WHEN
									; DISPOSED
	400054'	201 03 1 14 000000 		MOVEI	HEAP,@CHEAP	^.CHEAP(psa)^; GET PTR TO CURRENT HEAP
	400055'	306 03 0 00 000000 		CAIN	HEAP,0		; INIT, IF HAVE NOT ALREADY DONE SO
	400056'	260 17 0 00 400000'		PUSHJ	TOP,INIT
	400057'	271 02 0 00 000001 		ADDI	CNT,1		; ONE WORD FOR BLOCK DESCRIPTOR WROD
						IFN	DEBUG	<PUSHJ TOP,TELCNT>
	400060'	476 00 0 14 000001 		SETOM	PASS	^.PASS(psa)^	; FLAG NO OF COLLAPSES
	400061'	260 17 0 00 400020'		PUSHJ	TOP,CSLOT	; CALC SLOT INDEX FOR BLOCK
	400062'	322 04 0 00 400133'		JUMPE	SLOT,BELOW	; SLOT 0 - BELOW RANGE
	400063'	303 04 0 00 000020 		CAILE	SLOT,ERSIZE	; SKIP IF IN EXACT RANGE
	400064'	254 00 0 00 400144'		JRST	ABOVE

					;
					;     REQUESTED ALLOCATION IS IN EXACT RANGE.  FIRST TRY TO FIND
					;     A BLOCK OF THE REQUIRED SIZE.  ONE EXISTS IF THE FREE LIST
					;     FOR THAT SIZE IS NON NULL.  IF THERE IS NOT SUCH BLOCK
					;     THEN CONTINUE TO ATTEMPT ALLOCATIONS BY OTHER METHODS, BELOW.
					;
	400065'	201 05 0 03 000002 	EXACT:	MOVEI	T,FLIST(HEAP)	; GET ADDRESS OF FREELIST SLOT TO LOOK AT
	400066'	270 05 0 00 000004 		ADD	T,SLOT
	400067'	201 07 1 05 000000 		MOVEI	RES,@0(T)	; LOAD PTR TO FIRST SLOT
	400070'	322 07 0 00 400120'		JUMPE	RES,ESRCH	; IF ZERO, LIST IS NULL, TRY OTHER METHOOS

	400071'	550 06 0 07 000000 		HRRZ	R,FNEXT(RES)	; GET PTR TO NEXT ON LIST
	400072'	202 06 0 05 000000 		MOVEM	R,0(T)		; UNCHAIN BLOCK, SET FLIST TO NEXT
	400073'	506 05 0 06 000000 		HRLM	T,FPREV(R)	; NEXT.PREV = FLIST(SLOT)
QUICKFIT	MACRO %53A(1155) 17:35  4-Oct-82 Page 1-4
MMQFIT	MAC	28-May-71 21:33	

	400074'	212 02 0 07 000000 		MOVNM	CNT,ASIZE(RES)	; FLAG BLOCK AS IN USE
	400075'	254 00 0 00 400077'		JRST	.+2		; NO NEED TO UNWIND STACK

	400076'	262 17 0 00 000005 	DONE:	POP	TOP,T		; UNWIND CALL STACK
	400077'	402 00 0 07 000001 		SETZM	1(RES)		; ALWAYS ON WORD
					; The following code removed along with the stipulation that storage allocated
					; by NEW always be initialized by the runtime to zero. 4/28/82 SEM
					;
					; That stipulation restored and the code reenabled since too many programs
					; (including the Pascal I/O system) relied on the initialization.
					; 9/29/82 SEM
					;
	400100'	210 01 0 07 000000 		MOVN	R1,0(RES)	; GET BLOCK SIZE
	400101'	307 01 0 00 000002 		CAIG	R1,2
	400102'	254 00 0 00 400110'		JRST	NEWRET
	400103'	201 02 0 07 000002 		MOVEI	EXP1,2(RES)	; PREPARE BLT TO ZERO BLOCK
	400104'	505 02 0 07 000001 		HRLI	EXP1,1(RES)
	400105'	201 03 0 07 777777 		MOVEI	EXP2,-1(RES)
	400106'	270 03 0 00 000001 		ADD	EXP2,R1
	400107'	251 02 0 03 000000 		BLT	EXP1,0(EXP2)
	400110'	201 01 0 07 000001 	NEWRET:	MOVEI	R1,1(RES)	; ADVANCE TO POINT TO DATA AREA
						IFN	DEBUG	<MOVEI  BLK,-1(EXP1)
								 PUSHJ TOP,TELBLK>
						$RESTORE REGSAVE,2,7^
	400111'	120 02 0 14 000003 		dmove	$first,REGSAVE^.REGSAVE(psa)^
	400112'	120 04 0 14 000005 		dmove	$first+2,2+REGSAVE^.REGSAVE(psa)^
	400113'	120 06 0 14 000007 		dmove	$first+4,4+REGSAVE>>>>^^.REGSAVE(psa)^
	400114'	200 00 0 14 000011 		MOVE	R0,DESTREG	^.DESTREG(psa)^; where to put it
	400115'	200 14 0 14 000012 		MOVE	PSA,PSASAVE^.PSASAVE(psa)^
	400116'	202 01 1 00 000000 		MOVEM	R1,@R0		; put it there, bud
	400117'	263 17 0 00 000000 		POPJ	TOP,		; RETURN FROM NEW
					;
					;     REST OF EXACT RANGE SIZE METHODS.  TRY EACH IN TURN. IF THEY
					;     FAIL, THEY WILL RETURN; OTHERWISE, THEY JUMP TO DONE.
					;
	400120'	260 17 0 00 400153'	ESRCH:	PUSHJ	TOP,TAILA	; ALLOCATE OFF THE TAIL
	400121'	260 17 0 00 400202'		PUSHJ	TOP,SPLIT	; TRY SPLITING BIGGER EXACT RANGE BLOCKS
	400122'	260 17 0 00 400163'		PUSHJ	TOP,GROWT	; CALL MONITOR TO EXTEND TAIL
	400123'	260 17 0 00 400231'		PUSHJ	TOP,MISCA	; TRY SPLITTING BLOCKS ABOVE RANGE
	400124'	352 00 0 14 000001 		AOSE	PASS	^.PASS(psa)^	; IF FIRST PASS, TRY COLLAPSE
QUICKFIT	MACRO %53A(1155) 17:35  4-Oct-82 Page 1-5
MMQFIT	MAC	28-May-71 21:33	

	400125'	254 00 0 00 400130'		JRST	HFL.AC		; IF SECOND, GIVE UP
	400126'	260 17 0 00 400242'		PUSHJ	TOP,COLLPS
	400127'	254 00 0 00 400065'		JRST	EXACT

	400130'				HFL.AC:	
	400130'	200 00 0 17 000000 		MOVE	R0,0(TOP)
						$RTERROR ($EXSTO,$NONE)^
	400131'	201 01 0 00 010000 		movei	r1,$errcode($EXSTO,$NONE,$false)^$EXSTO*2000+$false*1000+$NONE^^
	400132'	254 00 0 00 400034*		jrst	rt.err^
					;
					;     ALLOCATE A BLOCK BELOW THE EXACT RANGE.  TRY FINDING A BLOCK
					;     IN SLOT 0, THEN GETTING SOMETHING FROM THE TAIL, THEN SPLITING
					;     EXACT RANGE AND LARGER BLOCKS.
					;
	400133'	260 17 0 00 400233'	BELOW:	PUSHJ	TOP,MISCB	; SEARCH SMALL BLOCKS
	400134'	260 17 0 00 400153'		PUSHJ	TOP,TAILA	; GET FROM TAIL
	400135'	260 17 0 00 400202'		PUSHJ	TOP,SPLIT	; SPLIT ER BLOCKS
	400136'	260 17 0 00 400163'		PUSHJ	TOP,GROWT	; EXTEND TAIL
	400137'	260 17 0 00 400231'		PUSHJ	TOP,MISCA	; TRY BIG BLOCKS
	400140'	352 00 0 14 000001 		AOSE	PASS	^.PASS(psa)^	; TRY COLLAPSE IF FIRST PASS
	400141'	254 00 0 00 400130'		JRST	HFL.AC
	400142'	260 17 0 00 400242'		PUSHJ	TOP,COLLPS
	400143'	254 00 0 00 400133'		JRST	BELOW
					;
					;     ALLOCATE A BLOCK ABOVE THE EXACT RANGE.  SEE IF THERE IS ONE
					;     ON THE SLOT (ERSIZE+1) LIST, OTHERWISE TRY THE TAIL.
					;
	400144'	260 17 0 00 400231'	ABOVE:	PUSHJ	TOP,MISCA
	400145'	260 17 0 00 400153'		PUSHJ	TOP,TAILA
	400146'	260 17 0 00 400163'		PUSHJ	TOP,GROWT
	400147'	352 00 0 14 000001 		AOSE	PASS	^.PASS(psa)^	; TRY COLLAPSE IF FIRST PASS
	400150'	254 00 0 00 400130'		JRST	HFL.AC
	400151'	260 17 0 00 400242'		PUSHJ	TOP,COLLPS
	400152'	254 00 0 00 400144'		JRST	ABOVE

					;
					;     SUBROUTINE TO ALLOCATE FROM TAIL.  CHECK IF DESIRED BLOCK SIZE
					;     STAYS WITHIN ALLOCATED LOW SEGMENT SIZE.
					;
	400153'	201 07 1 03 000001 	TAILA:	MOVEI	RES,@TAIL(HEAP)	; GET PTR TO TAIL
QUICKFIT	MACRO %53A(1155) 17:35  4-Oct-82 Page 1-6
MMQFIT	MAC	28-May-71 21:33	

	400154'	200 05 0 00 000007 		MOVE	T,RES		; SET T TO NEW TAIL PR
	400155'	270 05 0 00 000002 		ADD	T,CNT
	400156'	313 05 0 00 000000*		CAMLE	T,.JBREL##	; CHECK IF EXCEEDS LOW SEG SIZE
	400157'	263 17 0 00 000000 		POPJ	TOP,		; TOO BIG, RETURN
	400160'	202 05 0 03 000001 		MOVEM	T,TAIL(HEAP)	; OKAY, UPDATE TAIL PTR
	400161'	212 02 0 07 000000 		MOVNM	CNT,ASIZE(RES)	; MARK BLOCK AS ALLOCATED
	400162'	254 00 0 00 400076'		JRST	DONE
					;
					;     SUBROUTINE TO GROW TAIL.  CHECKS IF GROWTH WOULD EXCEED MAX
					;     CORE AVAILABLE TO USER; IF OKAY, EXTENDS LOW SEGMENT.
					;
	400163'	353 00 0 14 000002 	GROWT:	AOSLE	TCNT	^.TCNT(psa)^	; ALLOW COLLAPSE EVERY MXCNT TIMES
	400164'	254 00 0 00 400177'		JRST	NOGROW
	400165'	201 07 1 03 000001 		MOVEI	RES,@TAIL(HEAP)	; GET PTR TO TAIL
	400166'	200 05 0 00 000007 		MOVE	T,RES		; SET T TO NEW END
	400167'	270 05 0 00 000002 		ADD	T,CNT
	400170'	200 06 0 00 000005 		MOVE	R,T		; REMEMBER NEW TAIL
	400171'	552 05 0 00 400000*		HRRZM	T,.JBFF##	;SAVE NEW TOP OF THE WORLD
	400172'	047 05 0 00 000011 		CORE	T,		; TRY TO EXTEND
	400173'	263 17 0 00 000000 	SPLTFL:	POPJ	TOP,		; EXTENDING FAILS
	400174'	202 06 0 03 000001 		MOVEM	R,TAIL(HEAP)	; ADVANCE TAIL PTR
	400175'	212 02 0 07 000000 		MOVNM	CNT,ASIZE(RES)	; MARK BLOCK AS ALLOCATED
	400176'	254 00 0 00 400076'		JRST	DONE

	400177'	211 05 0 00 000004 	NOGROW:	MOVNI	T,MXTCNT	; RESET COUNTER
	400200'	202 05 0 14 000002 		MOVEM	T,TCNT^.TCNT(psa)^
	400201'	263 17 0 00 000000 		POPJ	TOP,		; RETURN HAVING DONE NOTHING
					;
					;     SUBROUTINE TO SPLIT EXACT RANGE BLOCKS.  SEARCHES LIST IN SLOTS FOR
					;     SIZES GREATER THAN THAT REQUIRED.  IF A BLOCK IS FOUND, IT IS
					;     SPLIT AND THE REMAINDER FREED.
					;
	400202'	211 05 0 00 000020 	SPLIT:	MOVNI	T,ERSIZE	; BUILD SEARCH CONTROL WORD
	400203'	270 05 0 00 000004 		ADD	T,SLOT		; LEFT: - (ERSIZE - (SLOT+1) + 1)
	400204'	515 05 0 05 000000 		HRLZI	T,0(T)		; MOVE TO LEFT HALF
	400205'	541 05 0 03 000000 		HRRI	T,0(HEAP)	; RIGHT: SLOT(HEAP)
	400206'	270 05 0 00 000004 		ADD	T,SLOT
	400207'	252 05 0 00 400173'		AOBJP	T,SPLTFL	; RETURN IF END OF SEARCH
	400210'	201 07 1 05 000002 		MOVEI	RES,@FLIST(T)	; GET FREE LIST PTR
	400211'	322 07 0 00 400207'		JUMPE	RES,.-2		; EXIT IF NONNULL LIST FOUND
QUICKFIT	MACRO %53A(1155) 17:35  4-Oct-82 Page 1-7
MMQFIT	MAC	28-May-71 21:33	


	400212'	200 01 0 00 000007 	SPLTDO:	MOVE	BLK,RES		; UNCHAIN THE BLOCK
	400213'	260 17 0 00 400276'		PUSHJ	TOP,UNCHN

	400214'	200 06 0 07 000001 		MOVE	R,FSIZE(RES)	; GET SIZE OF BLOCK FOUND
	400215'	274 06 0 00 000002 		SUB	R,CNT		; SEE IF REM TOO SMALL
	400216'	303 06 0 00 000001 		CAILE	R,SMALL
	400217'	254 00 0 00 400223'		JRST	SPLTOK		; LEFT OVER WEENABLE

	400220'	200 06 0 07 000001 		MOVE	R,FSIZE(RES)	; LEFT OVER TOO SMALL
	400221'	212 06 0 07 000000 		MOVNM	R,ASIZE(RES)	; MARK AS ALLOCATED WITH UNSPLIT COUNT
	400222'	254 00 0 00 400076'		JRST	DONE

	400223'	212 02 0 07 000000 	SPLTOK:	MOVNM	CNT,ASIZE(RES)	; MARK AS ALLOCATED WITH SPLIT COUNT
	400224'	201 01 0 07 000000 		MOVEI	BLK,0(RES)	; SET T TO PORTION TO BE SPLIT
	400225'	270 01 0 00 000002 		ADD	BLK,CNT

	400226'	200 02 0 00 000006 		MOVE	CNT,R		; GET SIZE OF SPLIT BLOCK
	400227'	260 17 0 00 400347'		PUSHJ	TOP,FREE	; FREE IT
	400230'	254 00 0 00 400076'		JRST	DONE
					;
					;     SUBROUTINES TO SEARCH SLOT(0) AND SLOT(ERSIZE+1) LISTS FOR
					;     BLOCK LARGE ENOUGH TO HOLD CNT WORDS.  IF FOUND, REMAINDER
					;     IS SPLIT OFF AND FREED.
					;
	400231'	201 07 0 03 000023 	MISCA:	MOVEI	RES,FLIST+ERSIZE+1(HEAP)   ; PTR TO FREELIST SLOT TO SEARCH
	400232'	254 00 0 00 400234'		JRST	.+2
	400233'	201 07 0 03 000002 	MISCB:	MOVEI	RES,FLIST+0(HEAP)	; SLOT(0) SEARCH

	400234'	550 07 0 07 000000 	MSRCH:	HRRZ	RES,FNEXT(RES)	; ADVANCE TO NEXT SLOT
	400235'	326 07 0 00 400237'		JUMPN	RES,.+2		; IF ONE EXSISTS
	400236'	263 17 0 00 000000 		POPJ	TOP,
	400237'	317 02 0 07 000001 		CAMG	CNT,FSIZE(RES)	; SEE IF BLOCK LARGE ENOUGH
	400240'	254 00 0 00 400212'		JRST	SPLTDO
	400241'	254 00 0 00 400234'		JRST	MSRCH		; CONTINUE WITH NEXT
					;
					;     SUBROUTINE TO COLLAPSE ADJACENT BLOCKS OF FREE STORAGE. IN CODE
					;     BLK POINTS TO CURRENT BLOCK, NB TO NEXT BLOCK.
					;
	400242'	261 17 0 00 000002 	COLLPS:	PUSH	TOP,CNT	; SAVE CNT OF BLOCK BEING ALLOCATED
QUICKFIT	MACRO %53A(1155) 17:35  4-Oct-82 Page 1-8
MMQFIT	MAC	28-May-71 21:33	

	400243'	261 17 0 00 000004 		PUSH	TOP,SLOT	; AND SLOT NUMBER
	400244'	201 07 0 03 000024 		MOVEI	NB,HSIZE(HEAP)	; GET PTR TO FIRST BLOCK
	400245'	200 01 0 00 000007 	CLLOOP:	MOVE	BLK,NB		; MOVE TO NEXT BLOCK
	400246'	311 01 0 03 000001 		CAML	BLK,TAIL(HEAP)	; SEE IF BLOCK IS OUT OF RANGE
	400247'	254 00 0 00 400273'		JRST	CLRET		; ALL DONE
	400250'	210 02 0 01 000000 		MOVN	CNT,ASIZE(BLK)	; IF SIZE NEG, THEN BLOCK FREE
	400251'	321 02 0 00 400254'		JUMPL	CNT,CLFREE	; BLK IS FREE, TRY TO COLLAPSE
	400252'	270 07 0 00 000002 		ADD	NB,CNT		; GET ADDRESS OF NEXT BLOCK
	400253'	254 00 0 00 400245'		JRST	CLLOOP

									; HERE, NB EQUALS BLK
	400254'	270 07 0 01 000001 	CLFREE:	ADD	NB,FSIZE(BLK)	; GET ADDRESS OF NEXT
	400255'	311 07 0 03 000001 		CAML	NB,TAIL(HEAP)	; SEE IF NEXT IS REALLY END
	400256'	254 00 0 00 400271'		JRST	CLTAIL
	400257'	210 06 0 07 000000 		MOVN	R,ASIZE(NB)	; TEST IF NEXT IS FREE
	400260'	325 06 0 00 400245'		JUMPGE	R,CLLOOP	; IN USE, CONTINUE

	400261'	260 17 0 00 400276'		PUSHJ	TOP,UNCHN	; UNCHAIN BLK
	400262'	200 02 0 01 000001 		MOVE	CNT,FSIZE(BLK)	; GET SIZE OF COMBINED BLOCK
	400263'	270 02 0 07 000001 		ADD	CNT,FSIZE(NB)
	400264'	260 17 0 00 400347'		PUSHJ	TOP,FREE	; ADD CREATED BLOCK TO CHAIN
	400265'	250 01 0 00 000007 		EXCH	BLK,NB		; UNCHAIN SECOND PART
	400266'	260 17 0 00 400276'		PUSHJ	TOP,UNCHN
	400267'	200 01 0 00 000007 		MOVE	BLK,NB		; RESTORE BLK POINTER
	400270'	254 00 0 00 400254'		JRST	CLFREE

	400271'	260 17 0 00 400276'	CLTAIL:	PUSHJ	TOP,UNCHN	; REMOVE THE BLK
	400272'	202 01 0 03 000001 		MOVEM	BLK,TAIL(HEAP)	; RESET THE TAIL POINTER
	400273'	262 17 0 00 000004 	CLRET:	POP	TOP,SLOT	; RESTORE SLOT NO. OF BLOCK BEING ALLOC'ED
	400274'	262 17 0 00 000002 		POP	TOP,CNT	; AND CNT
	400275'	263 17 0 00 000000 		POPJ	TOP,

					;
					;     SUBROUTINE TO UNCHAIN A BLOCK, ENTERED WITH BLK POINTING
					;     TO BLOCK TO UNCHAIN
					;
	400276'	554 05 0 01 000000 	UNCHN:	HLRZ	T,FPREV(BLK)	; GET PTR TO PREVIOUS BLOCK
	400277'	550 06 0 01 000000RZ	R,FNEXT(BLK)	; GET PTR TO NEXT BLOCK
	400300'	322 06 0 00 400302'		JUMPE	R,.+2		; IF NEXT NONNULL, SET NEXT.PREV = BLK.PREV
	400301'	506 05 0 06 000000 		HRLM	T,FPREV(R)
QUICKFIT	MACRO %53A(1155) 17:35  4-Oct-82 Page 1-9
MMQFIT	MAC	28-May-71 21:33	

	400302'	542 06 0 05 000000 		HRRM	R,FNEXT(T)	; FLIST (SLOT) OR PREV.NEXT = BLK.NEXT
	400303'	263 17 0 00 000000 		POPJ	TOP,
					;
					;     DISPOSE -- OPERATOR TO FREE AN ALLOCATED BLOCK.  CHECKS THAT
					;     BLOCK IS IN FACT ALLOCATED AND THAT BLOCK IS IN RANGE.
					;     RETURNS A NIL PTR FOR NIL'ING PTR VAR DISPOSED.
					;
	400304'				DSPOS.:
	400304'	350 01 0 17 000000 		AOS	R1,0(TOP)
	400305'	201 00 1 01 777777 		MOVEI	R0,@-1(R1)	; EA is addr of record to dispose
	400306'	200 01 0 00 000014 		MOVE	R1,PSA
						$GETPSA	QFIT^
	400307'	200 14 0 15 000017 		move	psa,$QFIT(pda)^
	400310'	202 01 0 14 000012 		MOVEM	R1,PSASAVE^.PSASAVE(psa)^
						$SAVE	REGSAVE,2,7^
	400311'	124 02 0 14 000003 		dmovem	$first,REGSAVE^.REGSAVE(psa)^
	400312'	124 04 0 14 000005 		dmovem	$first+2,2+REGSAVE^.REGSAVE(psa)^
	400313'	124 06 0 14 000007 		dmovem	$first+4,4+REGSAVE>>>>^^.REGSAVE(psa)^
	400314'	200 02 0 00 000000 		MOVE	EXP1,R0		; put in right place
	400315'	201 01 0 02 777777 		MOVEI	BLK,-1(EXP1)	; POINT AT BLOCK DESC WORD
						IFN	DEBUG	<PUSHJ TOP,TELBLK>
	400316'	201 03 1 14 000000 		MOVEI	HEAP,@CHEAP	^.CHEAP(psa)^; GET PTR TO HEAP
	400317'	322 03 0 00 400341'		JUMPE	HEAP,DISERR	; IF NOT INIT'ED, PTR MUST BE BAD
	400320'	311 01 0 03 000001 		CAML	BLK,TAIL(HEAP)	; CHECK THAT PTR IS NOT PAST END OF HEAP
	400321'	254 00 0 00 400341'		JRST	DISERR
	400322'	305 01 0 03 000024 	DISCHK:	CAIGE	BLK,HSIZE(HEAP)	; CHECK IF BLK IN THIS HEAP
	400323'	254 00 0 00 400335'		JRST	DISPOP		; NO, CHECK FOR PREVIOUS
	400324'	210 02 0 01 000000 		MOVN	CNT,ASIZE(BLK)	; MOVE NEG. ALLOCATED COUNT
	400325'	321 02 0 00 400344'		JUMPL	CNT,EFALLOC	; IF THIS IS NEG., BLOCK WAS FREE
	400326'	260 17 0 00 400347'		PUSHJ	TOP,FREE
	400327'	201 01 0 00 377777 		MOVEI	BLK,377777	; LOAD NIL PTR, TO BE STORED INTO PTR
						$RESTORE REGSAVE,2,7^
	400330'	120 02 0 14 000003 		dmove	$first,REGSAVE^.REGSAVE(psa)^
	400331'	120 04 0 14 000005 		dmove	$first+2,2+REGSAVE^.REGSAVE(psa)^
	400332'	120 06 0 14 000007 		dmove	$first+4,4+REGSAVE>>>>^^.REGSAVE(psa)^
	400333'	200 14 0 14 000012 		MOVE	PSA,PSASAVE^.PSASAVE(psa)^
	400334'	263 17 0 00 000000 		POPJ	TOP,

	400335'	301 01 0 03 000000 	DISPOP:	CAIL	BLK,0(HEAP)	; MAKE SURE NOT IN HEADER
	400336'	254 00 0 00 400341'		JRST	DISERR
QUICKFIT	MACRO %53A(1155) 17:35  4-Oct-82 Page 1-10
MMQFIT	MAC	28-May-71 21:33	

	400337'	201 03 1 03 000000 		MOVEI	HEAP,@LHEAP(HEAP)	; CHECK PREVIOUS FRAME
	400340'	326 03 0 00 400322'		JUMPN	HEAP,DISCHK
	400341'				DISERR:	
	400341'	200 00 0 17 000000 		MOVE	R0,0(TOP)
						$RTERROR ($EXSPC,$SPCBP)^
	400342'	201 01 0 00 014004 		movei	r1,$errcode($EXSPC,$SPCBP,$false)^$EXSPC*2000+$false*1000+$SPCBP^^
	400343'	254 00 0 00 400132*		jrst	rt.err^

	400344'				EFALLOC:
	400344'	200 00 0 17 000000 		MOVE	R0,0(TOP)
						$RTERROR ($EXSPC,$SPCFF)^
	400345'	201 01 0 00 014005 		movei	r1,$errcode($EXSPC,$SPCFF,$false)^$EXSPC*2000+$false*1000+$SPCFF^^
	400346'	254 00 0 00 400343*		jrst	rt.err^
					;
					;     SUBROUTINE TO FREE A BLOCK.  ENTERED WITH BLK POINTING
					;     TO BLOCK DESC WORD, AND SIZE IN CNT.
					;
	400347'	260 17 0 00 400020'	FREE:	PUSHJ	TOP,CSLOT	; GET SLOT INDEX FOR THIS SIZE BLOCK
	400350'	201 05 0 03 000002 		MOVEI	T,FLIST(HEAP)	; SET T TO POINT AT FLIST SLOT
	400351'	270 05 0 00 000004 		ADD	T,SLOT
	400352'	201 06 1 05 000000 		MOVEI	R,@0(T)		; SET R TO ADDR OF FIRST FREE
	400353'	202 02 0 01 000001 		MOVEM	CNT,FSIZE(BLK)	; SAVE SIZE OF BLOCK
	400354'	552 06 0 01 000000 		HRRZM	R,FNEXT(BLK)	; BLK.NEXT = FLIST(SLOT)
	400355'	506 05 0 01 000000 		HRLM	T,FPREV(BLK)	; BLK.PREV = ADDR (FLIST (SLOT))
	400356'	322 06 0 00 400360'		JUMPE	R,.+2		; SKIP IF THERE IS NO NEXT
	400357'	506 01 0 06 000000 		HRLM	BLK,FPREV(R)	; NEXT.PREV = BLK
	400360'	202 01 0 05 000000 		MOVEM	BLK,0(T)	; SET SLOT TO POINT TO THIS BLOCK
	400361'	263 17 0 00 000000 		POPJ	TOP,

					;
					;     MARK -- OPERATOR TO PUSH A HEAP FRAME.  INITIALIZES A NEW HEAP
					;     HEADER AND UPDATES CURRENT HEAP PTR.
					;
	400362'				MARK.:
	400362'	200 01 0 00 000014 		MOVE	R1,PSA
						$GETPSA	QFIT^
	400363'	200 14 0 15 000017 		move	psa,$QFIT(pda)^
	400364'	202 01 0 14 000012 		MOVEM	R1,PSASAVE^.PSASAVE(psa)^
						$SAVE	REGSAVE,3,7^
	400365'	124 03 0 14 000003 		dmovem	$first,REGSAVE^.REGSAVE(psa)^
QUICKFIT	MACRO %53A(1155) 17:35  4-Oct-82 Page 1-11
MMQFIT	MAC	28-May-71 21:33	

	400366'	124 05 0 14 000005 		dmovem	$first+2,2+REGSAVE^.REGSAVE(psa)^
	400367'	202 07 0 14 000007 		movem	$first+4,4+REGSAVE>^.REGSAVE(psa)^
	400370'	260 17 0 00 400000'		PUSHJ	TOP,INIT
	400371'	202 03 0 00 000002 		MOVEM	HEAP,HP		; SAVE PTR TO OLD (CURRENT) HEAP
						IFN	DEBUG	<PUSHJ TOP,TELMAR>
	400372'	201 03 1 03 000001 		MOVEI	HEAP,@TAIL(HEAP)	; PUT NEW (NEXT) FRAME AT TAIL OF OLD
	400373'	260 17 0 00 400003'		PUSHJ	TOP,NEWHP	; INITIALIZE
						$RESTORE REGSAVE,3,7^
	400374'	120 03 0 14 000003 		dmove	$first,REGSAVE^.REGSAVE(psa)^
	400375'	120 05 0 14 000005 		dmove	$first+2,2+REGSAVE^.REGSAVE(psa)^
	400376'	200 07 0 14 000007 		move	$first+4,4+REGSAVE>^.REGSAVE(psa)^
	400377'	200 14 0 14 000012 		MOVE	PSA,PSASAVE^.PSASAVE(psa)^
	400400'	263 17 0 00 000000 		POPJ	TOP,
					;
					;     RELEASE -- OPERATOR TO POP HEAP FRAMES.  TAKES SUPPLIED HEAP
					;     POINTER AND CHECKS THAT IT IS VALID.  THEN RESETS CURRENT
					;     HEAP POINTER TO THAT HEAP.  MORE THAN ONE HEAP CAN BE UNWOUND.
					;
	400401'				RLEAS.:
	400401'	200 01 0 00 000014 		MOVE	R1,PSA
						$GETPSA	QFIT^
	400402'	200 14 0 15 000017 		move	psa,$QFIT(pda)^
	400403'	202 01 0 14 000012 		MOVEM	R1,PSASAVE^.PSASAVE(psa)^
						$SAVE	REGSAVE,3,7^
	400404'	124 03 0 14 000003 		dmovem	$first,REGSAVE^.REGSAVE(psa)^
	400405'	124 05 0 14 000005 		dmovem	$first+2,2+REGSAVE^.REGSAVE(psa)^
	400406'	202 07 0 14 000007 		movem	$first+4,4+REGSAVE>^.REGSAVE(psa)^
	400407'	201 03 1 14 000000 		MOVEI	HEAP,@CHEAP	^.CHEAP(psa)^; BACKWARDS SEARCH FOR CORRECT HEAP
						IFN	DEBUG	<PUSHJ TOP,TELREL>
	400410'	316 02 0 00 000003 		CAMN	HP,HEAP		; CHECK IF THE SAME AS SUPPLIED
	400411'	254 00 0 00 400417'		JRST	RLOK		; HEAP FOUND
	400412'	201 03 1 03 000000 		MOVEI	HEAP,@LHEAP(HEAP)	; CHECK PREVIOUS ONE
	400413'	326 03 0 00 400410'		JUMPN	HEAP,.-3	; TRY AGAIN
	400414'				RLBAD:	
	400414'	200 00 0 17 000000 		MOVE	R0,0(TOP)
						$RTERROR ($EXSPC,$SPCRH)^
	400415'	201 01 0 00 014006 		movei	r1,$errcode($EXSPC,$SPCRH,$false)^$EXSPC*2000+$false*1000+$SPCRH^^
	400416'	254 00 0 00 400346*		jrst	rt.err^
	400417'	202 02 0 14 000000 	RLOK:	MOVEM	HP,CHEAP	^.CHEAP(psa)^; UPDATE CURRENT POINTER
						$RESTORE REGSAVE,3,7^
QUICKFIT	MACRO %53A(1155) 17:35  4-Oct-82 Page 1-12
MMQFIT	MAC	28-May-71 21:33	

	400420'	120 03 0 14 000003 		dmove	$first,REGSAVE^.REGSAVE(psa)^
	400421'	120 05 0 14 000005 		dmove	$first+2,2+REGSAVE^.REGSAVE(psa)^
	400422'	200 07 0 14 000007 		move	$first+4,4+REGSAVE>^.REGSAVE(psa)^
	400423'	200 14 0 14 000012 		MOVE	PSA,PSASAVE^.PSASAVE(psa)^
	400424'	263 17 0 00 000000 		POPJ	TOP,

					;
					;     DEBUGGING OUTPUT ROUTINES
					;
						IFN	DEBUG	<
					TELCNT:	MOVE	R,CNT
						SETZ	T,
						JUMPE	R,TCLOOP
						ROTC	T,3		; REMOVE LEADING ZEROS
						JUMPE	T,.-1
					TCLOOP:	ANDI	T,7
						ADDI	T,060
						OUTCHR	T
						JUMPE	R,TELRET	; END OF NUMBER
						ROTC	T,3		; GET NEXT OCTAL DIGIT
						JRST	TCLOOP
					
					TELBLK:	OUTSTR	[ASCIZ/@/]
						MOVEI	T,6		; LOOP COUNT
						MOVSS	BLK		; ADDR IN RIGHT HALF
					TBLOOP:	ROT	BLK,3		; PUT NEXT OCTAL DIGIT IN BITS 33-35
						MOVE	R,BLK		; TAKE CHAR(BLK)
						ANDI	R,7
						ADDI	R,060
						OUTCHR	R
						SOJG	T,TBLOOP
						OUTSTR	[ASCIZ/	/]	; TAB
					TELRET:	POPJ	TOP,
					
					TELREL:	OUTSTR	[ASCIZ/R/]
						MOVE	BLK,HP
						PUSHJ	TOP,TELBLK
						POPJ	TOP,
					
					TELMAR:	OUTSTR	[ASCIZ/M/]
QUICKFIT	MACRO %53A(1155) 17:35  4-Oct-82 Page 1-13
MMQFIT	MAC	28-May-71 21:33	

						MOVE	BLK,HEAP
						PUSHJ	TOP,TELBLK
						POPJ	TOP,	>

						$END	QFIT,INIT^
						END

NO ERRORS DETECTED

HI-SEG. BREAK IS 400426
PROGRAM BREAK IS 000000
CPU TIME USED 03:35.612

16P CORE USED
QUICKFIT	MACRO %53A(1155) 17:35  4-Oct-82 Page S-1
MMQFIT	MAC	28-May-71 21:33		SYMBOL TABLE

ABOVE		400144'		INIT		400000'		T		000005		
ALC0.		400000'	ent	LHEAP		000000		TAIL		000001		
ASIZE		000000		M4.0		000000	ext	TAILA		400153'		
BELOW		400133'		M6.3		000000	ext	TOP		000017	spd	
BLK		000001		M6.4		000000	ext	TWAIT.		000000	ext	
CLFREE		400254'		M6.5		000000	ext	UNCHN		400276'		
CLLOOP		400245'		M6.6		000000	ext	WRTPC.		000000	ext	
CLRET		400273'		MARK.		400362'	ent	X.QFIT		000000	sin	
CLTAIL		400271'		MAXSZ		000021		$ABSLO		000000	spd	
CNT		000002		MINSZ		000002		$EXSPC		000006	spd	
COLLPS		400242'		MISCA		400231'		$EXSTO		000004	spd	
CORE	047000	000011		MISCB		400233'		$FALSE		000000	spd	
CSHIGH		400030'		MSRCH		400234'		$FIRST		000003	spd	
CSLOT		400020'		MXTCNT		000004		$HILOC		400000	spd	
CSLOW		400026'		NB		000007		$LAST		000007	spd	
DEBUG		000000		NEW.		400035'	ent	$LEN		000004	spd	
DIE.		000000	ext	NEWERR		400032'		$LOC	777777	777777	spd	
DISCHK		400322'		NEWHP		400003'		$LOLOC		000000	spd	
DISERR		400341'		NEWRET		400110'		$MAXLO		000000	spd	
DISPOP		400335'		NOGROW		400177'		$MAXST		000013	spd	
DONE		400076'		P.QFIT		000000	ext	$MAXTE		000001	spd	
DSPOS.		400304'	ent	PDA		000015	spd	$NEEDP		000001	spd	
EFALLO		400344'		PSA		000014	spd	$NONE		000000	spd	
ERSIZE		000020		R		000006		$QFIT		000017	spd	
ESRCH		400120'		R0		000000	spd	$SPCBP		000004	spd	
EX.SET		000000	ext	R1		000001	spd	$SPCFF		000005	spd	
EXACT		400065'		REGIN		000001		$SPCNN		000003	spd	
EXP1		000002	spd	RES		000007		$SPCRH		000006	spd	
EXP2		000003	spd	RLBAD		400414'		$STATS		000000	spd	
FLIST		000002		RLEAS.		400401'	ent	$TRUE		000001	spd	
FNEXT		000000		RLOK		400417'		.CHEAP		000000	spd	
FPREV		000000		RT.ERR		400416'	ext	.DESTR		000011	spd	
FREE		400347'		S.QFIT		000013	sin	.JBFF		400171'	ext	
FSIZE		000001		SF$VFY		000000	ext	.JBREL		400156'	ext	
GROWT		400163'		SLOT		000004		.PASS		000001	spd	
HEAP		000003		SMALL		000001		.PSASA		000012	spd	
HFL.AC		400130'		SPLIT		400202'		.PSATE		000001	spd	
HP		000002		SPLTDO		400212'		.REGSA		000003	spd	
HSIZE		000024		SPLTFL		400173'		.TCNT		000002	spd	
I.QFIT		400000'	sin	SPLTOK		400223'		
    "QC