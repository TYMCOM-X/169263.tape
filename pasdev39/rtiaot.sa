* +--------------------------------------------------------------------+
* |                                                                    |
* |        RTIASCOT - TEXT FILE OUTPUT ASSOCIATION ROUTINES.           |
* |                                                                    |
* +--------------------------------------------------------------------+
*
*  PURPOSE:
*    ASSOCIATE FILE VARIABLES WITH TEXT FILE BLOCKS.
*
*  PASCAL ENTRY POINT:
*
*    T.REWRIT
*      ASSOCIATE TEXT FILE FOR OUTPUT ONLY.  IF FILE DOES NOT EXIST,
*      CREATE IT.  IF FILE DOES EXIST, OVERWRITE IT.
*
*  NOTES:
*    THIS ROUTINE CREATES A FILE BLOCK ON THE HEAP, ALLOCATES
*    AND ASSIGNS IT, AND RETURNS A POINTER TO THE FILE BLOCK.  IF
*    AN ERROR IS DETECTED, THE FILE
*    BLOCK IS DISPOSED, AND A POINTER TO THE OUTPUT DUMMY FILE BLOCK
*    IS RETURNED.  THE ASSOCIATION ROUTINES MAY NEVER SIGNAL AN ERROR.
*
*  CHANGES:
*    (15 DECEMBER, 1981, WNH)  NONE SO FAR.
*    3/11/82 WNH:  CHANGED PARAMETER PUSH FOR REAL I.RNAME, AND INITIALIZED
*                  FILE BLOCK RESOURCE NAME BEFORE CALLING IT.
*    3/15/82 WNH:  CHANGED ORDER OF THINGS TO MAKE ROUTINE WORK WITHOUT TTY
*                  BITS AND TYPE, BUT INSTEAD RECOGNIZE TTY FROM FILE NAME
*                  VOLUME 'CN' OR 'CN<digit><digit>' MATCHING REGISTER A2
*                  AT PROGRAM STARTUP.
*    8/4/82 WNH:  CHANGED TTY ASSOCIATION TO OVERRIDE ASSOCIATION OPTIONS
*                 WITH OPTIONS PASSED IN ON THIS CALL.
*
* +-------------------------------------------------------------------------+
 NOLIST
 INCLUDE 1000..RTDEFS.SA
 INCLUDE 1000..RTIODEFS.SA
 INCLUDE 1000..RTIXREFS.SA
 INCLUDE 1000..RTECODES.SA
 LIST
 M$MODULE RTIASCOT,<TEXT FILE OUTPUT ASSOCIATION ROUTINES>,1,0
 
 XREF H.INEW
 XREF H.IDISPOSE
 XREF I.GETUN
 XREF I.DISPUN
 XREF I.RNAME
 XREF M.INIREG
 PAGE
* T.REWRIT - OPEN A TEXT FILE FOR OUTPUT.
*
* INPUT:
*   BYTES 7 AND 8.  WORD OF THE TYPE ASSOCIATION_FLAGS (SEE 1000..RTIODEFS.SA).
*   BYTES 5 AND 6.  NUMBER OF CHARACTERS IN RESOURCE NAME STRING.
*   BYTES 1 - 4.  ADDRESS OF LEFTMOST CHARACTER OF RESOURCE NAME STRING.
*
* OUTPUT:
*   BYTES 1 - 4.  ADDRESS OF FIRST BYTE IN ASSOCIATED FILE BLOCK.
*
* NOTES:
*   THROUGHOUT T.REWRIT,
*     A0 = ADDRESS OF ASSOCIATION ROUTINE WORK AREA IN STATIC STORAGE.
*
* AUTHOR:
*   W. N. HOPE
 
*****
*
 M$ENTRY T.REWRIT
*
*****
 
 NOFIL: EQU $17              VERSAdos ERROR NUMBER FOR NO SUCH FILE.
 
 M$DEF_LOCALS
 M$LOCAL BLOCKADR,LONG
 
 M$DEF_REGS D0,A0,A2,A3
 
 M$DEF_ARGS
 M$ARG OPTIONS,WORD          ASSIGNMENT OPTIONS PARAMETER
 M$ARG NAMELENG,WORD         RESOURCE NAME LENGTH PARAMETER
 M$ARG NAMEPOIN,LONG         RESOURCE NAME POINTER PARAMETER
 
 M$FRAME
 
 MOVE.W #E_IOOK_IO,IO.STAT(A5)
 CLR.W  IO.XSTAT(A5)
 
 PAGE
 LEA     IO.ASCWK(A5),A0     POINT A0 AT THE STATIC WORK AREA.  BUILD AN FHS
*                            BLOCK AND AN IOS BLOCK IN THE WORK AREA.
 
*                            SET UP FHS BLOCK FOR VERSAdos CALL.
*                            DEVICE/FILE COMMAND.
*                            ASSIGN.
 MOVE.W   #FS.DEV<<8!FS.ASSGN,FS.CODE(A0)
 
*                            CHECK ASSOCIATION OPTIONS FOR "PRESERVE".
 M$TSTBIT IO.PRSRV,OPTIONS,SP,WORD
 IF <NE> THEN.S           PRESERVE WAS THERE.
   MOVE.W   #FS.SEQ!FS.PW!FS.PSEND,FS.OPT(A0)  SEQUENTIAL FILE, POSITION AT
*                                                      END.
 ELSE.S                   PRESERVE WAS NOT THERE.
   MOVE.W   #FS.SEQ!FS.PW,FS.OPT(A0)  SEQ. FILE.
 ENDI
*                               GET A UNIT NUMBER.
 E$MASK
 JSR      I.GETUN
 MOVE.B   (SP)+,D0
 CMP.B    #$FF,D0
 IF <EQ> THEN.S
   MOVE.W IO.LUN,D0
   BRA FAILED
 ENDI
 
 MOVE.B   D0,FS.LUN(A0)      PUT THE UNIT NUMBER INTO THE FHS AND
*                                              IOS BLOCKS.
 MOVE.B   D0,FS.BLKS+1+IS.LUN(A0)
 
 CLR.L    FS.POIN(A0)        CLEAR POINTER FIELD.
 CLR.W    FS.EXT+2(A0)       CLEAR RESERVED AREA.
 CLR.W    FS.RECL(A0)        CLEAR RECORD LENGTH.
 
 MOVE.L   #$20202020,FS.VOLN(A0) SET UP DEFAULT RESOURCE NAME.
 MOVE.W   #$FFFF,FS.USN(A0)
 MOVE.L   #$20202020,FS.CAT(A0)
 MOVE.L   #$20202020,FS.CAT+4(A0)
 MOVE.L   #$20202020,FS.FNAM(A0)
 MOVE.L   #$20202020,FS.FNAM+4(A0)
 MOVE.W   #'SA',FS.EXT(A0)
 
 CLR.W    FS.WRTC(A0)        CLEAR READ AND WRITE PROTECTION CODES.
*                            PARSE FILE NAME STRING
 MOVE.L   NAMEPOIN(SP),-(SP)
 MOVE.W   NAMELENG+4(SP),-(SP)
 MOVE.L   A0,-(SP)
 JSR I.RNAME
 TST.B (SP)+
 IF <NE> THEN.S
*                            MARK UNIT AVAILABLE.
   MOVE.B  FS.LUN(A0),-(SP)
   JSR     I.DISPUN
 
   MOVE.W #IO.RNAME,D0
   BRA FAILED
 ENDI
 PAGE
 MOVE.L FS.VOLN(A0),D0
 CMP.L #'CN  ',D0
 IF <EQ> OR.L M.INIREG+34(A5) <EQ> D0 THEN.S
*                            USER WANTS THE TERMINAL.
*                            MARK UNIT AVAILABLE.
   MOVE.B  FS.LUN(A0),-(SP)
   JSR     I.DISPUN
 
   LEA IO.TTYOT(A5),A0
   MOVE.L A0,BLOCKADR(SP)
 
   MOVE.W OPTIONS(SP),D0
   OR.B D0,FB.AFLAG(A0)
 ELSE
*                              CALL VERSAdos.
   XDEF OPNOTFHS               HANDY FOR DEBUGGING.
   OPNOTFHS: EQU *
   I$FHSCAL
 
*        ALL FHS CALLS LEAVE FHS STATUS IN D0.  THE LOW ORDER BYTE IS THE FHS
*        ERROR CODE.
 
   IF <NE> THEN.S
     CMP.B #NOFIL,D0
     BNE FAILED                   LEGITIMATE ERROR.
 
*                                 FILE WASN'T THERE.
     MOVE.B #FS.ALLOC!FS.ASSGN,FS.CMND(A0)  ALLOCATE AND ASSIGN ONE.
     I$FHSCAL
     BNE FAILED
 
   ELSE.S                          NO ERROR.  FILE WAS THERE.
     M$TSTBIT IO.PRSRV,OPTIONS,SP,WORD
     IF <EQ> THEN.S                IT SHOULDN'T HAVE BEEN.
       MOVE.B #FS.CLOSE!FS.DEL,FS.CMND(A0)   DELETE IT.
       I$FHSCAL
       BNE FAILED
 
       CLR.L    FS.POIN(A0)                   CLEAR POINTER FIELD.
       CLR.W    FS.RECL(A0)                   CLEAR RECORD LENGTH.
       MOVE.B #FS.ALLOC!FS.ASSGN,FS.CMND(A0)  ALLOCATE AND ASSIGN ONE.
       I$FHSCAL
       BNE.S FAILED
     ENDI
   ENDI
 
*                              NEW UP A FILE BLOCK.
   MOVE.L   #FB.TSIZE,-(SP)
   JSR      H.INEW
   MOVE.L   (SP)+,A2           POINT A2 TO IT.
 
   MOVE.L   A2,BLOCKADR(SP)    PUT ITS ADDRESS IN THE LOCAL VARIABLE.
   MOVE.W   OPTIONS(SP),FB.AFLAG(A2) PUT ASSOCIATION OPTIONS IN THE
*                                                FILE BLOCK.
   MOVE.W  #E_IOOK_IO,FB.STAT(A2)
 
*                              ADD THIS TO THE LIST OF FILE BLOCKS.
   MOVE.L  IO.IDUMY+FB.FLINK(A5),D0  D0 HAS ADDRESS OF NEXT BLOCK, AND,
*                                    IF IT IS NILF, THE CONDITION CODE
*                                    Z BIT IS SET.
   MOVE.L  D0,A3                 A3 HAS THE ADDRESS OF THE NEXT BLOCK, AND
*                                    THE CONDITION CODES HAVE NOT CHANGED.
   IF <NE> THEN.S
     MOVE.L  A2,FB.BLINK(A3)     NEXT BLOCK BLINK HAS OUR ADDRESS.
   ENDI
   MOVE.L  A3,FB.FLINK(A2)     OUR FLINK HAS ADDRESS OF NEXT BLOCK.
 
   LEA     IO.IDUMY(A5),A3     A3 HAS ADDRESS OF INPUT DUMMY BLOCK.
   MOVE.L  A3,FB.BLINK(A2)     OUR BLINK HAS ADDRESS OF INPUT DUMMY BLOC
   MOVE.L  A2,FB.FLINK(A3)     INPUT DUMMY BLOCK FLINK HAS OUR ADDRESS.
 
*                              SET EOF BIT IN INTERNAL FLAGS.
   MOVE.W #1<<IO.EOF,FB.IFLAG(A2)
 
*                              MOVE THE FHS AND IOS BLOCKS IN THE STATIC
*                              WORK AREA TO THE FILE BLOCK.
   MOVE.L A2,A3
   ADD.L #FB.FHS,A3            A3 POINTS TO FHS BLOCK IN MDSI FILE
*                                                BLOCK.
   MOVE.B #FS.BLKS+1+IS.COMP+4,D0
   REPEAT
     MOVE.L (A0)+,(A3)+
     SUB.B #4,D0
   UNTIL <EQ>
*                              SET UP OPTION WORD IN IOS BLOCK.
   MOVE.W #IS.NXT,FB.IOS+IS.OPT(A2)
*                              CLEAR RESERVED WORD AFTER LUN IN IOS BLOCK.
   CLR.W FB.IOS+IS.LUN+1(A2)
*                              POINT CURRENT RECORD NUMBER IN IOS BLOCK
*                                        TO ZERO.
   CLR.L FB.IOS+IS.RECN(A2)
*                              POINT TO START OF BUFFER IN IOS BLOCK.
   LEA    FB.TBUF(A2),A0
   MOVE.L A0,FB.IOS+IS.BUFS(A2)
*                              POINT CUREL TO FILE BUFFER.
   MOVE.L A2,FB.CUREL(A2)
   ADD.L  #FB.TSPAC,FB.CUREL(A2)
 
   CLR.L FB.CURSR(A2)          CURSOR IS NOW 0.
 
   MOVE.W  #IO.VALID,FB.VALID(A2)
 ENDI END "USER WANTS TERMINAL" IF
 BRA.S ALLDONE
 
*****
*
 FAILED: EQU *
*
*****
*                            RETURN POINTER TO OUTPUT DUMMY BLOCK.
 LEA     IO.ODUMY(A5),A0
 MOVE.L  A0,BLOCKADR(SP)
*                            MARK FHS RESULT IN STATIC STORAGE.
 MOVE.W  D0,IO.XSTAT(A5)
*                            MARK MDSI IO_STATUS IN GLOBAL STORAGE.
 MOVE.W  #E_OPNF_IO,IO.STAT(A5)
 
*****
*
 ALLDONE: EQU *
*
*****
 
 E$UNMASK
 M$UNFRAME BLOCKADR(SP),LONG
 M$EXIT
 END
    