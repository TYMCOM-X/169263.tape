#document(M680000 Project - SMK,<:February 3, 1982:>,45,,100)
$POSITIONS +0,+4,+4,+4,+4,+4
#SECT_DEFAULT(66,0,3,1,2,1)
#define(#com1,)
#define(#com2,)
#define(#com3,)
#define(#com4,)
#NAME(KENNEDY)
#com1(Intro to the M68000 and RDLIB)&
#task(Intro to the M68000 and RDLIB)&
At  the present I can not put much detail into my schedule as to the 
specific tasks I will have. For the near future the following
items are topics in which I will be involved:
#beginitem()
#item()Learning about the current RDLIB routines on both the DEC10
and the VAX;
#item()Finding out which RDLIB routines ANC uses;
#item()Learning the M68000 Assembler;
#item()Studying the relevant M68000 Spec documents;
#item()Determining a priority (or order) for working on the 
RDLIB routines that will be needed, and expand this schedule
in accordance with the determined order.
#enditem
#schedule(11/30/81,1/4/82,1)
#actual(11/30/81,1/4/82)
#progress(1/4/82)
#beginitem(,1,,0)
#item()The available documentation on RDLIB has been read.
#item()It will most likely be more efficient for us to come up with
our own list of routines we know ANC uses and present this list to ANC
for review and modification.
There are some (perhaps many) items that will have to be discussed
with ANC to determine what they "need" and what will
be possible to provide.
#item()I have read and gone over both the M68000 16-Bit Microprocessor
User's Manual and the Resident Structured Assembler Reference Manual.
#item()I have read the M68000 design documents that have been
distributed and have a general understanding of them.
#item()Once we come up with our list of RDLIB routines for ANC 
a more specific schedule for studying, coding, implementing, and
testing these routines will be determined.
#enditem
#com1(RDLIB Development Procedure)&
#task(RDLIB Development Procedure)&
I plan to draw up a procedure that will be used in investigating,
documenting (for both the M68000 RDLIB User Documentation and Program
Notebook Documentation), coding, and testing
of individual RDLIB routines.
This is being done so that a standard procedure exists in the 
development process, with the goals being consistancy in 
RDLIB development.
#schedule(1/5/82,1/6/82,1)
#actual(1/5/82,1/5/82)
#progress(1/5/82)The procedure has been put together and SCRMAC input
can be found in (PASDEV32)M68PRO.PMF.
A copy will be given to SMR and PJP.
#com1(Outline RDLIB)&
#task(Outline RDLIB)&
This task will involve putting together a document
which lists the RDLIB routines to be
implemented on the M68000, and a brief description of each
routine. Included in the description will be an indication of
the language that was used to code the corresponding routine on the VAX,
whether the routine is system dependent, and if the routine can be
coded as previously speced, or if some part of the spec needs to be
defined.
Also included in the same document will be a list of issues that will
have to be discussed with ANC to determine their needs, and determine
whether we can meet those needs directly, through some viable 
alternative, or not at all.
#schedule(1/5/82,1/8/82,1)
#schedule(1/12/82,1/15/82)
#actual(1/12/82,1/14/82)
#progress(1/12/82)
I was absent from work due to illness and severe weather conditions from
1/6\thru\1/11, as a result this task was rescheduled as shown above.
#progress(1/14/82)The document has been completed and
a copy was given to SMR and PJP.
SCRMAC input can be found in (PASDEV32)M68DOC.PMF.
#com1(Standard Macros)&
#task(Standard Macros)&
Macros used in assembly coding
are needed to insure that the standard sequences as
described in the Runtime Specification are followed.
This will also make it convenient if for some reason
any of the standard sequences have to be changed.
#schedule(1/15/82,1/25/82,1)
#actual(1/14/82,1/22/82)
#progress
(1/22/82)The macros to be used in the assembly language coding of
RDLIB subroutines have been written and put in the file
1002..RDLIBMAC.SA.
The actual work involved was less than originally
expected (accounting for being ahead of schedule).
Once I understood how the the entry and exit sequences
are handled by the compiler the writting of the macros
was rather easy.
Also, I waited until all the macros were written before I entered
the code, thus all the sub-tasks below were completed on the 
same day. (Friday 1/22/82).
#progress(1/27/82)
A number of bugs were found in the macros once we started
 assembling\-\those  bugs have been fixed.
In addition, I have added a number of other macros besides the three
macros listed below.
Added to the macro file are the following new macros:
#beginitem(13,1)
#item(RD$ADD_BLANK)
this macro is used by RD$PGM_BLK to pad the end of filenames
less than six characters out to six characters.
#item(RD$PGM_BLK)
this macro sets up the program block for the module (file).
#item(RD$MODULE)
this macro sets up the beginning of the module with
a standard sequence of assembler directives and also
sets up some convenient symbols. 
#enditem
#beginlevel
#com2(Entry Sequence Macro)&
#task(Entry Sequence Macro)&
Write  an entry sequence macro that conforms to the standard
 entry sequence  as stated in the M68000 Runtime Standard.
#schedule(1/18/82,1/20/82,1)
#actual(1/18/82,1/22/82)
#progress(1/22/82)Completed.
#com2(Exit Sequence Macro)&
#task(Exit Sequence Macro)&
Write  an exit sequence macro that conforns to the standard exit
 sequence  as stated in the M68000 Runtime Standard.
#schedule(1/19/82,1/21/82,1)
#actual(1/19/82,1/22/82)
#progress(1/22/82)Completed.
#com2(Procedure Block Macro)&
#task(Procedure Block Macro)&
Write  a macro to be the standard sequence of commands
 to set up the procedure block.
#schedule(1/21/82,1/25/82,1)
#actual(1/21/82,1/22/82)
#progress(1/22/82)Completed.
#endlevel
#com1(Scheduling RDLIB Development)&
#task(Scheduling RDLIB Development)&
A  schedule for the writing of the  RDLIB routines
 will be formed and documented. 
This document will also include areas where
1)\problems may exist that could lead to schedule extentions,
2)\investigation is needed, or
3)\consultation is needed.
The schedule document, upon completion, will be
translated to put in this schedule.
#schedule(1/26/82,1/28/82,1)
#progress(1/22/82)This task has been abandoned because it is felt
that the documentation of RDLIB subroutine development
can be sufficiently done in the schedule itself.
The scheduling of RDLIB development will begin in the next task
section.
#com1(RDLIB Subroutine Development)&
#task(RDLIB Subroutine Development)&
 This task involves the
documentation, coding, and testing of the subroutines in the
RDLIB Package.
 The development of each routine will be done as
outlined in (PASDEV32)M68PRO.TXT.
Only a portion of the RDLIB routines will be scheduled at first
and the rest will be scheduled as the library is built.
#schedule(1/22/82,3/19/81,1)
#actual(1/22/82)
$need 10
#progress(1/22/82)K.\Palgut and I met today to talk about RDLIB.
Items discussed were:
#beginitem()
#item()Header for the RDLIB Assembly source code. [KMP]
#item()M68000 RDLIB Documentation
#beginitem(,,0,0,0)
#item(\\a.)User Documentation.
#item(\\b.)Macros to be used in doing User Documentation. [SMK]
#item(\\c.)Program Notebook Documentation.
#enditem
#item()Dividing up the responsibilities of RDLIB Delelopment
#enditem
My part of  RDLIB will be documented as we divide up the routines
for RDLIB.
#beginlevel
#com2(RDLIB User Documentation,N)&
#task(RDLIB User Documentation)&
Documentation of RDLIB will be a continuous task and
will be done as routines are implemented.
Before any documentation can be done there are three
sub-tasks that need to be completed; they are listed below.
#schedule(1/25/82,1/29/82,1)
#actual(1/27/82/,1/29/82)
#progress(1/29/82)
The three sub-tasks listed below have been completed and
documentation of the M68000 RDLIB routines may begin.
#beginlevel
#com3(Setting Up M68LIB.PMF)&
#task(Setting Up M68LIB.PMF)&
M68LIB.PMF will be the user documentation for the RDLIB Package
[SCRMAC input]. The file must be set up before sections of
documentation on routines can be inserted.
#schedule(1/25/82,1/25/82,1)
#actual(1/27/82/,1/27/82)
#com3(RDLIB User Documentation Macros)&
#task(RDLIB User Documentation Macros)&
The user documentation for the M68000 RDLIB will all be
done in a standard format.
To aid in adhering to this standard format I will write a set
of PMF macros that will correspond to the standard items
found in a routine's documentation.
These macros will include:
#beginitem(8,,0)
#item(#ENTRY)gives entry point name;
#item(#USE)
starts a verbatim section to specify hoe the routine is used;
#item(#ENDUSE)signals the end of the USE section;
#item(#ARG)argument description;
#item(#INPUT)sections off input arguments;
#item(#OUTPUT)sections off output arguments;
#item(#RET)special case of #ARG for return values;
#item(#INC)lists include files needed;
#item(#OTHER)used to set up either a 'Requirements' section,
a 'Notes' section, or a user named section.
#schedule(1/25/82,1/27/82,1)
#actual(1/27/82/,1/29/82)
#progress(1/29/81)
The macros listed above have been written and tested.
The PMF library file compiled from the macros has been
put in M68MAC.PML in each of the three accounts
PASDEV4, PASDEV25, and PASDEV32.
This file should be used as the PMF library file
when running SCRMAC on a file which uses these macros.
An example using the above macros can be found in the
file (PASDEV32)TEST.PMF, with the SCRMAC output in the
file (PASDEV32)TEST.TXT.
#com3(Program Notebook Documentation)&
#task(Program Notebook Documentation)&
The outline for the program notebook documentation needs to be
done in the file (PASDEV4)M68LIB.NOT.
#schedule(1/25/82,1/25/82,1)
#actual(1/29/82/,1/29/82)
#endlevel
#com2(RDLIB Routine: SLEEP,n)&
#task(RDLIB Routine: SLEEP,n)&
#schedule(1/28/82,2/3/82,1)
#actual(2/1/82)
#beginlevel
#com3(Write User Documentation for SLEEP,n)&
#task(Write User Documentation for SLEEP,n)&
#schedule(1/27/82,1/28/82,1)
#actual(2/1/82,2/1/82)
#com3(Write SLEEP)&
#task(Write SLEEP)&
Code the SLEEP routine.
#schedule(1/28/82,2/1/82,1)
#actual(2/1/82,2/3/82)
#com(&
#com3(Test SLEEP)&
#task(Test SLEEP)&
Write the test programs to test SLEEP and test the SLEEP routine.
#schedule(2/1/82,2/4/82,1)
#actual()
&)
#com3(Finalize SLEEP)&
#task(Finalize SLEEP)&
Put source code for SLEEP in account 1002;
Put user documentation for SLEEP in (PASDEV4)M68LIB.PMF
and a copy in the documentation notebook;
Add necessary items to the M68000 RDLIB Program Notebook for SLEEP.
#schedule(2/3/82,2/3/82,1)
#actual(2/3/82,2/4/82)
#endlevel
#com2(CMDUTL Routines)&
#task(CMDUTL Routines)&
The following sub-task sections outline what needs to be done
with the CMDUTL Package for the M68000 RDLIB.
#beginlevel
#com3(Documentation)&
#task(Documentation)&
The documentation for the CMDUTL routines needs to be
added to the M68000 RDLIB Documentation. This will include
all the routines for the CMDUTL package.
#schedule(2/4/82,2/4/82,1)
#actual(2/3/82,2/8/82)
#com3(Update CMD_FILE_NAME Source)&
#task(Update CMD_FILE_NAME Source)&
CMD_FILE_NAME is the only CMDUTL routine that is system dependent
and needs a version for the M68000.
Changes to the routine code will be to put in a section of
code that will conditionally compile for the M68000 and will
handle VERSADOS filenames.
#schedule(2/4/82,2/8/82,1)
#schedule(2/4/82,2/18/82)
#schedule(2/4/82,2/26/82)
#actual(2/8/82,)
#progress(2/9/82)
This tast will entail more work than originally thought.
I will have to put together a BNF representation for
the M68000 file formats. This BNF representation will then 
be run through LEXGEN to produce a table used by
CMD_FILE_NAME (and also FILUTL routines).
#progress(2/15/82)
This task will involve much more work than even thought on 2/9/82.
After looking into setting up a BNF representation for the
Motorola, we have found a way to set up the CMD_FILE_NAME (and
PR_FILE_ID) routine so that only the include files for the
routines will be system dependent.
 Presently all systems have
their own pascal source files for CMD_FILE_NAME and PR_FILE_ID.
The plan now is to make one system independent pascal source
 file for the above
routines and have system dependent include files for each
system.
#progress(3/1/82)
Pascal source files for CMD_FILE_NAME and PR_FILE_ID have been
set up and are on PASDEV2.  Four system dependent include files
have been put on the system accounts: TYMSHARE-PASDEV2,
ADP-PASCAL10C, VAX-PASDEV3, and M68-PASDEV4.
CMDUTL and FILUTL routines both compile for their specific
all systems.
We have found out from ANC that these routines will not be needed
for their benchmarks, and therefore testing of these routines
will be postponed until after the PASDIR routines have been
completed (PASDIR routines will be needed in ANC's benchmarks).
#com3(CMDUTL Finalization)&
#task(CMDUTL Finalization)&
Put source code for CMDUTL routines in [???];
Put user documentation for CMDUTL in (PASDEV4)M68LIB.PMF
and a copy in the documentation notebook;
Add necessary items to the M68000 RDLIB Program Notebook for CMDUTL.
#schedule(2/8/82,2/8/82,1)
#schedule(2/18/82,2/19/82)
#schedule(3/??/82,3/??/82)
#actual()
#endlevel
#com2(FILUTL Routines)&
#task(FILUTL Routines)&
The following sub-task sections outline what needs to be done
with the FILUTL Package for the M68000 RDLIB.
#schedule(2/??/82,2/??/82,1)
#beginlevel
#com3(RDLIB Routine: PR_FILE_ID)&
#task(RDLIB Routine: PR_FILE_ID,N)&
#schedule(2/??/82,2/??/82,1)
#beginlevel
#task(PR_FILE_ID Documentation)&
Write user documentation for the PR_FILE_ID Routine.
#schedule(2/??/82,2/??/82,1)
#actual()
#task(PR_FILE_ID Source Code)&
Alter the current PASCAL code to incorporate the M68000 
VERSADOS file syntax.
#schedule(2/??/82,2/??/82,1)
#actual()
#task(PR_FILE_ID Finalization)&
Put source code for PR_FILE_ID routines in [???];
Put user documentation for PR_FILE_ID in (PASDEV4)M68LIB.PMF
and a copy in the documentation notebook;
Add necessary items to the M68000 RDLIB Program Notebook for PR_FILE_ID.
#schedule(2/??/82,2/??/82,1)
#actual()
#endlevel
#com3(RDLIB ROUTINE: OPEN_FILE)&
#task(RDLIB ROUTINE: OPEN_FILE,N)&
#schedule(2/??/82,2/??/82,1)
#beginlevel
#task(OPEN_FILE Documentation)&
Write user documentation for the OPEN_FILE Routine.
#schedule(2/??/82,2/??/82,1)
#actual()
#task(OPEN_FILE Source Code)&
Alter the current PASCAL code to incorporate the M68000 
VERSADOS file syntax.
#schedule(2/??/82,2/??/82,1)
#actual()
#task(OPEN_FILE Finalization)&
Put source code for OPEN_FILE routines in [???];
Put user documentation for OPEN_FILE in (PASDEV4)M68LIB.PMF
and a copy in the documentation notebook;
Add necessary items to the M68000 RDLIB Program Notebook for OPEN_FILE.
#schedule(2/??/82,2/??/82,1)
#actual()
#endlevel
#com2(DIRPAS Routines)&
#task(DIRPAS Routines)&
The following sub-task sections outline what needs to be done
with the DIRPAS Package for the M68000 RDLIB.
#schedule(3/1/82,3/19/82,1)
#beginlevel
#com3(RDLIB Routine: DIR_OPEN)&
#task(RDLIB Routine: DIR_OPEN,N)&
#schedule(3/??/82,3/??/82,1)
#beginlevel
#task(DIR_OPEN Documentation)&
Write user documentation for the DIR_OPEN Routine.
#schedule(3/??/82,3/??/82,1)
#actual()
#task(DIR_OPEN Source Code)&
Write 68000 assembler routine to meet specification.
Note any changes in the documentation that need to be made
to types or variables.
#schedule(3/??/82,3/??/82,1)
#actual()
#task(DIR_OPEN Finalization)&
Put source code for DIR_OPEN routines in account 1002;
Put user documentation for DIR_OPEN in (PASDEV4)M68LIB.PMF
and a copy in the documentation notebook;
Add necessary items to the M68000 RDLIB Program Notebook for DIR_OPEN.
#schedule(3/??/82,3/??/82,1)
#actual()
#endlevel
#com3(RDLIB Routine: DIR_CLOSE)&
#task(RDLIB Routine: DIR_CLOSE,N)&
#schedule(3/??/82,3/??/82,1)
#beginlevel
#task(DIR_CLOSE Documentation)&
Write user documentation for the DIR_CLOSE Routine.
#schedule(3/??/82,3/??/82,1)
#actual()
#task(DIR_CLOSE Source Code)&
Write 68000 assembler routine to meet specification.
Note any changes in the documentation that need to be made
to types or variables.
#schedule(3/??/82,3/??/82,1)
#actual()
#task(DIR_CLOSE Finalization)&
Put source code for DIR_CLOSE routines in account 1002;
Put user documentation for DIR_CLOSE in (PASDEV4)M68LIB.PMF
and a copy in the documentation notebook;
Add necessary items to the M68000 RDLIB Program Notebook for DIR_CLOSE.
#schedule(3/??/82,3/??/82,1)
#actual()
#endlevel
#com3(RDLIB Routine: DIR_NEXT)&
#task(RDLIB Routine: DIR_NEXT,N)&
#schedule(3/??/82,3/??/82,1)
#beginlevel
#task(DIR_NEXT Documentation)&
Write user documentation for the DIR_NEXT Routine.
#schedule(3/??/82,3/??/82,1)
#actual()
#task(DIR_NEXT Source Code)&
Write 68000 assembler routine to meet specification.
Note any changes in the documentation that need to be made
to types or variables.
#schedule(3/??/82,3/??/82,1)
#actual()
#task(DIR_NEXT Finalization)&
Put source code for DIR_NEXT routines in account 1002;
Put user documentation for DIR_NEXT in (PASDEV4)M68LIB.PMF
and a copy in the documentation notebook;
Add necessary items to the M68000 RDLIB Program Notebook for DIR_NEXT.
#schedule(3/??/82,3/??/82,1)
#actual()
#endlevel
#com3(RDLIB Routine: DIR_ATTR)&
#task(RDLIB Routine: DIR_ATTR,N)&
#beginlevel
#task(DIR_ATTR Documentation)&
Write user documentation for the DIR_ATTR Routine.
#schedule(3/??/82,3/??/82,1)
#actual()
#task(DIR_ATTR Source Code)&
Write 68000 assembler routine to meet specification.
Note any changes in the documentation that need to be made
to types or variables.
#schedule(3/??/82,3/??/82,1)
#actual()
#task(DIR_ATTR Finalization)&
Put source code for DIR_ATTR routines in account 1002;
Put user documentation for DIR_ATTR in (PASDEV4)M68LIB.PMF
and a copy in the documentation notebook;
Add necessary items to the M68000 RDLIB Program Notebook for DIR_ATTR.
#schedule(3/??/82,3/??/82,1)
#actual()
#endlevel
#endlevel
 