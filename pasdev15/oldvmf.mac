	title	MODFIT	Modified first-fit heap allocation
	search	PASSYM
;    +--------------------------------------------------------------+
;    |                                                              |
;    |                          V M O D F                           |
;    |                          - - - - -                           |
;    |                                                              |
;    +--------------------------------------------------------------+
;    
;    MDSI, Company Confidential
;    
;    SYSTEM:  PASCAL Runtime
;    
;    STARTED:  11/17/78
;    
;    PURPOSE:  This module provides management of the  virtual  space
;       for NEW, DISPOSE, and related operations.  It uses a modified
;       first-fit allocation algorithm.
;    
;    USAGE:
;    
;          MOVEI  REG, size
;          PUSHJ  TOPP,VNEW.
;          returns: (AC1) -- real address of new record
;                   (REG) -- virtual address of new record
;    
;          ANEW. -- same as VNEW., except (AC1) contains area number in which
;                   the allocation is to be made.
;    
;          MOVE   REG,ptr
;          PUSHJ  TOPP,VDSPS.
;    
;          PUSHJ  TOPP,VMARK.
;          returns: (REG) contains the base heap address of the default area.
;    
;          PUSHJ  TOPP,AMARK.
;          same as VMARK., except explicit area number given in (AC1).
;    
;          MOVE   REG,heapmark
;          PUSHJ  TOPP,VRLES.
;    
;          The normal entries NEW., DSPOS., MARK., and RLEAS. cause runtime errors.
;    
;    ALGORITHM:  This module uses a version of the modified first-fit
;       algorithm   from   Knuth  (see  routine  KNUTH  below).  Heap
;       extensions are done as precisely as  possible  (exact  if  no
;       page  alignment  is  specified)  to avoid filling the virtual
;       space with small free  blocks  when  disposes  are  few,  far
;       between,  and complete.  Of course, random disposes will slow
;       down any allocation algorithm.
;    
;    RESPONSIBLE:  Jerry Rosen -- PASCAL group
;    
;    ----------------------------------------------------------------
;
	$reloc
;
; routine control parameters -- various and sundry

	MINBLK=3			; word size of minimum block to allocate
					;   note--must be >= 3 for free block info
	SMALL=2				; don't split free blocks leaving
					;   remnants of this size or smaller
	RECORD=0			; if <> 0, count various things
	ALIGN=1				; if VIRTUAL and <> 0, don't allocate
					;   blocks across page boundaries
	PAGSIZ=^o1000			; if VIRTUAL, page size in words
					;   note -- must agree with VMANGR
	MAXPAG=^o77777			; largest page index
	DEFAREA=1			; default area number for NEW.

;
; heap header DSECT -- each active heap has one

	LHEAP=0				; pointer to previous heap, or zero
	TAIL=1				; points to word past end of heap
	FTAIL=2				; points to last block of free list
	FHEAD=3				;   and first block (VA's)
	ROVER=4				; points to free block to test first

	HDRSIZ=5			; size of above header

;
; block header DSECT 

	SIZE=0				; size word -- negative if alloc'd
;	next two for blocks on free list only
	BLINK=1				; back link on free list
	FLINK=2				;   and fore link
	BHSIZE=3			; size of above block header

;
; register equates used by this module

	HEAP=3
	T=4
	T2=T+1
	T3=T+2
	T4=T+3
	T5=T+4
	NEW=T+5
	NEWVIR=T+6
	ALLOC=REG
	NIL=^o377777

;
; TRANS macro -- used for all address translation in this module

	opdef	TR.OP	[0]		; phony to make macro easier

	define TRANS (TREG,TSIZE) <
	  PUSHJ	TOPP,VTRNS.
	  TR.OP TREG,TSIZE >
;
; COUNT macro -- may be used to count various events in the heap management

	ife RECORD,<define COUNT(A) <>>	; null definition to avoid counting

	ifn RECORD,<
	  define COUNT(A) <
	    AOS 0,A>
	  $low
	  C$NEW:: exp 0
	  C$DISP::exp 0
	  C$COAL::exp 0
	  C$EXT:: exp 0
	  C$SPLI::exp 0
	  C$EXAM::exp 0 >

;
; externs in the virtual space handler

	extern	VTRNS.,VINFO.,VINFS.,VCORE.

; externs in PASCAL runtime for error trapping

	extern	TWAIT.,WRTPC.,DIE.

; our entry points

	entry	VNEW.,ANEW.,VMARK.,AMARK.,VRLES.,VDPS.,ALC0.
	ALC0.=0				; heh-heh

; the ones we trap for errors

	intern	NEW.,DSPOS.,MARK.,RLEAS.
	$high
;
; NEWHP -- initializes a heap header. It assumes that HEAP contains the
;   desired starting address for the new heap. First we must ask the
;   virtual space manager to extend the end of the space sufficiently.
;   Then we get addressibility, and initialize.

NEWHP:	MOVE	AC1,HEAP
	MOVE	T,HEAP			; remember virtual addr. of new heap
	ADDI	AC1,HDRSIZ		; AC1 now has new maximum addr
	MOVE	T2,AC1			; remember that for tail of heap
	PUSHJ	TOPP,VCORE.		; "CORE monitor call"

	TRANS	(HEAP,HDRSIZ)		; get addr'ty over heap header

	MOVE	AC1,T			; get heap origin for area ID
	PUSHJ	TOPP,VINFO.		; get old magic word in AC1
	MOVEM	AC1,LHEAP(HEAP)		; install as back heap pointer
	MOVEM	T2,TAIL(HEAP)		; new tail of heap
	MOVE	AC1,T			; get virtual addr of new heap
	PUSHJ	TOPP,VINFS.		; and store as new magic word
	ADDI	T,<FTAIL-1>		; get virtual addr for free list
	MOVEM	T,FHEAD(HEAP)		; and install as head,
	MOVEM	T,FTAIL(HEAP)		;   tail,
	MOVEM	T,ROVER(HEAP)		;   and rover for new heap.
	POPJ	TOPP,0			; and we're done.
;
; NEW. and ANEW. -- All NEW. does extra is insert the default area number
;   into AC1. Then we check with the manager for the CHEAP value, and
;   initialize the heap if it is zero.  Then insure addressibilty over
;   the header, call the allocation routines KNUTH and/or XTEND. These
;   return with addressibility established over the entire new record.
;   Zero out the record, set up return parameters, and return.

VNEW.:	MOVEI	AC1,DEFAREA		; install default area number

ANEW.:	IMUL	AC1,[<PAGSIZ*<MAXPAG+1>>] ; compose pointer into right area
	COUNT	C$NEW			; count all NEW calls
	MOVE	HEAP,AC1		; hang onto this
	PUSHJ	TOPP,VINFO.		; get CHEAP for this area
	JUMPN	AC1,NEW2		; non-zero -- establish address'y
	PUSHJ	TOPP,NEWHP		; else initialize HEAP
	MOVE	AC0,AC1			; save virtual addr in AC0
	JRST	NEW3

NEW2:	MOVE	AC0,AC1			; hang onto virtual addr of heap
	TRANS	(AC1,HDRSIZ)		; get real addr of heap header
	MOVE	HEAP,AC1		; and put real address in HEAP

NEW3:	MOVEI	ALLOC,1(ALLOC)		; add one to size passed for real size
	CAIGE	ALLOC,MINBLK		; is up to minimum size to allocate?
	MOVEI	ALLOC,MINBLK		; no, but allocate MINBLK words anyway

	PUSHJ	TOPP,KNUTH		; try to allocate
	PUSHJ	TOPP,XTEND		; else try to extend

; at this point, a block has been allocated. The entire block must be
;   addressible, for we are going to zero it out!

	SETZM	0,1(NEW)		; zero out first word
	HRLI	T,1(NEW)		; source pointer is zeroed word
	HRRI	T,2(NEW)		; dest. ptr. is one word after
	MOVEI	T2,0(NEW)		; compose final address of BLT
	ADDI	T2,-1(ALLOC)		; one less than allocated size
	BLT	T,0(T2)

	MOVE	ALLOC,NEWVIR		; return virtual pointer in REG
	ADDI	ALLOC,1			;   tick one for control word
	MOVEI	AC1,1(NEW)		; return real address in AC1
	POPJ	TOPP,0
;
; DISPOSE -- after discovering that the address is reasonable, place
;   the newly freed block as the head of the free list.

VDPS.:	COUNT	C$DISP			; count dispose calls
	SUBI	ALLOC,1			; control addr one before
	MOVE	AC1,ALLOC		; put alleged address in AC1
	PUSHJ	TOPP,VINFO.		;   to get its area's CHEAP word

DSPS2:	JUMPE	AC1,DSERR		; zero -- can't find right heap
	CAMG	AC1,ALLOC		; if record addr. more than heap top
	JRST	DSPS3			; then we've got the right heap
	TRANS	(AC1,HDRSIZ)		; else get addr. of this heap
	MOVE	AC1,LHEAP(AC1)		; get heap back pointer
	JRST	DSPS2			; and try again

DSPS3:	MOVE	T,AC1
	ADDI	T,HDRSIZ		; if record address is less than
	CAMGE	ALLOC,T			;   end of header, then error
	JRST	DSERR

	MOVE	T,AC1
	TRANS	(T,HDRSIZ)		; get heap header address
	MOVE	T2,TAIL(T)		;   to get tail virtual address
	SUBI	T2,MINBLK		; now last possible start address
	CAMLE	ALLOC,T2		; if record is past this address
	JRST	DSERR			;   then is error

	MOVE	T3,ALLOC		; we need real address of record
	TRANS	(T3,BHSIZE)
	SKIPL	T4,SIZE(T3)		; pick up size of record
	JRST	DSPREV			;   positive, already free: error

; Now, ALLOC-T3 has the (virtual) address of the new free record, and
;   T has the real address of heap header. T4 has the size.

	MOVE	T2,FHEAD(T)		; get virtual addr of current first
	MOVEM	ALLOC,FHEAD(T)		; and put us as new first
	MOVEM	T2,FLINK(T3)		; record our forelink
	TRANS	(T2,BHSIZE)		; get addr of old first
	EXCH	ALLOC,BLINK(T2)		; pick up old blink, put us as new one
	MOVEM	ALLOC,BLINK(T3)		; put down new blink of new record

	MOVMS	0,SIZE(T3)		; record new size as free
	MOVEI	ALLOC,NIL		; return nil pointer
	POPJ	TOPP,0
;
; KNUTH -- allocation-compaction algorithm taken from "Art of Computer
;    Programming" Vol. 1, sec. 2.5, problem 19. It looks for a free
;    block large enough for the allocation, coalescing free blocks as it looks.
;
; ALLOC contains the word size of the block needed, HEAP and AC0 contain
;    the real and virtual addresses, respectively, of the heap header. NEW
;    and NEWVIR will contain the address of the control word of the
;    allocated block if successful (skip 1) else the routine will return
;    without a skip.  Special considerations must be made in the case of
;    ALIGN<>0 (never allocate a block across a page boundary).

KNUTH:	MOVE	NEWVIR,ROVER(HEAP)	; get VA of first block to check
	SETZ	T2,0			; clear done flag
	MOVE	T3,TAIL(HEAP)		; remember tail address
	MOVE	T,AC0			; using virtual addr of heap header,
	ADDI	T,<FTAIL-1>		; get addr of free list header block

KNCHEK:	CAME	NEWVIR,T		; are we at freelist header block
	JRST	KNSIZE			; no, check NEWVIR block out
	JUMPN	T2,KNFAIL		; second time, KNUTH fails
	MOVE	NEWVIR,FHEAD(HEAP)	; else get first block
	AOJA	T2,KNCHEK		; and try again

KNSIZE:	MOVE	NEW,NEWVIR		; copy of VA to get real address
	TRANS	(NEW,BHSIZE)		;   of current block
	MOVE	T4,SIZE(NEW)		; get size of current block
	ADD	T4,NEWVIR		; get VA of next physical block
	CAMN	T4,T3			; if last block in heap
	JRST	KNFIT			;   then try to use it, else below

	TRANS	(T4,BHSIZE)		; get RA of next physical block
	SKIPG	T5,SIZE(T4)		; load size
	JRST	KNFIT			; negative, alloc'd, try to use current

	COUNT	C$COAL			; count as a coalesce
	ADDM	T5,SIZE(NEW)		; coalesce -- add sizes
	MOVE	AC1,FLINK(T4)		; get addr of block ahead
	TRANS	(AC1,BHSIZE)		;   real addr 
	MOVE	T5,BLINK(T4)		; get backlink of deleted one
	MOVEM	T5,BLINK(AC1)		;   and put as BL of one ahead
	MOVE	AC1,T5			; remembering BL of deleted one
	TRANS	(AC1,BHSIZE)		; get real addr of BL
	MOVE	T5,FLINK(T4)		; get forelink of deleted one
	MOVEM	T5,FLINK(AC1)		;   and put as FL of one behind
	JRST	KNSIZE			; try for another coalesce

KNFIT:	MOVE	T4,SIZE(NEW)		; load size of candidate
	SUBI	T4,0(ALLOC)		; get size that would remain
	COUNT	C$EXAM			; count as examination of a block
	JUMPL	T4,KNNEXT		; block too small, forget it
	CAIG	T4,SMALL		; is worth splitting over?
	JRST	KALLOC			; no, can't split

	ife ALIGN,<
	COUNT	C$SPLI			; count a split
	MOVEM	T4,SIZE(NEW)		; size of split block
	ADD	T4,NEWVIR		; virtual addr of alloc'd block
	MOVE	NEWVIR,T4		; needed in both registers
	TRANS	(T4,BHSIZE)		; address new block
	MOVNM	ALLOC,SIZE(T4)		; install size
	JRST	KNDONE >

	ifn ALIGN,<
	MOVE	T4,NEWVIR		; try to split from tail
	ADD	T4,SIZE(NEW)		; addr of end of block
	MOVE	T5,T4			; save for later
	SUBI	T5,1			; now last word of block
	SUB	T4,ALLOC		;   and first word if we split
	TDZ	T5,PMASK		; mask off all but page number
	TDZ	T4,PMASK
	CAMN	T5,T4			; would they be on same page?
	JRST	KNTAIL			; yes, can split from tail

	MOVE	T4,NEWVIR		; else try from head
	MOVE	T5,T4			; addr of start of block
	ADDI	T4,-1(ALLOC)		; and last word of block
	TDZ	T4,PMASK
	TDZ	T5,PMASK
	CAME	T4,T5			; on same page?
	JRST	KNNEXT			; no, give up on this block

	COUNT	C$SPLI			; count as split
	MOVE	T5,NEWVIR		; so we can allocate from head
	ADD	T5,ALLOC		; VA of new free block
	MOVE	T4,SIZE(NEW)		; get size of old free block
	MOVNM	ALLOC,SIZE(NEW)		; install size of new alloc'd block
	SUBI	T4,0(ALLOC)		; get size of remaining free block
	MOVE	T3,T5			; remember VA for putting on chain
	TRANS	(T5,BHSIZE)		; address of new free block
	MOVEM	T4,SIZE(T5)		; put in size
	MOVE	T4,FLINK(NEW)		; get old FLINK VA, must be changed
	MOVEM	T4,FLINK(T5)		;   but still is FLINK of new block
	TRANS	(T4,BHSIZE)
	MOVEM	T3,BLINK(T4)		; new block as BLINK of FLINK
	MOVE	T4,BLINK(NEW)		; get VA of old BLINK
	MOVEM	T4,BLINK(T5)		; which can still be BLINK of new free
	TRANS	(T4,BHSIZE)
	MOVEM	T3,FLINK(T4)		; but new block is now FLINK of BLINK
	ADDI	NEW,0(ALLOC)		; give KNDONE real addr of free block
	JRST	KNDONE

KNTAIL:	ADD	NEWVIR,SIZE(NEW)	; tail alloc -- get addr to alloc
	SUBI	NEWVIR,0(ALLOC)		; ALLOC off end of free block
	COUNT	C$SPLI			; count as split
	SUBM	ALLOC,SIZE(NEW)		; fix size of remaining free block
	MOVNS	0,SIZE(NEW)		;   negate because result was negative
	MOVE	T4,NEWVIR		; get addr of block to allocate
	TRANS	(T4,BHSIZE)
	MOVNM	ALLOC,SIZE(T4)		; lay down allocated size
	JRST	KNDONE >

KALLOC:	MOVE	T4,FLINK(NEW)		; get flink VA
	MOVE	T3,T4			; remember for putting in memory
	TRANS	(T3,BHSIZE)

	MOVNS	0,SIZE(NEW)		; set size negative for allocated block
	MOVE	T5,BLINK(NEW)		; get blink VA
	MOVEM	T5,BLINK(T3)		; and put as flink of old blink
	TRANS	(T5,BHSIZE)
	MOVEM	T4,FLINK(T5)		; and put blink as blink of old flink

KNDONE:	MOVE	T4,FLINK(NEW)		; get new ROVER addr
	MOVE	NEW,NEWVIR		; must establish addressibility
	TRANS	(NEW,0(ALLOC))		;   over entire block
	MOVE	HEAP,AC0		; must readdress heap header
	TRANS	(HEAP,HDRSIZ)
	MOVEM	T4,ROVER(HEAP)
	AOS	0,0(TOPP)		; set skip return
	POPJ	TOPP,0

KNNEXT:	MOVE	NEWVIR,FLINK(NEW)	; get VA of next block on list
	JRST	KNCHEK			; back up to top

KNFAIL:	MOVE	HEAP,AC0		; must get heap header back
	TRANS	(HEAP,HDRSIZ)
	MOVEM	NEWVIR,ROVER(HEAP)	; new rover for next time
	POPJ	TOPP,0
;
; VMARK. -- virtual heap mark. Two entry points, VMARK. uses the default
;   area number while AMARK. gives an explicit area in AC1. We may have
;   to initialize the world, but then just push another heap onto the
;   current.

VMARK.:	MOVEI	AC1,DEFAREA		; default if none from caller

AMARK.:	IMUL	AC1,[<PAGSIZ*<MAXPAG+1>>]	; convert to pointer into area
	MOVE	HEAP,AC1		; hang onto in case we need to init
	PUSHJ	TOPP,VINFO.		; get cheap for this heap
	JUMPN	AC1,MARK2		; non-zero, have a heap now
	PUSHJ	TOPP,NEWHP		; else initialize, HEAP has addr
	JRST	MARK3

MARK2:	TRANS	(AC1,HDRSIZ)		; get real address of heap header
	MOVE	HEAP,AC1		; and put into HEAP

MARK3:	MOVE	HEAP,TAIL(HEAP)		; pick up tail addr (virtual)
	PUSHJ	TOPP,NEWHP		; and make a new one
	MOVE	REG,AC1			; AC1 has V.A. of new heap from NEWHP
	POPJ	TOPP,0

VRLES.:	MOVE	AC1,REG			; copy mark addr to get area's CHEAP
	PUSHJ	TOPP,VINFO.

RLLOOP:	JUMPE	AC1,RLSERR		; end of backchain, not found, error
	CAMN	AC1,REG			; have we found it?
	JRST	RLSOK			; yep
	TRANS	(AC1,HDRSIZ)		; else get addressibility
	MOVE	AC1,LHEAP(AC1)		; get virtual addr. of previous heap
	JRST	RLLOOP

RLSOK:	TRANS	(AC1,HDRSIZ)		; get addressibility
	MOVE	T2,LHEAP(AC1)		; pick up previous heap addr
	JUMPE	T2,RLSERR		; can't release first heap
	MOVE	AC1,T2			; put as CHEAP for this one
	PUSHJ	TOPP,VINFS.		; store in same area
	TRANS	(T2,HDRSIZ)		; get addr'y for new current heap
	MOVE	AC1,TAIL(T2)		; get its tail
	JRST	VCORE.			; restrict addressing, let VCORE return
;
; XTEND -- if we can't get anything from the free list, just extend core
;   sufficiently.  If ALIGN <>0, then we may end up with a new free block
;   taking up the end of the former page. 

XTEND:	MOVE	HEAP,AC0		; may not have address of heap header
	COUNT	C$EXT			; count space extensions
	TRANS	(HEAP,HDRSIZ)
	MOVE	NEWVIR,TAIL(HEAP)	; old tail is start of new record(s)
	MOVE	T4,NEWVIR		; hang onto it
	ADDI	T4,0(ALLOC)		; get end of record

	ifn ALIGN,<
	MOVE	T5,T4			; must check pages for each
	ADDI	T4,MINBLK		; can't leave a tiny fragment
	TDZ	T4,PMASK		; get page numbers for beginning and end
	TDZ	NEWVIR,PMASK
	CAMN	NEWVIR,T4		; same page?
	JRST	XTOK			; yes, it's easy

	COUNT	C$SPLI			; count as a split
	MOVE	NEWVIR,T4		; the new block (on page bdry. )
	MOVE	T5,TAIL(HEAP)		; the new free block
	MOVE	T3,T5			; translate it
	MOVE	AC1,T4			; but first we need the core
	ADDI	AC1,0(ALLOC)
	MOVEM	AC1,TAIL(HEAP)		; new tail of heap
	PUSHJ	TOPP,VCORE.
	TRANS	(T3,BHSIZE)		; now we can translate
	MOVE	T2,FHEAD(HEAP)		; get old first free block
	MOVEM	T5,FHEAD(HEAP)		;   and install new first free
	MOVEM	T2,FLINK(T3)		; old first now pointed to by new first
	MOVE	AC1,AC0			;   and new points back to heap header
	ADDI	AC1,<FTAIL-1>		;   at appropriate place
	MOVEM	AC1,BLINK(T3)
	TRANS	(T2,BHSIZE)		; get addr of old first free
	MOVEM	T5,BLINK(T2)		;   now it points back to new first
	MOVE	AC1,NEWVIR		; get new block addr
	SUB	AC1,T5			; and addr of old heap tail
	MOVEM	AC1,SIZE(T3)		;   which is size of new first free
	JRST	XTOUT

XTOK:	MOVE	NEWVIR,TAIL(HEAP)	; old tail is now start of new record
	MOVE	T4,T5			; restore T4
			>

	MOVEM	T4,TAIL(HEAP)		; install new tail

	MOVE	AC1,T4			; get sufficient virtual core
	PUSHJ	TOPP,VCORE.

XTOUT:	MOVE	NEW,NEWVIR		; translate new record addr
	TRANS	(NEW,0(ALLOC))
	MOVNM	ALLOC,SIZE(NEW)		; install allocated size
	POPJ	TOPP,0			; and we're done
;
; ERROR ROUTINES

MARK.:
RLEAS.:
NEW.:
DSPOS.:	MOVEI	T,[asciz/
?	Virtual heap program has non-virtual module/]
	JRST	ALCDIE

RLSERR:	MOVEI	T,[asciz/
?	Invalid VHEAP pointer in release call/]
	JRST	ALCDIE

DSERR:	MOVEI	T,[asciz/
?	Bad pointer in DISPOSE/]
	JRST	ALCDIE

DSPREV:	MOVEI	T,[asciz/
?	Attempt to free freed block/]

ALCDIE:	PUSHJ	TOPP,TWAIT.
	OUTSTR	0(T)
	MOVE	AC0,0(TOPP)
	PUSHJ	TOPP,WRTPC.
	JRST	DIE.
;
; PMASK for isolating page number from a virtual address

:	exp	PAGSIZ-1
	lit
	end
	title	verror
;    +--------------------------------------------------------------+
;    |                                                              |
;    |                         V E R R O R                          |
;    |                         - - - - - -                          |
;    |                                                              |
;    +--------------------------------------------------------------+
;    
;    MDSI, Company Confidential
;    
;    SYSTEM:  PASCAL compiler
;    
;    STARTED:  November 27
;    
;    PURPOSE:  Error checking and reporting routines for the  virtual
;       heap facility.
;    
;    ENTRY POINTS:
;    
;       VMERR.      reports an attempted translation of a bad virtual
;                   pointer.
;    
;       ACHK.       verifies that two virtual pointers have the  same
;                   areaid and errors out if not.
;    
;       VOVFL.      checks a virtual pointer prior to assignment to a
;                   packed offset and reports an error if there is an
;                   overflow (i. e., the offset cannot be stored in a
;                   halfword).
;    
;    RESPONSIBLE:  Compiler group
;    
;    ----------------------------------------------------------------
	search	passym
	search	virsym
	$reloc
	entry	achk.,vovfl.
	extern	wrtpc.,die.,twait.
achk.:
	hlrz	ac0,@0(topp)
	ldb	ac0,bp
	push	topp,bp
	hrrz	ac0,@0(topp)
	ldb	ac0,bp
	came	ac0,0(topp)
	jrst	err
	pop	topp,
	popj	topp,
err:
	pop	topp,
	pushj	topp,twait.
	outstr	[asciz /
?	Areaid conflict /]
	move	ac0,0(topp)
	pushj	topp,wrtpc.
	jrst	die.
vovfl.:	pushj	topp,twait.
	outstr	[asciz /
?	Overflow on assignment to packed offset /]
	move	ac0,0(topp)
	pushj	topp,wrtpc.
	jrst	die.
bp:	point	afield,@ac0,afield-1
	end
	title	PASVLC	Allocator for PASCAL Virtual Heap
	search	VIRSYM
	search	PASSYM
	$reloc

	entry	VNEW.,ANEW.,VDPS.,VMARK.,VRLES.,VCREA.,VDELA.
	intern	NEW.,DSPOS.,MARK.,RLEAS.

	extern	VBPTI.,VBVPI.,VATBL.,VGTBF.,VMACC.,VFRFP.,VKBFP.
	extern	TWAIT.,WRTPC.,DIE.,VMRUT.,VORG.,OMASK.,VMRU.

; a few allocation parameters

	MINBLK=2			; the smallest block to allocate
	SMALL=3				; the smallest remnant to leave
		; note ** both of these include the control word

	DEFAREA=1			; the default area for VMARK. and VNEW.

; event counter

	RECORD=1			; if <> 0, record events

    ife RECORD, < define COUNT(A) <>>	; null definition if not enabled

    ifn RECORD, <
	define COUNT(A) <
	  AOS 0,A >
	$low
	C$NEW::exp 0
	C$DISP::exp 0
	C$COAL::exp 0
	C$SPLI::exp 0
	C$EXAM::exp 0
	C$XTND::exp 0  >
	$high


; VNEW. and ANEW. -- allocate a record, just like NEW. does. First we check
;   all pages in the area for sufficient free space (via 17 bits in the
;   page tables). If a page is found with enough, it is brought in and the
;   allocation made, otherwise the area is extended. There is no way of
;   really telling, in the general case, whether an allocation has changed
;   the maximum free block on a page, so we must walk the entire free list
;   to find out.

VNEW.:	PUSHJ	TOPP,SAVREG
	MOVEI	AC1,DEFAREA		; install default area number
	MOVE	R,VATBL.		; get address of area table
	SKIPN	0,DEFAREA(R)		; is there a page table?
	PUSHJ	TOPP,VCREA.		; no, go do it (hee-hee!)
	SKIPA	0,0

ANEW.:	PUSHJ	TOPP,SAVREG
	COUNT	C$NEW
	CAIL	REG,PAGSIZ-1		; make sure user isn't trying to
	JRST	TOOBIG			;   get a record larger than page
	CAIGE	REG,MINBLK		; smaller than smallest allowed size?
	MOVEI	REG,MINBLK		;   yes, stuff in that size

	JUMPE	AC1,ARZERO		; attempt to allocate in area zero
	MOVEI	ATBWD,VATBL.		; get area table address
	HLRZ	R,ALCTB.(AC1)		; get appropriate area table
	MOVEM	R,PGTEMP		; remember for making virtual address
	IDIVI	R,PAGSIZ		;   for lowest allowed page number

	MOVE	ATBWD,0(ATBWD)		; load addr of area table
	JUMPE	ATBWD,BADPAG		; no table -- illegal page number
	SOJGE	R,.-2			; do again, count down page number

	ADDI	ATBWD,0(AC1)		; add area number for ptable addr
	PUSHJ	TOPP,VBPTI.		;   and bring in the table
	HLRZ	R,ALCTB.(AC1)		; first page to check
	HRRZ	R2,ALCTB.(AC1)		;   and last page
	SUB	R2,R			; now number to check
	ADDI	R2,1			; less one
	MOVNS	0,R2			; negate it
	HRL	PTBWD,R2		; stuff in left half
	ANDI	R,PAGSIZ-1		; get offset from start of table
	ADDI	PTBWD,0(R)		;   to get addr of entry in right half

NULOOP:	LDB	R,PTINFO		; get size of largest block from p table
	CAIG	REG,0(R)		; is big enough?
	JRST	NUALOC			; yeah, go do it
	AOS	0,PGTEMP		; tick page number
	AOBJP	PTBWD,NUXTND		; if count exhausted, go extend area
	TRNE	PTBWD,PAGSIZ-1		; did we go over page boundary?
	JRST	NULOOP			;   no, go back and check next page

	SUBI	ATBWD,0(AC1)		;   yes, so to get next table, get next
	SKIPN	ATBWD,0(ATBWD)		;     area table
	JRST	BADPAG			; none -- bad page number
	HLLM	PTBWD,CHHLIM		; remember count for a second
	ADDI	ATBWD,0(AC1)		; add area number to get entry
	PUSHJ	TOPP,VBPTI.		;   bring in next page table
	HLL	PTBWD,CHHLIM		; restore count
	JRST	NULOOP			;   and back up to top

NUALOC:	HLLI	PTBWD,0			; clear out count
	PUSHJ	TOPP,VBVPI.		; bring in candidate page
	JRST	NUFIND			;   and go find the right block

NUXTND:	AOS	R,ALCTB.(AC1)		; tick to next page, load shebang
	COUNT	C$XTND
	PUSHJ	TOPP,PGINIT		; and initialize as a new free page

NUFIND:	MOVEI	R,0(BFPTR)		; start at first word of block
	ADDI	REG,1			; tick size to alloc. for control

FINDIT:	SKIPG	R2,0(R)			; pick up size word
	JRST	NUNEXT			;  allocated -- get next block
	COUNT	C$EXAM
	CAILE	REG,0(R2)		; is it big enough?
	JRST	NUNEXT+1		;   no, get next, don't negate size
	SUBI	R2,0(REG)		; get remnant size if split
	CAIG	R2,SMALL		; is it worth splitting block?
	JRST	NUXACT			; no, exact allocation
	COUNT	C$SPLI
	MOVEM	R2,0(R)			; install remnant size
	ADDI	R,0(R2)			; get addr of record to allocate
	MOVEM	REG,0(R)		; put in size

NUXACT:	MOVNS	0,0(R)			; negate size word -- allocated record
NUINIT:	MOVEI	AC0,1(R)		; save real address in AC0
	SETZM	0,1(R)			; zero out first word
	HRLI	R2,1(R)			; set up BLT ac word
	HRRI	R2,2(R)
	MOVEI	R3,-1(R)		; zero out one less than size words
	ADDI	R3,0(REG)		; from start of block
	BLT	R2,0(R3)

	SETZ	R2,0			; initialize running largest
	HRRZI	R,0(BFPTR)		; start at first block

LGLOOP:	SKIPG	R3,0(R)			; pick up size word
	JRST	LGNEXT			; negative -- forget about it
	CAIGE	R2,0(R3)		; bigger than running one?
	MOVEI	R2,0(R3)		; yes, put in R2 for later
LGNEXT:	MOVM	R3,R3			; make sure size is positive
	ADDI	R,0(r3)			;   and add on for addr next record
	CAIGE	R,PAGSIZ(BFPTR)		; over end of buffer yet?
	JRST	LGLOOP			; no, do it

NUDONE:	SOSG	0,R2			; dec largest so it'll fit in PT
	SETZ	R2,0			; don't let it be negative
	DPB	R2,PTINFO		; put into age table
	EXCH	AC1,AC0			; get real addr in AC0 for index reg.
	MOVE	REG,PGTEMP		; get page number
	MOVEI	R,0(AC1)		; pick up real address
	ANDI	R,pagsiz-1		; leave only offset within page
	LSH	REG,OFIELD		; shove page number into right field
	ADD	REG,R			; compose virtual address
	MOVE	R,AC0			; pick up area number
	LSH	R,ofield+pfield		; shift into area field
	OR	REG,R			; or into address
	JRST	RESTREG			; and we're done

NUNEXT:	MOVM	R2,R2			; get positive offset to next block
	ADDI	R,0(R2)			; get address of next block
	JRST	FINDIT			; and try again

PGINIT:	TRNE	PTBWD,PAGSIZ-1		; has page table pointer carried over?
	JRST	PGNRML			; no, just create page normally
	SUBI	ATBWD,0(AC1)		; get addr of start of area table
	HRRZ	R,.JBREL##		; get current loseg end
	MOVEI	R2,1(R)			; remember addr of new area table page
	ADDI	R,PAGSIZ		; a page more than current end
	CORE	R,0
	JRST	4,.		; halt on error for now
	MOVEM	R2,0(ATBWD)		; install link between area tables
	MOVEI	ATBWD,0(R2)		; update area table pointer to new table
	ADDI	ATBWD,0(AC1)		; tack on area number as index
	PUSHJ	TOPP,VGTBF.		; get a buffer for the page table
	MOVEI	PTBWD,0(BFPTR)		; set up page table pointer registers
	MOVEI	PTIDX,0(BFIDX)
	HRLI	R,IND.BIT		; assemble parea table word for the ptable
	HRRI	R,0(PTBWD)		; page table addr in right half
	MOVEM	R,0(ATBWD)
	MOVE	R,VMRUT.		; initializa MRU counter for page table
	ADDI	R,0(PTIDX)
	SETZM	0(R)
	MOVE	R,VORG.			; must also set origin table
	ADDI	R,0(PTIDX)		; for the page table buffer
	HRLZM	ATBWD,0(R)

PGNRML:	MOVE	BFPTR,VMRUT.		; get address of mruref table
	ADDI	BFPTR,0(PTIDX)		; address of entry of page table
	SOS	0,0(BFPTR)		; dec ref count before creating page
	PUSHJ	TOPP,VGTBF.		; get a free buffer
	MOVE	R,VMRUT.		; get addr of MRU table
	ADDI	R,0(BFIDX)		; now index into table
	AOS	R2,VMRU.		; promote page to MRU -- get global
	MOVEM	R2,0(R)			;   MRU count, increm., and install
	MOVE	R,VORG.			; pick up addr of origin table
	ADDI	R,0(BFIDX)		; tack on index into table
	HRLZM	PTBWD,0(R)		; install ptable addr into origin table
	MOVEI	R,0(BFPTR)		; the address of the buffer
	HRLI	R,<<<PAGSIZ-1>_<^o22-OFIELD>>+IND.BIT> ; free size, incore bit on
	MOVEM	R,0(PTBWD)		; install in page table
	MOVEI	R,<PAGSIZ>		; whole block is free
	MOVEM	R,0(BFPTR)		; put it down
	POPJ	TOPP,0

; VDPS. -- free a block, then pass through page, concatenating
;   whenever possible. Update maximum size free block on page when done.
;
VDPS.:	subi	reg,1		;get virtual addr of control block
	PUSHJ	TOPP,SAVREG
	move	ac1,reg		;translate supplied pointer
	movei	reg,minblk	;that big only
	count	c$disp
	pushj	topp,vmacc.	;make accessible
;
; now have translated address in AC1 and buffer address in BFPTR.
; check if really an allocated block.
;
	skipl	0(ac1)		;must be negative if allocated
	jrst	dsperr
	movms	0(ac1)		;mark as free
;
; Scan over page. Use:
;	ac0 = max free block size (negative)
;	ac1 = search pointer
;	reg = concatenation pointer
;
	movei	ac0,0
	movei	ac1,0(bfptr)	;start search at first word of page
vd.loop:
	cail	ac1,pagsize(bfptr) ;check if block within page
	jrst	vd.done		;done if not
	skipl	reg,0(ac1)	;if not allocated then
	jrst	vd.free		;  try to concatenate
	sub	ac1,reg		;else try next block
	jrst	vd.loop
vd.free:
	add	reg,ac1		;address of next block
	caige	reg,pagsize(bfptr) ;if not within page
	skipg	reg,0(reg)	;or if allocated 
	jrst	vd.size		;then just check against max size
	addb	reg,0(ac1)	;else concatenate blocks
	count	c$coal
	jrst	vd.free		;and continue check
vd.size:
	camg	ac0,0(ac1)	;check if this block the largest yet
	move	ac0,0(ac1)		;appears so
	add	ac1,0(ac1)	;addr of next block
	jrst	vd.loop		;and continue
vd.done:
	subi	ac0,1		;deduct one so it'll fit into word
	dpb	ac0,ptinfo	;store update max size
	movei	reg,377777	;return nil
	JRST	RESTREG

	$low
REGARE:	block	^o12
	$high
SAVREG:	MOVE	0,[3,,REGAREA]
	BLT	0,REGAREA+11
	POPJ	TOPP,0

RESTRE:	MOVS	0,[3,,REGAREA]
	BLT	0,14
	POPJ	TOPP,0

; VMARK. and AMARK. -- we return the magic word in the allocator table,
;   get a new page, and reset allocator table to point to it and only it.


VMARK.:	MOVEI	ATBWD,VATBL.		; must find right area table
	HRRZ	R,ALCTB.+1		; for largest page in area
	IDIVI	R,PAGSIZ		; get number of tables to skip
	MOVEI	REG,0(R2)		; remember remainder as offset in table

MLOOP:	SKIPN	ATBWD,0(ATBWD)		; pick up pointer to table
	JRST	BADPAG			; bad -- error
	SOJGE	R,MLOOP			; get as many as needed

	ADDI	ATBWD,1			; get this area's entry
	PUSHJ	TOPP,VBPTI.		; bring in page table

	ADDI	PTBWD,1(REG)		; get index of next page table entry
	MOVE	REG,ALCTB.+1		; return old allocator word
	AOS	0,ALCTB.+1		; tick word to get next page
	PUSHJ	TOPP,PGINIT		; initialize page
	HRLS	0,ALCTB.+1		; duplicate in left halfword
	POPJ	TOPP,0			; and we're done


; VRLES. -- must discard all pages in any following heaps.

VRLES.:	HRRZM	REG,CHLLIM		; left half as lower limit for CHUCKM
	AOS	R2,CHLLIM		; actually, one past that
	HRRZ	R,ALCTB.+1		; get current top
	MOVEM	R,CHHLIM		;   as high limit
	CAILE	R2,0(R)			; make sure low limit is less than high
	JRST	RLSERR
	MOVEI	AC1,DEFAREA		; pony up area number
	PUSHJ	TOPP,CHUCKM		; throw out pages
	MOVEM	REG,ALCTB.+1		; restore passed control word
	POPJ	TOPP,0			; and go home

; VDELA. -- delete area -- must throw out all pages, including any
;   page tables, and then zero out area table entry(s).

VDELA.:	SKIPN	R,ALCTB.(AC1)		; is area active?
	POPJ	TOPP,0			; no, don't bother
	HRRZM	R,CHHLIM		; current max as max to chuck
	SETZM	0,CHLLIM		; zero as lower limit
	SETZM	ALCTB.(AC1)		; zero out table entry now
	PUSHJ	TOPP,CHUCKM
	MOVEI	ATBWD,VATBL.		; must find page tables

DELLOP:	SKIPN	ATBWD,0(ATBWD)		; get area table
	POPJ	TOPP,0			; last one, we're done
	MOVEI	R3,0(ATBWD)		; get right entry
	ADDI	R3,0(AC1)		; in page table
	SKIPN	BFPTR,0(R3)		; is anything there?
	JRST	DELLOP			; no, try next
	SETZM	0,0(R3)			; zero out page table entry
	TLNE	BFPTR,IND.BIT		; is incore bit set?
	JRST	INCORE			; yes, different call
	HRRZI	R,0(BFPTR)		; get disk page address
	PUSHJ	TOPP,VFRFP.		; free it
	JRST	DELLOP			; and back to top

INCORE:	PUSHJ	TOPP,VKBFP.		; free it, addr already in BFPTR
	JRST	DELLOP

; VCREA. -- create area.  Get a buffer for the page table, initialize the
;   location in the area table, and give the new area a new page.

VCREA.:	PUSHJ	TOPP,VGTBF.		; get buffer for page table
	MOVE	ATBWD,VATBL.		; get area table address
	ADDI	ATBWD,0(AC1)		; append area index
	SKIPE	0,0(ATBWD)		; is there already an entry there?
	JRST	CR2WCE			;    yes, attempt to create twice
	TLO	BFPTR,IND.BIT		; set incore bit in entry
	MOVEM	BFPTR,0(ATBWD)		;   and install ptable pointer in atable
	TLZ	BFPTR,IND.BIT		; don't leave indirect bit hanging on

	SETZM	0,ALCTB.(AC1)		; initialize allocator table word
	MOVE	R,VORG.			; pick up addr of origin table
	ADDI	R,0(BFIDX)		; tack on index into table
	HRLZM	ATBWD,0(R)		;   and install back pointer to ptable

	SETZM	0,0(BFPTR)		; zero out first word in page table
	HRLI	R,0(BFPTR)		;   and set up to zero rest
	HRRI	R,1(BFPTR)		; pointers for BLT
	BLT	R,PAGSIZ-1(BFPTR)	; do the zero-ing

	MOVEI	PTBWD,0(BFPTR)		; get pointer to page table entry
	MOVEI	PTIDX,0(BFIDX)		; and set page table buffer index
	JRST	PGNRML			; initialize a page and go home

; CHUCKM -- helper for deleting pages in areas. Limits are in static cells
;   CHLLIM and CHHLIM. AC1 has area number

CHUCKM:	MOVEI	ATBWD,VATBL.		; our usual walk down area table
	MOVE	R,CHLLIM		; get lower limit to start with
	IDIVI	R,PAGSIZ		;   get magic numbers

CHKLOP:	MOVE	ATBWD,0(ATBWD)		; get table address
	JUMPE	ATBWD,BADPAG		; zero -- illegal page number
	SOJGE	R,CHKLOP		; back if any more

	EXCH	AC1,CHLLIM		; save AC1, get first page
	SUB	AC1,CHHLIM		; get negative number to free
	HRLI	AC1,-1(AC1)		; place in left half, with one extra
	ADDI	AC1,0(R2)		; tack on offset
	ADD	ATBWD,CHLLIM		; add saved area number to areatab addr
	PUSHJ	TOPP,VBPTI.		; get page table
	ADDI	AC1,0(PTBWD)		; and all's ok

CHKNXT:	MOVE	R,0(AC1)		; pick up page table entry
	JUMPE	R,CHNEXT		; not there, try next one
	TLNE	R,IND.BIT		; is incore bit set?
	JRST	CHINCO			; yes, different deal
	HRLI	R,0			; else clear left to get disk addr
	PUSHJ	TOPP,VFRFP.		; free disk page
CHNEXT:	AOBJP	AC1,CHDONE		; if exhausted, all done
	TRNE	AC1,PAGSIZ-1		; else check for page overflow
	JRST	CHKNXT			; all's cool

	SKIPN	ATBWD,0(ATBWD)		; else get next area table
	JRST	BADPAG			; not there -- error
	ADD	ATBWD,CHLLIM		; add area number save in core
	PUSHJ	TOPP,VBPTI.		; get next page table
	HRRI	AC1,0(PTBWD)		; replace addr in AC1
	JRST	CHKNXT			; back to top

CHINCO:	HRRZ	BFPTR,0(R)		; load up buffer pointer
	PUSHJ	TOPP,VKBFP.		; kill incore page
	JRST	CHNEXT			; back to top

CHDONE:	MOVE	AC1,CHLLIM		; restore AC1
	POPJ	TOPP,0

;
; error routines

DSPOS.:
MARK.:
NEW.:
RLEAS.:	MOVEI	R,[asciz/
?	Virtual heap program has non-virtual module/]
	JRST	VLCOUT

CR2WCE:	MOVEI	R,[asciz/
?	Attempt to create same area twice/]
	JRST	VLCOUT

BADPAG:	MOVEI	R,[asciz/
?	Illegal page number in virtual allocator/]
	JRST	VLCOUT

TOOBIG:	MOVEI	R,[asciz/
?	Cannot allocate record larger than page/]
	JRST	VLCOUT

INTERR:	MOVEI	R,[asciz/
?	Internal error in virtual allocator/]
	JRST	VLCOUT

RLSERR:	MOVEI	R,[asciz/
?	Bad heapmark in virtual release/]
	JRST	VLCOUT

ARZERO:	MOVEI	R,[asciz/
?	Attempt to allocate in area zero/]
	JRST	VLCOUT

DSPREV:	MOVEI	R,[asciz/
?	Attempt to dispose a disposed pointer/]
	JRST	VLCOUT

DSPERR:	MOVEI	R,[asciz/
?	Bad pointer in virtual DISPOSE/]

VLCOUT:	PUSHJ	TOPP,TWAIT.
	OUTSTR	0(R)
	MOVE	AC0,0(TOPP)
	PUSHJ	TOPP,WRTPC.
	JRST	DIE.

	$low
ALCTB.:	block	AMAX			; table, one word per area

CHLLIM:	exp	0			; low and high bounds for chuckm
CHHLIM:	exp	0
PGTEMP:	exp	0			; temp for making virtual address
	$high

PTINFO:	point	OFIELD,0(PTBWD),<OFIELD-1> ; to manipulate size data in page table
	lit
	end
  fz|_