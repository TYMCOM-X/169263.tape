#DOCUMENT(M68000 Project - DJM,,45,,100)
$POSITIONS +0,+4,+4,+4,+4,+4
#SECT_DEFAULT(66,0,3,1,2,1)
#NAME(MONTAG)
#TASK(Object File Analyzer)The 
Object File Analyzer is a stand-alone program that reads in the
relocatable object file generated by the Pascal compiler, breaks
its contents up into their logical records, and prints out the values
of each of the component fields of these logical records.
#SCHEDULE(11/16/81,12/07/81,1)
#ACTUAL(11/16/81,12/04/81)
#PROGRESS(12/04/81)
The Analyzer is complete and tested, currently in (PASDEV4)M68DMP.PAS.
#TASK(Code List Emission routines)The 
Code List Emission routines are are collection of routines that
do all the processing on the code lists once they have been generated
by the Code Generator to create the Relocatable Object File and the
Assembly Code Listing.
#SCHEDULE(12/07/81,01/18/82,1)
#SCHEDULE(12/07/81,02/08/82)
#ACTUAL(12/07/81,02/17/82)
#PROGRESS(12/11/81)
Started.
#PROGRESS(01/08/82)
Due to illness the week before Christmas, and a long vacation, 
the emitter routines appear to be 3 weeks behind schedule.
#PROGRESS(01/21/82)
Still working on them, might be done by new deadline.
#PROGRESS(02/05/82)
Almost done, should be finished sometime next week.
#PROGRESS(02/71/82)
Finally finished.
#BEGINLEVEL
#TASK(Emission routines)The 
Emission routines are 5 routines that are the only 5 entry points
to the emission section of the Code Generator.  These routines
check to see which options are set, and use this information to 
determine whether or not to call the Object File routines and/or
the Assembly Listing routines.
#SCHEDULE(12/07/81,01/11/82,1)
#SCHEDULE(12/07/81,02/08/82)
#ACTUAL(12/07/81,02/10/82)
#PROGRESS(12/11/81)
Started.
#PROGRESS(01/08/82)
3 of the 5 routines are done.  This section appears to be about
1 week behind schedule.
#PROGRESS(01/21/82)
Still working on them, might be done by new deadline.
#PROGRESS(02/05/82)
No change.  I can't tell how long one of the routines (emt_fixup)
is going to take, nor whether I'm supposed to code it or if someone
else is going to.
#PROGRESS(02/17/82)
The emission routines are complete, and are currently in
(PASDEV4)M68EMT.PAS.
#BEGINLEVEL
#TASK(Design Emission routines,N)
#SCHEDULE(12/07/81,01/06/82,1)
#ACTUAL(12/07/81,01/06/82)
#PROGRESS(12/11/81)
Started.
#PROGRESS(01/08/82)
The emission routines are designed.
#TASK(Implement skeleton program with stubs,N)
#SCHEDULE(12/07/81,12/14/81,1)
#ACTUAL(12/07/81,12/11/81)
#PROGRESS(12/11/81)
The skeleton program with stubs is complete and tested, and is
currently in (PASDEV4)M68EMT.PAS.
#TASK(Fill out stubs,N)
#SCHEDULE(12/14/81,01/11/82,1)
#SCHEDULE(12/14/81,02/08/82)
#ACTUAL(12/11/81,02/10/82)
#PROGRESS(12/11/81)
Started.
#PROGRESS(01/08/82)
There are still 2 routines to be coded, which will probably take about
1 week.
#PROGRESS(01/21/82)
Still working on them, might be done by new deadline.
#PROGRESS(02/05/82)
There are still 2 routines to be coded, one of which is relatively
easy, but the other is a mystery to me.  See progress report above.
#PROGRESS(02/17/82)
Finished (finally).
#ENDLEVEL
#TASK(Object File Emission routines)The 
Object File Emission routines are a collection of routines that
actually emit the object code into the relocatable object file, using
the internal data structures of the compiler.
#SCHEDULE(11/16/81,01/18/82,1)
#SCHEDULE(11/16/81,02/08/82)
#ACTUAL(11/16/81,02/17/82)
#PROGRESS(12/04/81)
A preliminary version of the Emitter is running to generate object
files to test the Object File Analyzer with.  It emits all four types  
of logical records, including all subtypes.  It does not yet contain
the logic to convert an actual compiler code list into object code
to be emitted.  Instead, it generates records containing dummy 
information.
#PROGRESS(01/08/82)
Due to illness the week before Christmas vacation, and a long vacation,
this section appears to be about 3 weeks behind schedule.
#PROGRESS(01/21/82)
Still working on it, might be done by new deadline.
#PROGRESS(02/05/82)
Almost done, should be done sometime next week.
#PROGRESS(02/17/82)
Finished (finally).
#BEGINLEVEL
#TASK(Design Object File Emission routines,N)
#SCHEDULE(11/16/81,01/11/82,1)
#SCHEDULE(11/16/81,02/08/82)
#ACTUAL(11/16/81,02/05/82)
#PROGRESS(12/11/81)
Started.
#PROGRESS(01/08/82)
One of the major routines, the routine to convert a code list into
actual object code, is still not completely designed.  It should be
designed within 10 days.
#PROGRESS(01/21/82)
Still working on it, might be done by new deadline.
#PROGRESS(02/05/82)
All the routines are designed.
#TASK(Implement skeleton program with stubs,N)
#SCHEDULE(11/16/81,12/11/81,1)
#ACTUAL(11/16/81,12/11/81)
#PROGRESS(12/11/81)
The skeleton program with stubs is complete and tested, and is 
currently in (PASDEV4)M68REL.PAS.
#TASK(Fill out stubs,N)
#SCHEDULE(12/14/81,01/18/82,1)
#SCHEDULE(12/14/81,02/08/82)
#ACTUAL(12/11/81,02/17/82)
#PROGRESS(12/11/81)
Started.
#PROGRESS(01/08/82)
Most of the stubs are filled out, with the major exception of
the routine to convert a code list to actual object code, which
hasn't been designed yet.  It should take about 3 weeks to complete
this.
#PROGRESS(01/21/82)
Still working on it, might be done by new deadline.
#PROGRESS(02/05/82)
Almost done, should be done sometime next week.
#PROGRESS(02/17/82)
Finished (finally).
#ENDLEVEL
#TASK(Assembly Code Listing routines)The 
Assembly Code Listing routines are a collection of routines that
print out a listing of the assembler instructions generated by the
code generator.
#SCHEDULE(12/07/81,01/18/82,1)
#ACTUAL(12/07/81,01/15/82)
#PROGRESS(01/08/82)
Due to illness the week before Christmas vacation, and a long vacation,
it appears that this section is about 2 weeks behind schedule.
#PROGRESS(01/15/82)
The Assembly Listing Routines are complete, but not tested with an
actual code list, and are currently in (PASDEV4)M68MAC.PAS.
#BEGINLEVEL
#TASK(Design Assembly Code Listing routines,N)
#SCHEDULE(12/07/81,01/11/82,1)
#ACTUAL(12/07/81,01/12/82)
#PROGRESS(12/11/81)
Started.
#PROGRESS(01/08/82)
There are still many of the routines that need to be designed.
It appears to be about 1 week behind schedule.
#PROGRESS(01/15/82)
The Assembly Listing routines are all designed.
#TASK(Implement skeleton program with stubs,N)
#SCHEDULE(12/07/81,12/14/81,1)
#ACTUAL(12/07/81,12/11/81)
#PROGRESS(12/11/81)
The skeleton program with stubs is complete and tested, and is 
currently in (PASDEV4)M68MAC.PAS.
#TASK(Fill out stubs,N)
#SCHEDULE(12/14/81,01/18/82,1)
#ACTUAL(12/11/81,01/14/82)
#PROGRESS(12/11/81)
Started.
#PROGRESS(01/08/82)
Many of the stubs are still left to be filled out.  Appears
to be 2 weeks behind schedule.
#PROGRESS(01/15/82)
All the stubs are filled out.
#ENDLEVEL
#ENDLEVEL
#TASK(I/O Routines)The
I/O routines are made up of 5 different types of I/O's: text,
typed, binary, getstring, and putstring.
#SCHEDULE(02/08/82,03/22/82,1)
#ACTUAL(02/24/82)
#PROGRESS(03/05/82)
All of the entry points have been defined for all the I/O routines.
Most of the routines for text I/O have been designed and coded.
Some of the routines for typed and binary I/O have been designed
and started.
#PROGRESS(03/12/82)
All of the code for text, typed, and binary I/O is in place,
and is now being tested.  Getstring and putstring are not yet
started.
#BEGINLEVEL
#TASK(Text I/O)The
text I/O processing code is embedded in the common I/O routines.
#SCHEDULE(02/08/82,03/08/82,1)
#ACTUAL(02/24/82)
#PROGRESS(03/05/82)
Most of the code for processing text I/O has been designed and coded.
The routines to open a text file, and start and finish an I/O
statement are complete, as is the routine to process all the I/O
statements that are merely passed along as a call to the runtime.
#PROGRESS(03/12/82)
All of the code for text I/O is in place, and is now being tested.
The read/write routine has been tested for integer conversions,
and is now being tested for real, string, and boolean I/O.
#TASK(Typed I/O and Binary I/O)The
code for processing typed and binary I/O is embedded in the common
I/O routines.
#SCHEDULE(03/08/82,03/15/82,1)
#ACTUAL(02/24/82)
#PROGRESS(03/05/82)
The stubs for processing typed and binary I/O have been coded.
#PROGRESS(03/12/82)
All the code for typed and binary I/O is in place, but has not
been tested yet.
#TASK(Getstring and Putstring)The
getstring and putstring processing code is embedded in the common
I/O routines.
#SCHEDULE(03/15/82,03/22/82,1)
#ACTUAL(02/24/82)
#PROGRESS(03/05/82)
The stubs for processing get/putstrings have been coded.
#ENDLEVEL
  