	TITLE	REBLD
	SUBTTL	PROGRAM TO REBUILD A CORE-IMAGE FILE TO MACRO-10

	.REQUIRE	REL:HELPER
	SUBTTL	PARAMETERS

	VREBLD==1
	VEDIT==3
	VWHO==0
	VMINOR==0

	VOTHER==0
	VEDIT==VEDIT+<<VOTHER>>*10000 ;THIS SYSTEM WORKS WITH 'SOUP'

	.JBVER==137
	LOC	.JBVER
	BYTE	(3)VWHO(9)VREBLD(6)VMINOR(18)VEDIT
	RELOC

	FL==0			;AC ASSIGNMENTS
	A==1
	B==2
	C==3
	D==4
	E==5
	F==6
	G==7
	T1==10
	T2==11
	T3==12
	T4==13
	P1==14
	P2==15
	P3==16
	P==17

	FL.ABT==1
	FL.QTE==2

	FR.PS1==1
	FR.ARG==2
	FR.FIN==4
	FR.FOT==10
	FR.OBJ==20
	FR.HGH==40		;READING A HGH(OR SHR) FILE
	FR.HSG==100		;HAS SEEN A HGH SEG
	FR.LSG==200		;HAS SEEN A LOW SEG
	FE.INS==400		;IGNORE NO SUCH FILE
	FR.COM==1000		;PUT IN SEMICOLONS
	FR.6BC==2000		;COMMENT WITH 6-BIT
	FR.7BC==4000		;COMMENT WITH ASCIZ

	FTPASC==1		;NON-0 TO GET PASCAL-LIKE AC NAMES
	PDSZ==100
	.LARGE==XWD 377777,-1	;LARGE +VE #
	MDEV1==10		;CH 1 =BINARY
	MDEV2==1		;CH 2 =ASCII
	MEMSZ==^D4000		;# OF LABEL ADDRS
	ATSZ==<MEMSZ+1>/2	;# OF WORDS FOR TABLE
	SUBTTL	I/O CHANNEL PARAMETERS

IFNDEF NIFL,<NIFL==1>		;# OF INPUT FILE CHANNELS
IFNDEF NOFL,<NOFL==1>		;#    OUTPUT  "      "
IFN NIFL,<
IFNDEF NIBF,<NIBF==6>		;# INPUT BUFFERS
>
IFN NOFL,<
IFNDEF NOBF,<NOBF==6>		;# OUTPUT BUFFERS
>

	DEFINE	%IOCHN<
	%%N==1
REPEAT NIFL,<
	X	\%%N
	%%N==%%N+2
>
	%%N==2
REPEAT NOFL,<
	X	\%%N
	%%N==%%N+2
>>

;DEFINE CHANNEL NUMBERS

	DEFINE	X(XA)<
	CH'XA=='XA
>
	%IOCHN

;DEFINE CHANNEL DEFAULT MODES & DEVICES

	DEFINE	X(XA)<
IFNDEF MDEV'XA,<MDEV'XA==10>
IFNDEF NDEV'XA,<NDEV'XA==SIXBIT /DSK/>
>

	%IOCHN
	SUBTTL	MACROS & OPDEFS

	OPDEF	PJRST[JRST]

	DEFINE	ZZ<
	BLOCK	1
>

	DEFINE	TT1(X)<
	PUSHJ	P,TT1F
	JUMP	X
>

	DEFINE	TT3(X)<
	PUSHJ	P,TT3F
	JUMP	X
>

	DEFINE	ERROR(X)<
	PUSHJ	P,FAIL
	JUMP	X
>

	DEFINE	ERRFIL(X)<
	PUSHJ	P,FILERR
	JUMP	X
>

	DEFINE	ERRDEV<
	PUSHJ	P,DEVERR
>

	TWOSEG
	RELOC	400000

	SALL
	SUBTTL	MAIN PROG

START:	RESET			;RESET ALL
	SETZ	FL,0		;CLEAR FLAGS
	MOVE	P,[IOWD PDSZ,PDL] ;SET UP PDL

;INSERT CODE TO SETUP DEVICE BLOCKS

	DEFINE	X(XA)<
IFN %%N&1,<BDEV==BUF'XA>
IFE %%N&1,<BDEV==XWD BUF'XA,0>
	HRLI	A,[EXP MDEV'XA
		   EXP NDEV'XA
		   EXP BDEV]
	HRRI	A,DEV'XA
	BLT	A,DEV'XA+2
>

	%IOCHN
ST:	GETPPN	A,0
	  JFCL
	MOVEM	A,U.PPN

ST.0:	PUSHJ	P,CMD

ST.1:	MOVE	A,SB.NME
	HLLZ	B,SB.EXT
	MOVE	C,SB.PPN
	MOVE	D,SB.DEV
	MOVEM	A,FNM
	MOVEM	B,FNM+1
	SETZM	FNM+2
	MOVEM	C,FNM+3
	MOVEM	D,DEV1+1
	MOVE	A,.JBFF##
	MOVEM	A,SAVFF
	PUSHJ	P,OPN.1		;...
	  JRST	ST.0		;BAD

	TRNE	FL,FR.PS1	;IS THIS PASS ONE?
	JRST	ST.2		;NO
	PUSHJ	P,PASS		;YES
	JRST	ST.1		;GO FOR PASS 2

ST.2:	MOVE	A,OB.NME
	HLLZ	B,OB.EXT
	MOVE	C,OB.PPN
	MOVE	D,OB.DEV
	MOVEM	A,FNM
	MOVEM	B,FNM+1
	SETZM	FNM+2
	MOVEM	C,FNM+3
	MOVEM	D,DEV2+1
	SETZM	DEV2
	PUSHJ	P,OPN.2		;...
	  JRST	ST.0
	TRO	FL,FR.FOT	;SAY FILE OUT

	PUSHJ	P,HEAD		;OUTPUT HEADING STUFF
	PUSHJ	P,PASS		;PROCESS CODE

	PUSHJ	P,TRAIL		;OUTPUT TRAILER
	PUSHJ	P,CLS.2		;CLOSE OUTPUT
	TRZ	FL,FR.FOT	;CLEAR FILE OUT FLAG

	JRST	ST.0		;LOOP
;
; AC NAME TABLE
;

ACTAB:

IFE FTPASC,<
	SIXBIT	/AC0/
	SIXBIT	/AC1/
	SIXBIT	/AC2/
	SIXBIT	/AC3/
	SIXBIT	/AC4/
	SIXBIT	/AC5/
	SIXBIT	/AC6/
	SIXBIT	/AC7/
	SIXBIT	/AC10/
	SIXBIT	/AC11/
	SIXBIT	/AC12/
	SIXBIT	/AC13/
	SIXBIT	/AC14/
	SIXBIT	/AC15/
	SIXBIT	/AC16/
	SIXBIT	/P/
>				;END OF FTPASC

IFN FTPASC,<			;PASCAL RUNTIME SYSTEM COMPATABILITY OPTION
	SIXBIT	/AC0/
	SIXBIT	/AC1/
	SIXBIT	/REG/
	SIXBIT	/REG1/
	SIXBIT	/REG2/
	SIXBIT	/REG3/
	SIXBIT	/REG4/
	SIXBIT	/REG5/
	SIXBIT	/REG6/
	SIXBIT	/BUFPNT/
	SIXBIT	/AC12/
	SIXBIT	/AC13/
	SIXBIT	/AC14/
	SIXBIT	/AC15/
	SIXBIT	/BASIS/
	SIXBIT	/P/
>				;END OF PASCAL-COMPATABLE DEFNS
	SUBTTL	COMMAND DECODER

CMD:	PUSH	P,[EXP CMD]
	SETZ	D,		;CLEAR DELIMITER
CM.0:	TRZ	FL,FR.ARG!FR.OBJ
	PUSHJ	P,DEFLT		;SET DEFAULTS
	TTCALL	13,0		;CLEAR ^O
	  JFCL
	TTCALL	1,[EXP "*"]	;SEND READY SYMBAL

CM.SC:	SKIPN	A,D		;GET OLD DELIMITER
	PUSHJ	P,.GETA 	;READ CH
	SETZ	D,
	CAIN	A,12		;IS IT LF?
	JRST	PROC		;YES - EO COM
	CAIN	A,"/"		;IS IT A SWITCH
	JRST	SWR		;YES
	CAIN	A,"."		;IS IT AN EXTENSION?
	JRST	EXR		;YES
	CAIN	A,"["		;IS IT A PPN?
	JRST	PPR		;YES
	CAIE	A,"_"		;IS IT BACK-ARROW
	CAIN	A,"="		;OR "="
	JRST	BKR
	PUSHJ	P,.NUMBA	;CHECK FOR A/N
	PUSHJ	P,.ALPHA	;...
	  CAIA			;YES
	JRST	CM.SC		;BAD CHARACTER - IGNORE
	PUSHJ	P,RD61 		;NEXT OK - GET AN IDENTIFIER
	CAIN	D,":"		;WAS IT A DEVICE NAME?
	JRST	DVR		;YES
	JRST	FNR		;NO - ASSUME FILE NAME
PROC:	TRNN	FL,FR.ARG	;ANYTHING TYPED?
	POPJ	P,0		;NO
	MOVE	A,SB.NME	;GET SUBJECT NAME
	SKIPN	OB.NME		;OBJECT NAME GIVEN?
	MOVEM	A,OB.NME	;NO - SAME AS SUBJECT
	HLRZ	A,OB.EXT	;GET OBJECT EXT
	CAIN	A,-1		;SPECIFIED?
	MOVEI	A,(SIXBIT /RBD/) ;NO - ENTER DEFAULT
	HRLZM	A,OB.EXT	;RESET
	HLRZ	A,SB.EXT	;GET EXT
	CAIN	A,-1		;IS IT UNSPECIFIED?
	PUSHJ	P,GEXT		;YES - SUS OUT THE EXT
	POP	P,(P)		;KILL ERROR TRAP
	POPJ	P,0		;RETURN
SWR:	PUSHJ	P,RD6		;READ A SWITCH
	MOVEI	B,SWTBL		;SET ADDR OF SWITCH TABLE
	PUSHJ	P,CSCAN		;FIND IT IN TABLE
	JUMPL	B,BADSW		;BAD?
	JRST	@SWDIS(B)	;DISPATCH

BADSW:	MOVE	E,A
	TRNE	B,1		;UND OR AMB?
	ERROR	5
	ERROR	6
;HERE IF FILE NAME ASSUMED

FNR:	TRO	FL,FR.ARG
	PUSHJ	P,WLDTST	;CHECK FOR WILD CHARS
	ERROR	3
	MOVEM	A,SB.NME	;HOLD TYPED FILE NAME
	JRST	CM.SC

;HERE TO READ EXTENSION

EXR:	TRO	FL,FR.ARG
	PUSHJ	P,RD6		;READ AN EXTENSION
	PUSHJ	P,WLDTST
	ERROR	3
	HLLZM	A,SB.EXT	;SAVE TYPED EXTENSION
	JRST	CM.SC
;HERE TO READ PPN

PPR:	TRO	FL,FR.ARG
	PUSHJ	P,RD6		;READ PPN
	PUSHJ	P,WLDTST
	ERROR	7
	PUSHJ	P,OF6		;CONVERT TO OCTAL
	ERROR	1
	HRLM	A,SB.PPN
	PUSHJ	P,RD6
	PUSHJ	P,WLDTST
	ERROR	7
	PUSHJ	P,OF6
	ERROR	1
	HRRM	A,SB.PPN
	JRST	CM.SC

DVR:	TRO	FL,FR.ARG
	PUSHJ	P,WLDTST
	ERROR	10
	MOVEM	A,SB.DEV
	JRST	CM.SC

BKR:	TRO	FL,FR.OBJ
	MOVE	A,[XWD SB.DEV,OB.DEV]
	BLT	A,OB.PPN
	PUSHJ	P,DEFLTS
	JRST	CM.SC
	SUBTTL	COMMAND DECODER - SWITCH DISPATCH ROUTINES

;PROCESS 'DDT' REQUEST. NOTE: EXIT FROM DDT WITH '$G'

CDDT:	SKIPN	A,.JBDDT##	;GET DDT ADDR
	ERROR	4
	HRRZ	B,.JBSA##	;GET REAL START ADDR
	MOVEM	B,SAVSA		;SAVE IT
	MOVEI	B,RDDT		;GET ADDR TO RETURN ON '$G' FROM DDT
	HRRM	B,.JBSA##	;SAVE
	TTCALL	3,[ASCIZ /%DDT:/]
	JRST	(A)		;GOTO DDT
RDDT:	MOVE	A,SAVSA		;RESET START ADDR
	HRRM	A,.JBSA##	;...
	JRST	CM.SC

HLP:	MOVE	A,[SIXBIT /REBLD/]
	PUSHJ	P,.PVERS
	PUSHJ	P,XCRLF
	PUSHJ	P,.HELPR##
	JRST	CM.SC

COM:	TRO	FL,FR.COM	;SET COMMENT FLAG
	CAIE	D,":"		;ARG?
	JRST	CM.SC		;NO
	PUSHJ	P,RD6		;YES - GET ARG
	MOVE	E,A		;SAVE ARG IN CASE ERROR
	MOVEI	B,COMTBL	;ADDR OF VALID ARGS
	PUSHJ	P,CSCAN		;FIND ARG
	SKIPL	B		;FOUND?
	JRST	@COMDIS(B)	;YES - DISPATCH
	TRNE	B,1		;UND/AMB?
	ERROR	11
	ERROR	12

C6D:	TRO	FL,FR.6BC	;6-BIT
	JRST	CM.SC
C7D:	TRO	FL,FR.7BC	;7-BIT
	JRST	CM.SC
	SUBTTL	COMMAND DECODER - OTHER ROUTINES

DEFLT:	TRZ	FL,FR.PS1!FR.HSG!FR.LSG!FR.COM!FR.6BC!FR.7BC
	SETZM	LINE		;CLEAR LINE COUNT
	SETOM	STRT		;CLEAR CONFIG PARAS
	SETOM	REEN
	SETZM	LOWEND
	MOVEI	A,400000
	MOVEM	A,HGHEND
	SETZM	ADDCNT
	MOVE	A,[SIXBIT /      /] ;DEFAULT FILE NAME
	MOVEM	A,OB.NME
	MOVSI	A,(SIXBIT /MAC/)
	MOVEM	A,OB.EXT
	MOVE	A,U.PPN
	MOVEM	A,OB.PPN
	MOVE	A,[SIXBIT /TTY   /]
	MOVEM	A,OB.DEV

DEFLTS: MOVE	A,[SIXBIT /      /]
	MOVEM	A,SB.NME
	MOVSI	A,-1		;SET DEFAULT EXT (CHECKED LATER)
	MOVEM	A,SB.EXT
	MOVE	A,U.PPN
	MOVEM	A,SB.PPN
	MOVE	A,[SIXBIT /DSK/]
	MOVEM	A,SB.DEV
	POPJ	P,0
WLDTST: MOVE	B,[XWD 440600,A] ;CHECK FOR WILD CHARACTERS IN A
	MOVEI	C,6
WT.1:	ILDB	G,B
	CAIN	G,'?'
	POPJ	P,0
	CAIN	G,'*'
	POPJ	P,0
	SOJG	C,WT.1
	JRST	CPOPJ1
PASS:	PUSHJ	P,LOOP		;PROCESS FILE
	MOVE	A,SAVFF		;RESET JOBFF
	MOVEM	A,.JBFF##	;...
	TRNE	FL,FR.HGH	;WAS THAT A HGH?
	JRST	PSS.1		;YES - LOOK FOR A LOW
PSS.2:	TRO	FL,FR.PS1	;PASS 1 COMPLETE
	POPJ	P,0		;RETURN

PSS.1:	MOVSI	A,(SIXBIT /LOW/)
	EXCH	A,SB.EXT	;SET NEW EXT
	MOVEM	A,SAVEXT	;SAVE ORIGINAL EXT
	MOVE	A,SB.NME
	MOVE	B,SB.EXT
	MOVE	C,SB.PPN
	MOVE	D,SB.DEV
	MOVEM	A,FNM
	MOVEM	B,FNM+1
	SETZM	FNM+2
	MOVEM	C,FNM+3
	MOVEM	D,DEV1+1
	TRO	FL,FE.INS	;IGNORE NO SUCH FILE
	MOVE	A,.JBFF##	;SAVE JOBFF
	MOVEM	A,SAVFF		;...
	PUSHJ	P,OPN.1		;TRY TO GET IT
	  TRZA	FL,FE.INS	;NO
	TRZA	FL,FE.INS	;OK
	JRST	PSS.3		;CONTINUE
	TRNN	FL,FR.PS1	;PASS 2?
	JRST	PSS.4		;NO
	PUSHJ	P,CNGSEG	;YES - CHANGE SEGMENT
	PUSHJ	P,XCRLF
PSS.4:	PUSHJ	P,LOOP
	MOVE	A,SAVFF		;RESET JOBFF
	MOVEM	A,.JBFF##	;...
PSS.3:	MOVE	A,SAVEXT	;RESET ORIGINAL EXT
	MOVEM	A,SB.EXT	;...
	JRST	PSS.2		;CONTINUE
	SUBTTL	SUBROUTINES

LOOP:	SETOM	LSTADD		;CLEAR ADDR COUNT
	SETZM	SAVADD		;CLEAR ZERO FILL LOCATIONS
	SETZM	SAVINS		;...
	HLRZ	A,SB.EXT	;GET EXT
	CAIE	A,(SIXBIT /HGH/) ;IS IT HGH?
	CAIN	A,(SIXBIT /SHR/) ;...
	TROA	FL,FR.HGH	;YES
	TRZ	FL,FR.HGH	;NO
	MOVEI	B,-2		;LARGE ADDR
LP:	SKIPE	SAVADD		;ZERO FILLING?
	JRST	LP.1		;YES
	MOVEI	C,(B)		;SAVE LATEST ADDR
	PUSHJ	P,GETWRD	;READ A WORD
	  JRST	LP.X		;EOF
	TRNN	FL,FR.HGH	;NO ZERO FILL FOR HGH
	CAIG	B,1(C)		;IS IT WHAT WE EXPEXTED?
	JRST	LP.2		;YES
	PUSHJ	P,SETZER	;NO - SET FOR FILLING
LP.1:	PUSHJ	P,GETZER	;CHECK OUT A ZERO
LP.2:	CAIN	B,400000	;IS IT VESTIBULE JOB DATA?
	PUSHJ	P,HSA		;YES
	CAIN	B,400003	;...
	PUSHJ	P,HRN		;...
	CAIN	B,.JBHRL##	;IS IT JOBHRL?
	PUSHJ	P,HRL		;YES
	CAIN	B,.JBSA##	;JOBSA?
	PUSHJ	P,SA		;YES
	CAIN	B,.JBREN##	;JOBREN?
	PUSHJ	P,REN		;YES
	PUSHJ	P,INSTR		;SORT OUT INSTRUCTION
	JRST	LP		;LOOP THRU FILE

SETZER:	MOVEM	A,SAVINS	;SAVE INSTRUCTION WORD
	MOVEM	B,SAVADD	;SAVE ADDR
	MOVEI	B,(C)		;GO BACK TO LAST GOOD ADDR
	POPJ	P,0		;OK

GETZER:	SETZ	A,0		;ZERO (A)
	AOJ	B,0		;INC ADDR
	CAME	B,SAVADD	;IS THIS WHERE WE SHOULD BE?
	POPJ	P,0		;NO - ALL SET
	EXCH	A,SAVINS	;YES - RESET INST & ZERO SLOTS
	MOVE	B,SAVADD	;...
	SETZM	SAVADD		;...
	POPJ	P,0		;RETURN

LP.X:	PJRST	XPNSEG		;FINISH OFF SEGMENT
HSA:	HLRZM	A,LOWEND	;SET LOW SEG END
	TRNE	A,-1		;IS IT REAL?
	HRRZM	A,STRT		;YES
	POPJ	P,0		;RETURN

HRN:	PUSH	P,A		;SAVE (A)
	TRNE	A,-1		;REAL?
	HRRZM	A,REEN		;YES - SAVE REENTER ADDR
HRN.1:	HLRZS	A		;GET HGH SEG SIZE
	ADDI	A,400000	;...
	TRNE	A,377777	;TEST
	MOVEM	A,HGHEND	;OK - SAVE
	JRST	APOPJ		;RETURN

HRL:	PUSH	P,A		;SAVE A
	PJRST	HRN.1		;CONTINUE

SA:	PJRST	HSA		;CONTINUE

REN:	TRNE	A,-1		;REAL?
	HRRZM	A,REEN		;YES
	POPJ	P,0		;RETURN
INSTR:	MOVEM	A,INST		;SAVE INSTRUCTION
	MOVEM	B,ADDR		;SAVE ADDR
	TRNN	FL,FR.PS1	;IS IT PASS 1?
	JRST	IN.5		;YES
	MOVE	C,INSM2		;LOOK AT HISTORY
	MOVE	D,INSM1		;...
	TLNN	C,IN.SKP	;COULD -2 SKIP?
	TLNN	D,IN.JMP	;WAS -1 A JUMP?
	CAIA			;NO
	PUSHJ	P,XCRLF		;YES - SPACE OFF ROUTINE
	CAIE	B,140		;CHECK FOR COMING OUT OF JD
	CAIN	B,400010	;...
	PUSHJ	P,XCRLF
	CAIGE	B,400010	;CHECK FOR JOB DATA
	CAIGE	B,400000	;...
	CAIA
	JRST	IN.JD		;YES
	CAIGE	B,140		;...
	CAIGE	B,0		;...
	JRST	IN.4		;OK
IN.JD:	JUMPE	A,IN.X		;IGNORE ZEROS
	TT1	<[EXP ";"]>
	MOVE	A,ADDR		;GET ADDR
	PUSHJ	P,DCO6		;DECODE
	HRLZS	A		;LS 3 DIGITS
	TRNE	B,400000	;HGH?
	JRST	IN.JDH		;YES
	TT1	<[EXP "J"]>
	MOVEI	B,3
	JRST	IN.JD1
IN.JDH:	TT1	<[EXP "V"]>
	MOVEI	B,2
	LSH	A,6
IN.JD1:	PUSHJ	P,TPE6
	JRST	IN.2
IN.4:	SETZ	F,0		;CLEAR OPCODE FLAGS
	MOVE	A,ADDR		;GET ADDR
	PUSHJ	P,OP.LAB	;NO - CHECK FOR LABEL REQD
IN.2:	TT1	<[EXP 11]>	;TAB
IN.5:	LDB	B,[XWD 331100,INST] ;GET OPCODE
	CAIL	B,NUMOPD	;IS IT IN DEFINED RANGE?
	JRST	NONINS		;NO - NOT AN INSTRUCTION
	MOVE	A,.GMTAB(B)	;GET NMONIC
	CAMN	A,[SIXBIT / UNDEF/] ;IS IT DEFINED?
	JRST	NONINS		;NO - NOT AN INSTRUCTION

	MOVE	F,.GMSTS(B)	;GET STATUS FLAGS
	HLRZ	C,INST		;GET LH OD INST
	TRZ	C,37		;CLEAR INDIRECT & INDEX
	CAIN	C,(HALT)	;IS IT A HALT?
	PUSHJ	P,HLT		;YES
	HLRZ	C,INST		;GET OPCODE
	TRZ	C,777		;CLEAR ODD BITS
	CAIN	C,(CALLI)	;IS IT A CALLI?
	PUSHJ	P,CUUO		;YES
	SETO	B,0		;TYPE FORMAT
	TRNN	FL,FR.PS1	;IS THIS PASS ONE?
	JRST	IN.6		;YES
	PUSHJ	P,TPE6		;NO - OUTPUT OPCODE
	TT1	<[EXP 11]>	;TAB
	LDB	A,[XWD 270400,INST] ;GET AC
	TLNE	F,IN.NZA	;SUPPRESS ZERO AC?
	JUMPE	A,IN.3		;YES - IS IT ZERO?
	TLNN	F,IN.NUA	;NO - NUMERIC AC?
	MOVE	A,ACTAB(A)	;NO - GET NAME
	TLNE	F,IN.NUA	;NUMERIC?
	PUSHJ	P,DCO6		;YES - CONVERT TO 6-BIT NUMERIC
	SETO	B,0		;SET TO OUTPUT
	PUSHJ	P,TPE6N		;DO SO
	TT1	<[EXP ","]>	;COMMA
IN.3:	MOVSI	A,20		;IS IT INDIRECT?
	TDNE	A,INST		;...
	TT1	<[EXP "@"]>	;YES
IN.6:	HRRZ	A,INST		;GET ADDR
	PUSHJ	P,OP.ADD	;PROCESS & OUTPUT ADDR
	TRNN	FL,FR.PS1	;PASS 1?
	JRST	IN.X		;YES - ALL DONE
	LDB	A,[XWD 220400,INST] ;NO - GET INDEX
	JUMPE	A,IN.1		;NONE?
	MOVE	A,ACTAB(A)	;NO - GET AC NAME
	TT1	<[EXP "("]>
	SETO	B,0
	PUSHJ	P,TPE6		;OUTPUT
	TT1	<[EXP ")"]>
IN.1:	TRNN	FL,FR.COM	;COMMENT?
	JRST	IN.1A		;NO
	PUSHJ	P,TO32
	TT1	<[EXP ";"]>
IN.1A:	TRNE	FL,FR.6BC	;6-BIT COMMENT?
	PUSHJ	P,COM6		;YES
	TRNE	FL,FR.7BC	;7-BIT COMMENT?
	PUSHJ	P,COM7		;YES
	PUSHJ	P,XCRLF		;END OF INST
	MOVE	A,INSM1		;UPDATE HISTORY
	MOVEM	A,INSM2		;...
	MOVEM	F,INSM1		;...
IN.X:	MOVE	A,INST		;RESTORE ACS
	MOVE	B,ADDR		;...
	POPJ	P,0		;RETURN
NONINS:	MOVSI	F,IN.NME!IN.SKP	;PSEUDO FLAGS
	MOVE	A,INST		;GET INST WORD
	SKIPL	A		;LOOK FOR SMALL CONSTANTS
	CAILE	A,200		;...
	JRST	IN.8		;NO
	TRNE	FL,FR.PS1	;PASS 1?
	TT3	<[ASCIZ /EXP	/]>
	JRST	IN.7
IN.8:	TRNE	FL,FR.PS1	;PASS ONE?
	TT3	<[ASCIZ /XWD	/]> ;NO USE 'XWD' FORMAT
	PUSH	P,A		;SAVE A
	HLRZS	A		;GET LH
	PUSHJ	P,OP.ADD	;OUTPUT
	TRNE	FL,FR.PS1	;PASS 1?
	TT1	<[EXP ","]>	;NO
	POP	P,A		;RESET A
IN.7:	HRRZS	A		;GET RH
	PUSHJ	P,OP.ADD	;OUTPUT
	TRNE	FL,FR.PS1	;PASS 1?
	JRST	IN.1		;NO
	JRST	IN.X		;YES

HLT:	MOVSI	A,740		;CLEAR AC
	ANDCAM	A,INST		;...
	MOVE	A,[SIXBIT /HALT/] ;SET OPCODE
	POPJ	P,0		;RETURN

CUUO:	HRRE	C,INST		;GET CODE
	CAML	C,[EXP -1]	;CHECK RANGE
	CAILE	C,CUOMAX	;...
	POPJ	P,0		;OK - NOT REQD
	HLLZS	INST		;CLEAR CODE PART
	MOVE	A,CUOTAB(C)	;GET UUO NAME
	POPJ	P,0		;RETURN
OP.LAB:	CAMN	A,STRT		;IS THIS THE START ADDR?
	JRST	OPL.2		;YES
	CAMN	A,REEN		;IS THIS THE REEN ADDR?
	JRST	OPL.2		;YES
	PUSHJ	P,FNDADD	;IS ADDRESS IN TABLE?
	  POPJ	P,0		;NO - LABEL NOT REQD
OPL.2:	MOVE	C,INSM2		;CHECK HISTORY
	MOVE	D,INSM1		;...
	TLNE	C,IN.SKP	;SPACE OFF IF NOT AUTOMATIC
	TLNN	D,IN.JMP	;AND A JUMP
	CAIA
	PUSHJ	P,XCRLF		;...
	PUSHJ	P,OP.ADD	;OUTPUT AN ADDR
	TT1	<[EXP ":"]>	;AS A LABEL
	POPJ	P,0		;RETURN

OP.ADD:	PUSH	P,A		;SAVE A
	PUSH	P,B		;SAVE B
	CAMN	A,STRT		;IS THIS THE START?
	JRST	OP.ST		;YES
	CAMN	A,REEN		;IS THIS REENTER?
	JRST	OP.RE		;YES
	CAMG	A,HGHEND	;IS THIS ADDR IN HGH SEG?
	CAIGE	A,400000	;...
	JRST	NOTHGH		;NO
	TLNE	F,IN.IMD	;IS IT IMMEDIATE?
	CAIL	A,400010	;YES - FORGET V JOB DATA
	CAIA
	JRST	NOTHGH		;...
	MOVEI	D,'H'		;YES - SAY HGH
	CAIGE	A,400010	;CHECK FOR VESTIBULE
	JRST	VJBD		;YES
	PUSHJ	P,DCO6		;DECODE
	DPB	D,[XWD 360600,A] ;FORCE CODE
	SETO	B,0		;OUTPUT CODE
	TRNN	FL,FR.PS1	;PASS ONE?
	JRST	REM		;YES - JUST REMEMBER IT
	PUSHJ	P,TPE6		;NO - OUTPUT
	JRST	OPA.X		;RETURN
NOTHGH:	CAMG	A,LOWEND	;IS IT A LOW SEG ADDR?
	CAIGE	A,40		;...
	JRST	NOTLOW		;NO
	TLNE	F,IN.IMD	;IMMEDIATE?
	CAIL	A,140		;YES - FORGET JB DATA
	CAIA			;NO - OK
	JRST	NOTLOW		;ASSUME NOT A LOW SEG ADDR
	MOVEI	D,'L'		;SET FOR CODE
	CAIGE	A,140		;JOB DATA AREA?
	JRST	JBD		;YES
	PUSHJ	P,DCO6		;DECODE ADDR
	CAIA			;LEFT JUSTIFY ADDR
OPA.1:	LSH	A,6		;SHIFT
	LDB	C,[XWD 360600,A] ;GET LH CH
	CAIN	C,'0'		;IS IT STILL '0'?
	JRST	OPA.1		;YES - KEEP GOING
	LSH	A,-6		;NO - OK CORRECT ONE PLACE
	DPB	D,[XWD 360600,A] ;ENTER CODE
	SETO	B,0		;SET TO OUTPUT
	TRNN	FL,FR.PS1	;PASS 1?
	JRST	REM		;YES - JUST REMEMBER IT
	PUSHJ	P,TPE6		;NO - OUTPUT
	JRST	OPA.X		;RETURN
NOTLOW:	TRNN	FL,FR.PS1	;IS THIS PASS ONE?
	JRST	OPA.X		;YES - FORGET IT
	TLNE	F,IN.NME	;IS IT NO ZERO MEM MODE?
	JUMPE	A,NUMMEM	;YES
	CAIGE	A,20		;AN AC?
	TLNE	F,IN.IMD	;IMMEDIATE?
	JRST	NUMMEM		;YES
	MOVSI	C,17		;IS IT INDEXED?
	TDNE	C,INST		;...
	JRST	NUMMEM		;YES
	MOVE	A,ACTAB(A)	;NO - USE AC NAME
	SETO	B,0
	PUSHJ	P,TPE6		;OUTPUT
	JRST	OPA.X		;RETURN
NUMMEM:	MOVE	B,[XWD 10,1]	;OUTPUT OCTAL #
	HRRE	C,A		;CHECK SIGN
	JUMPGE	C,OPA.2		;+VE - OK
	MOVNS	C		;GET +VE VERSION
	CAILE	C,200		;IS IT SMALL -VE?
	JRST	OPA.2		;NO - USE OCTAL
	TT1	<[EXP "-"]>	;YES - SIGN IT
	MOVE	A,C		;GET ADDR
OPA.2:	PUSHJ	P,PRNT		;OUTPUT
OPA.X:	POP	P,B		;RESTORE B
	JRST	APOPJ		;RETURN

OP.ST:	TRNN	FL,FR.PS1	;PASS ONE?
	JRST	OPA.X		;YES - FORGET IT
	TT3	<[ASCIZ /START/]> ;SAY START
	JRST	OPA.X		;RETURN
OP.RE:	TRNN	FL,FR.PS1	;PASS ONE?
	JRST	OPA.X		;YES - ALL DONE
	TT3	<[ASCIZ /REEN/]> ;SAY REENTER
	JRST	OPA.X		;OK
VJBD:	TRNN	FL,FR.PS1	;PASS 1?
	JRST	OPA.X		;YES
	SUBI	A,400000	;CORRECT FOR JOB DATA SYMBAL
	TT3	<[ASCIZ /400000+/]>
JBD:	TRNN	FL,FR.PS1	;PASS 1?
	JRST	OPA.X		;YES
	SETZ	C,0
JBS.1:	MOVE	D,JDTAB(C)	;GET ENTRY
	CAILE	A,(D)		;ANY GOOD?
	AOJA	C,JBS.1		;NO - KEEP GOING
	CAIE	A,(D)		;GOT IT?
	JRST	NUMMEM		;NO - USE NUMERIC
	TT3	<[ASCIZ /.JB/]>
	HLLZ	A,D		;GET NAME
	SETO	B,0		;PRINT STYLE
	PUSHJ	P,TPE6		;OUTPUT IT
	TT3	<[ASCIZ /##/]>
	JRST	OPA.X		;OK
REM:	MOVE	A,-1(P)		;GET ADDR
	PUSHJ	P,ENTADD	;ENTER ADDR
	JRST	OPA.X		;OK
HEAD:	TT3	<[ASCIZ /	TITLE	/]>
	MOVE	A,SB.NME	;GET SUBJECT NAME
	SETO	B,0		;PRINT
	PUSHJ	P,TPE6
	PUSHJ	P,XCRLF
	PUSHJ	P,XCRLF
	MOVSI	C,-20		;OUTPUT AC NAMES
HL.1:	TT1	<[EXP 11]>
	MOVE	A,ACTAB(C)
	SETO	B,0
	PUSHJ	P,TPE6
	TT3	<[ASCIZ /==/]>
	MOVEI	A,(C)
	MOVE	B,[XWD 10,1]
	PUSHJ	P,PRNT
	PUSHJ	P,XCRLF
	AOBJN	C,HL.1		;LOOP
	PUSHJ	P,XCRLF
	TRNN	FL,FR.HSG	;IS THERE A HGH SEG?
	POPJ	P,0		;NO - ALL DONE
	TT3	<[ASCIZ /	TWOSEG/]>
	PUSHJ	P,XCRLF
	TT3	<[ASCIZ /	RELOC	400000/]>
	PUSHJ	P,XCRLF
HL.2:	PJRST	XCRLF

TRAIL:	TRNN	FL,FR.LSG	;HAS THERE BEEN A LOW SEG?
	PUSHJ	P,BLDLOW	;BUILD LOW SEG
	PUSHJ	P,XCRLF
	TT3	<[ASCIZ /	END/]>
	SKIPLE	STRT
	TT3	<[ASCIZ /	START/]>
	PJRST	XCRLF
XPNSEG:	TRNN	FL,FR.HGH	;WAS THAT A HGH?
	TRNN	FL,FR.PS1	;PASS ONE?
	POPJ	P,0		;YES
	PUSHJ	P,XCRLF
	MOVEI	C,1(C)		;SET NEXT ADDR
	CAIGE	C,140		;CHECK JOB DATA
	MOVEI	C,140		;NO - FORCE TO BEGINNING
	HRLI	C,1		;...
	PJRST	LW.0		;NO

BLDLOW:	PUSHJ	P,CNGSEG	;CHANGE TO LOW SEG
	PUSHJ	P,XCRLF
	MOVE	C,[XWD 1,140]	;SET LOW START
LW.0:	MOVE	D,LOWEND	;GET LOW END
	CAIG	D,(C)		;ALREADY DONE?
	JRST	LW.4		;YES
LW.1:	TT1	<[EXP "L"]>	;NAME OF LABEL
	MOVEI	A,(C)		;GET ADDR
	MOVE	B,[XWD 10,1]	;OUTPUT FORMAT
	PUSHJ	P,PRNT		;...
	TT3	<[ASCIZ /:	BLOCK	/]>
	AOJ	C,0		;INC ADDR
LW.2G	D,(C)		;END?
	JRST	LW.3		;YES
	MOVEI	A,(C)		;GET ADDR
	PUSHJ	P,FNDADD	;FIND THIS ADDR
	  AOBJP	C,LW.2		;NOT THERE - KEEP GOING
LW.3:	HLRZ	A,C		;GET # MISSING LOCATIONS
	MOVE	B,[XWD 10,1]	;OUTPUT
	PUSHJ	P,PRNT		;...
	PUSHJ	P,XCRLF		;END OF LINE
	HRLI	C,1		;RESET COUNT
	CAILE	D,(C)		;END?
	JRST	LW.1		;NO - KEEP GOING
LW.4:	TT1	<[EXP "L"]>	;MARK IN LOW END
	MOVEI	A,(D)		;GET ADDR
	MOVE	B,[XWD 10,1]	;OUTPUT
	PUSHJ	P,PRNT		;...
	TT3	<[ASCIZ /==./]>
	PJRST	XCRLF		;RETURN
CNGSEG:	PUSHJ	P,XCRLF
	TT3	<[ASCIZ /	LIT/]>
	PUSHJ	P,XCRLF
	TT3	<[ASCIZ /	RELOC/]>
	PJRST	XCRLF

GEXT:	MOVSI	A,(SIXBIT /SHR/)
	MOVEM	A,SB.EXT
	PUSHJ	P,TSTFIL
	  CAIA
	POPJ	P,0
	MOVSI	A,(SIXBIT /HGH/)
	MOVEM	A,SB.EXT
	PUSHJ	P,TSTFIL
	  CAIA
	POPJ	P,0
	MOVSI	A,(SIXBIT /SAV/)
	MOVEM	A,SB.EXT
	POPJ	P,0

TSTFIL:	MOVEI	T1,17
	MOVE	T2,SB.DEV
	SETZ	T3,0
	OPEN	17,T1
	  POPJ	P,0
	MOVE	T1,SB.NME
	MOVE	T2,SB.EXT
	SETZ	T3,0
	MOVE	T4,SB.PPN
	LOOKUP	17,T1
	  SOS	(P)
	RELEAS	17,0
	JRST	CPOPJ1
;READ A WORD FROM THE CORE IMAGE FILE
;NORMAL RETURN IF EOF, SKIP IF A=WORD, B=ADDR

GETWRD:	TRNN	FL,FR.HGH	;IS IT A HGH (OR SHR) FILE?
	JRST	GETLOW		;NO - MUST BE LOW

	AOSN	B,LSTADD	;INC & GET LAST ADDR
	MOVEI	B,400000	;NOT SET YET
	PUSHJ	P,GET.1		;READ 1
	  POPJ	P,0		;EOF
	MOVEM	B,LSTADD	;SAVE ADDR
	TRO	FL,FR.HSG	;HGH SEG SEEN
	JRST	CPOPJ1		;SKIP RETURN

GETLOW:	MOVE	B,LSTADD	;GET LAST ADDR
	CAME	B,[EXP -1]	;SET YET?
	JRST	GL.2		;YES - OK

GL.1:	PUSHJ	P,GET.1		;READ A CONTROL WORD
	  POPJ	P,0		;EOF
	JUMPE	A,CPOPJ		;EOF IF JUNK
	SKIPA	B,A		;SAVE ADDR/COUNT
GL.2:	AOBJP	B,GL.1		;OUT OF DATA?
	PUSHJ	P,GET.1		;NO - GET A WORD
	  POPJ	P,0		;EOF
	MOVEM	B,LSTADD	;SAVE ADDR/COUNT
	MOVEI	B,1(B)		;SET REAL ADDR
	TRO	FL,FR.LSG	;LOW SEG SEEN
	JRST	CPOPJ1		;SKIP RETURN
;ROUTINES TO FIND OR ENTER AN ADDRESS INTO THE ADDRESS TABLES

ENTADD:	PUSHJ	P,FNDADD	;IS ADDR ALREADY THERE?
	  CAIA			;NO
	POPJ	P,0		;YES - ALL DONE
	PUSHJ	P,ADDS2		;SAVE B/C
	MOVE	B,[HRLM A,ADDTBL(C)] ;SET INSTR
	MOVE	C,ADDCNT	;GET COUNT OF THOSE THERE
	CAIGE	C,ATSZ		;END OF SIDE?
	JRST	EA.1		;NO
	MOVE	B,[HRRM A,ADDTBL(C)] ;CHANGE INSTR
	SUBI	C,ATSZ		;DECR POINTER
EA.1:	CAIL	C,ATSZ		;STILL IN RANGE?
	ERROR	13		;NO
	XCT	B		;ENTER ADDR
	AOS	ADDCNT		;INC COUNT
	POPJ	P,0		;RETURN

FNDADD:	PUSHJ	P,ADDS2		;SAVE B/C
	MOVE	C,ADDCNT	;GET # OF ITEMS
	JUMPE	C,CPOPJ		;NONE IN YET
	CAILE	C,ATSZ		;IS THIS LESS THAN ONE SIDE?
	MOVEI	C,ATSZ		;NO
	MOVNS	C		;SET POINTER/COUNTER
	HRLZS	C		;...
FAD.1:	HLRZ	B,ADDTBL(C)	;GET ENTEY
	CAIE	B,(A)		;GOOD?
	AOBJN	C,FAD.1		;NO - LOOP
	JUMPL	C,CPOPJ1	;YES - FOUND

	MOVE	C,ADDCNT	;GET COUNT
	CAIG	C,ATSZ		;HAS RIGHT SIDE BEEN USED?
	POPJ	P,0		;NO - ADDR NOT THERE
	SUBI	C,ATSZ		;GET LENGTH IN RH
	MOVNS	C		;MAKE AOBJN WORD
	HRLZS	C		;...
FAD.2:	HRRZ	B,ADDTBL(C)	;GET ENTRY
	CAIE	B,(A)		;GOOD?
	AOBJN	C,FAD.2		;NO - LOOP
	JUMPL	C,CPOPJ1	;YES - FOUND
	POPJ	P,0		;NOT THERE

ADDS2:	PUSH	P,C
	PUSH	P,B
	PUSHJ	P,@-2(P)
	  SOS	-3(P)
	POP	P,B
	POP	P,C
	POP	P,(P)
	JRST	CPOPJ1
TO32:	PUSH	P,A		;SAVE A
	MOVE	A,LINE		;GET LINE
	CAIL	A,^D32		;IS IT ALREADY THERE OR PAST
	JRST	TO32.2		;YES
TO32.1:	MOVE	A,LINE		;GET LINE
	CAIL	A,^D32		;MORE TO GO?
	JRST	APOPJ		;NO
	MOVEI	A,11		;OUTPUT TAB
	PUSHJ	P,.GIVA		;...
	JRST	TO32.1		;LOOK AGAIN
TO32.2:	TT1	<[EXP " "]>	;DO 1 SPACE
	JRST	APOPJ		;RETURN

COM6:	PUSHJ	P,.SBS2		;SAVE A/B
	TT3	<[ASCIZ @SIXBIT /@]>
	MOVE	A,INST		;GET INSTRUCTION WORD
	MOVEI	B,6
	PUSHJ	P,TPE6
	TT1	<[EXP "/"]>
	POPJ	P,0

COM7:	POPJ	P,0
APOPJ1:	AOS	-1(P)
APOPJ:	POP	P,A
	POPJ	P,0

CPOPJ1:	AOS	(P)
CPOPJ:	POPJ	P,0
	SUBTTL	COMMAND LIST SCANNER

;ENTER: A=SIXBIT ARG ; B=ADDR OF COMMAND TBL ; C=6-CH COUNT
;	IE. AS RETURNED FROM RD6 ETC
;RETURN: B=INDEX IN TABLE (0-N)
;	 B=-1 MEANS UNDEFINED ; B=-2 MEANS AMBIGUOUS

CSCAN:	PUSH	P,C		;SAVE ACS
	PUSH	P,D
	PUSH	P,T1
	SKIPGE	C		;SET CH COUNT
	SETZ	C,
	IMULI	C,6		;CALC MASK
	SETO	D,
	LSH	D,(C)
	HRRZI	C,(B)		;SET INDEX/ADDR
	SETZ	T1,		;CLEAR COUNT
.CS.1:	MOVE	B,0(C)		;PICK UP ENTRY
	CAMN	B,[EXP -1]	;END OF TABLE?
	JRST	.CS.2		;YES
	CAMN	A,B		;DIRECT HIT?
	JRST	.CS.3		;YES
	AND	B,D		;TRY THROUGH MASK
	CAME	A,B		;GOOD NOW?
	JRST	.CS.4		;NO
	HLL	T1,C		;YES - SAVE INDEX
	AOJ	T1,		;COUNT 1 HIT
.CS.4:	AOBJP	C,.CS.1		;INDEX BOTH HALVES & LOOP

.CS.3:	HLL	T1,C		;DIRECT HIT - FORGE GOOD FIND
	HRRI	T1,1
.CS.2:	HLRZ	B,T1		;END OF SCAN - SET IN INDEX
	HRRZS	T1		;GET COUNT
	CAIN	T1,1		;ONE HIT ONLY?
	JRST	.CS.5		;YES - GOOD
	SETO	B,		;NO - SAY BAD
	CAIL	T1,2		;WAS IT AMBIGUOUS?
	SOJ	B,		;YES
.CS.5:	POP	P,T1
	POP	P,D		;RESTORE ACS
	POP	P,C
	POPJ	P,0
	SUBTTL	SIXBIT ROUTINES UPDATE: 3.05

	IFNDEF .SBMBK,<.SBMBK==1> ;INPUT IN BREAK MODE (BK=LF)
	IFNDEF .SBMND,<.SBMND==0> ;INPUT IN NUMBER DELIMIT MODE
	IFNDEF .SBMUC,<.SBMUC==1> ;CONVERT LOWER CASE ALPHAS
	IFNDEF .SBSAP,<.SBSAP=="A"> ;SPECIAL CHARACTER AS ALPHA
	IFNDEF .SBSNM,<.SBSNM=="0"> ;SPECIAL CHARACTER AS NUMERIC

;TYPE 6-BIT:  IGNORE LEAD0 & SPACES IN (B) PLACES

TPE6N:	PUSHJ	P,.SBS4		;SAVE B,C,D,E
	MOVEI	E,6		;SET COUNT
	CAIA
TN.0:	LSH	A,6		;REMOVE LEFT CH
	TLNN	A,570000	;IF THESE BITS =0 CH IS ' ' OR '0'
	SOJG	E,TN.0		;LOOP
	JRST	T6.0		;NOW TO TYPE

;TYPE 6-BIT: IN (B) PLACES
;IF (B)=0 ASSUME 6 PLACES, IF (B)=-1 DELIMIT ON 6 CHS OF FIRST SPACE

TPE6:	PUSHJ	P,.SBS4		;SAVE B,C,D,E
T6.0:	MOVE	C,B		;GET COUNT
	SETZ	B,		;PUT ALL SPACES IN ARG+1
	MOVE	E,[XWD 440600,A] ;SET UP BYTE POINTER
	SKIPN	C		;DEFAULT TO 6 IF COUNT 0
	MOVEI	C,6
T6.1:	ILDB	D,E		;GET A CH
	SKIPGE	C		;OK IF COUNT +VE
	JUMPE	D,T6.2		;NO - SO END ON SPACE
	ADDI	D,40		;MAKE ASCII
	PUSHJ	P,.GIVD		;OUTPUT
	SOJN	C,T6.1		;LOOP
T6.2:	POPJ	P,0
;PRINT NUMERIC: IN (B) PLACES LH(B)=RADIX (0=DECIMAL)

PRNT:	PUSHJ	P,.SBS4		;SAVE B,C,D,E
	PUSH	P,A		;SAVE A
	PUSHJ	P,PR.0 		;DO PRINT LOOP
	POP	P,A		;RESTORE A
	POPJ	P,0

PR.0:	HRRZ	D,B		;GET COUNT
	HLRZ	C,B		;GET RADIX
	SKIPG	C		;IS RADIX GIVEN?
	MOVEI	C,^D10		;NO - SET TEN
	IDIV	A,C		;GET FIRST CH
	JRST	PR.2
PR.1:	IDIV	A,C		;GET NEXT CH
	SKIPN	B		;IS THERE A REMAINDER?
	SKIPE	A		;AND IS ARG NOW 0?
PR.2:	TROA	B,60		;MAKE ASCII
	MOVEI	B," "		;SET A SPACE IF NOT
	CAILE	B,"9"		;DIGIT?
	ADDI	B,7		;NO - CONVERT TO ALLOW BASE .GT. 10
	HRLM	B,(P)		;SAVE IN PDL
	SOSG	D		;DECR COUNT
	SKIPE	A		;END IF (A) NOW 0
	PUSHJ	P,PR.1 		;LOOP
	HLRZ	A,(P)		;GET CH FROM PDL
	PJRST	.GIVA		;OUTPUT & LOOP/RETURN
;RD6:	READ 6-BIT:
;RD61:	AS RD6 BUT ASSUME FIRST CH ALREADY IN (A)
;RD6N:	READ 6-BIT: IGNORE LEADING NON-ALPHANUMERICS
;RD61N: AS RD6N BUT ASSUME FIRST CH ALREADY IN (A)
;ALL ABOVE DELIMIT ON NON-A/N IF '.SBMND' IS OFF
;IF '.SBMND' IS ON DELIMIT ON NON-NUMERIC IF FIRST SIG CH IS NUMERIC
;'*' IS GROUPED WITH ALPHA & '?' WITH NUMERIC
;RN6:	READ 6-BIT: NEXT 6 CHARACTERS ALWAYS INCLUDING NON-A/N
;RN61:	AS RN6 BUT ASSUME FIRST CHARACTER ALREADY IN (A)
;ALL READ ROUTINES GIVE WORD IN (A), (C)=6-[CH COUNT], (D)=DELIMITER
;GREATER THAN 6 CH'S READ BUT IGNORED

RD61N:	SKIPA	D,A		;GET CH1 & SKIP
RD6N:	PUSHJ	P,.GETD		;GET A CH
	SKIPGE	D		;CHECK CH IS +VE IN CASE -1=EOF
	POPJ	P,0
	PUSHJ	P,.NUMBD	;IS IT ALPHA/NUMERIC?
	PUSHJ	P,.ALPHD	;...
	JRST	R6.0		;OK
	JRST	RD6N		;NOT - TRY NEXT

RD61:	SKIPA	D,A		;RECOVER LEADING CH
RD6:	SETZ	D,		;CLEAR FIRST CH SLOT
R6.0:	PUSH	P,B		;SAVE (B)
	PUSH	P,E		;SAVE (E)
	SETZB	A,E		;CLEAR ARG & MODE FLAGS
IFE .SBMND,<
	TRO	E,1		;FORCE A/N MODE
>
	MOVE	B,[XWD 440600,A] ;SET BYTE-POINTER
	MOVEI	C,6		;SET COUNT
	SKIPN	D		;DO WE HAVE CH1?
R6.1:	PUSHJ	P,.GETD		;READ A CH
	JUMPL	E,R6.4		;NUMERIC MODE
	PUSHJ	P,.ALPHD	;IS IT ALPHA?
	JRST	R6.2		;YES - ALPHA
R6.4:	PUSHJ	P,.NUMBD	;TEST NUMERIC
	JRST	R6.3		;NO - DELIMIT
	JUMPN	E,R6.2		;YES - NOT 1ST SO CONTINUE
	CAIN	D,"?"		;IS IT '?'
	JRST	R6.5		;YES - NOT COUNTED AS 1ST CH DEFER MODE
	TLO	E,400000	;THIS IS EFFECTIVE 1ST CH SET NUMERIC
R6.2:	TRO	E,1		;MARK TO SAY NOT 1ST CH
R6.5:	SUBI	D,40		;CONVERT TO 6-BIT
	SOJL	C,R6.1		;CHECK COUNT
	IDPB	D,B		;OK - SO PUT IN CH
	JRST	R6.1		;LOOP

R6.3:	POP	P,E		;RESTORE E
	POP	P,B		;RESTORE B
	POPJ	P,0		;RETURN
RN61:	SKIPA	D,A		;GET 1ST CH
RN6:	SETZ	D,0		;CLEAR 1ST CH SLOT
N6.0:	PUSH	P,B		;SAVE (B)
	SETZ	A,		;CLEAR ARG
	MOVE	B,[XWD 440600,A] ;SET BYTE-POINTER
	MOVEI	C,6		;SET COUNT
	SKIPN	D		;DO WE HAVE CH1?
N6.1:	PUSHJ	P,.GETD		;GET CH
	SUBI	D,40		;MAKE 6-BIT
	IDPB	D,B		;PUT IT IN
	SOJG	C,N6.1		;LOOP
	POP	P,B		;RESTORE (B)
	POPJ	P,0		;RETURN
;DCO6:	DECODE OCTAL NO. IN (A) TO 6-BIT
;DCD6:	DECODE DECIMAL NO. IN (A) TO 6-BIT

DCO6:	PUSHJ	P,.SBS4		;SAVE B,C,D,E
	MOVE	C,[XWD 220300,A] ;SET BYTE-POINTERS
	MOVE	D,[XWD 440600,A] ;...
	MOVNI	E,6		;SET COUNT
DO.1:	ILDB	B,C		;GET DIGIT
	ADDI	B,20		;MAKE 6-BIT
	IDPB	B,D		;PUT IT BACK
	AOJN	E,DO.1		;LOOP
	POPJ	P,0

DCD6:	PUSHJ	P,.SBS4		;SAVE B,C,D,E
	PJRST	DD.0		;DO DECODE

DD.0:	MOVEI	C,6
	MOVE	D,[XWD 440600,A]
DD.1:	IDIVI	A,12
	HRLM	B,(P)
	SOSLE	C
	PUSHJ	P,DD.1
	HLRZ	B,(P)
	ADDI	B,20
	IDPB	B,D
	POPJ	P,0
;OF6:	CONVERT 6-BIT TO OCTAL
;DF6:	CONVERT 6-BIT TO DECIMAL

OF6:	PUSHJ	P,.SBS4		;SAVE ACS
	MOVEI	E,^D8		;SET OCTAL
	JRST	.XF6		;DECODER
DF6:	PUSHJ	P,.SBS4		;SAVE ACS
	MOVEI	E,^D10		;SET DECIMAL
.XF6:	PUSH	P,F		;ALSO SAVE (F)
.XF6.1:	TRNE	A,77		;TRAILING SPACE?
	JRST	.XF6.2		;NO - # IS JUSTIFIED
	TRO	A,'0'		;FORCE A ZERO
	ROT	A,-6		;AND ROTATE
	JRST	.XF6.1		;LOOP
.XF6.2:	MOVE	B,[XWD 440600,A] ;SET BYTE POINTER
	SETZ	C,0		;CLEAR AC
	MOVEI	D,6		;SET COUNT
.XF6.3:	ILDB	F,B		;GET CH
	SKIPE	F		;SPACE=0
	SUBI	F,20		;CONVERT TO #
	CAIL	F,0		;RANGE CHECK
	CAIL	F,(E)		;0-RADIX
	TLO	E,400000	;SAY BAD
	IMULI	C,(E)		;MULTIPLY AC
	ADD	C,F		;ACCUMULATE
	SOJG	D,.XF6.3	;LOOP
	MOVE	A,C		;RECOVER FULL #
	POP	P,F		;RECOVER (F)
	TLNN	E,400000	;ERROR?
	AOS	(P)		;NO
	POPJ	P,		;RETURN
;OUTPUT A CH - AS 'TTCALL 1'
;DEFINE TT1(X) AS PUSHJ P,TT1F/JUMP X

TT1F:	PUSH	P,@0(P)		;SAVE ARG ADDR
	POP	P,(P)		;RESET STACK
	PUSH	P,@1(P)		;SAVE ARG VALUE
	EXCH	A,0(P)		;SAVE A & GET ARG
	PUSHJ	P,.GIVA		;SEND A
	POP	P,A		;RESTORE ACS
	POPJ	P,0		;RETURN

;OUTPUT 'ASCIZ' - AS 'TTCALL 3'
;DEFINE TT3(X) AS PUSHJ P,TT3F/JUMP X
;NOTE: ASCIZ DATA MAY NOT BE IN ACS 1,2

TT3F:	PUSHJ	P,.SBS2		;SAVE A/B
	PUSH	P,@-4(P)	;SAVE ARG WORD
	POP	P,(P)		;RESET THE STACK
	HRRI	B,@1(P)		;GET ADDR OF CHARACTERS
	HRLI	B,440700	;FORM BYTE POINTER
T3.1:	ILDB	A,B		;GET CH
	JUMPE	A,CPOPJ		;CHECK FOR END OF STRING
	PUSHJ	P,.GIVA		;SEND IT
	JRST	T3.1		;LOOP
.SBS2:	PUSH	P,A
	PUSH	P,B
	PUSHJ	P,@-2(P)
	  SOS	-3(P)
	POP	P,B
	POP	P,A
	POP	P,(P)
	JRST	CPOPJ1

.SBS4:	PUSH	P,E
	PUSH	P,D
	PUSH	P,C
	PUSH	P,B
	PUSHJ	P,@-4(P)
	  SOS	-5(P)		;NORMAL RETURN
	POP	P,B
	POP	P,C
	POP	P,D
	POP	P,E
	POP	P,(P)
	JRST	CPOPJ1
;ROUTINE TO OUTPUT VERSION # IN STANDARD FORMAT
;ENTER WITH (A) = SIXBIT /REBLD/

.PVERS::PUSH	P,A		;SAVE ACS
	PUSH	P,B
	PUSH	P,D
	SETO	B,		;SETUP TO PRINT NAME
	SKIPE	A		;UNLESS ZERO
	PUSHJ	P,TPE6		;TYPE IT
	PUSHJ	P,XSPACE	;+SPACE
	LDB	A,[XWD 301100,.JBVER] ;GET MAIN VERSION
	MOVE	B,[XWD 10,1]	;SET FOR OCTAL IN 1 PLACE
	PUSHJ	P,PRNT		;PRINT IT
	LDB	A,[XWD 220600,.JBVER] ;GET MINOR VERSION
	SOJL	A,.PV.2		;IGNORE IF ZERO
	IDIVI	A,^D26		;GET IN RAD26
	JUMPE	A,.PV.1		;NO LH CH
	ADDI	A,"@"		;MAKE ALPHA
	PUSHJ	P,.GIVA		;TYPE IT
.PV.1:	MOVE	A,B		;GET 2ND CH
	ADDI	A,"A"		;MAKE ALPHA
	PUSHJ	P,.GIVA		;DO IT
.PV.2:	HRRZ	A,.JBVER	;GET EDIT #
	JUMPE	A,.PV.3		;IGNORE IF NUL
	MOVEI	D,"("		;BRACKET
	PUSHJ	P,.GIVD
	MOVE	B,[XWD 10,1]	;SET PRINT STYLE
	PUSHJ	P,PRNT
	MOVEI	D,")"		;CLOSE BRACKETS
	PUSHJ	P,.GIVD
.PV.3:	LDB	A,[XWD 410300,.JBVER] ;GET VWHO
	JUMPE	A,.PV.4		;IGNORE IF NUL
	MOVEI	D,"-"		;SET '-'
	PUSHJ	P,.GIVD
	MOVE	B,[XWD 10,1]	;SET PRINT STYLE
	PUSHJ	P,PRNT
.PV.4:	PUSHJ	P,XSPACE	;TERMINATE ALL WITH SPACE
	POP	P,D		;RESTORE ACS
	POP	P,B		;...
	POP	P,A		;...
	POPJ	P,0		;RETURN
;OUTPUT <CR>,<LF>

XCRLF:	PUSH	P,A
	MOVEI	A,15
	PUSHJ	P,.GIVA
	MOVEI	A,12
	PUSHJ	P,.GIVA
	POP	P,A
	POPJ	P,0

;OUTPUT SPACE

XSPACE:	PUSH	P,A
	MOVEI	A," "
	PUSHJ	P,.GIVA
	POP	P,A
	POPJ	P,0

;READ A CH TO (D)

.GETD:	EXCH	A,D
	PUSHJ	P,.GETA
	EXCH	A,D
	POPJ	P,0

;WRITE A CH FROM (D)

.GIVD:	EXCH	A,D
	PUSHJ	P,.GIVA
	EXCH	A,D
	POPJ	P,0
;ALPHA/NUMERIC TESTS:
;.ALPHA - SKIP IF (A) IS NOT ALPHA
;.NUMBA	- SKIP IF (A) IS NUMERIC
;.ALPHD & .NUMBD USE (D) NOT (A)

.ALPHD:	EXCH	A,D
	PUSHJ	P,.ALPHA
	SOS	(P)
	EXCH	A,D
	JRST	CPOPJ1

.NUMBD:	EXCH	A,D
	PUSHJ	P,.NUMBA
	SOS	(P)
	EXCH	A,D
	JRST	CPOPJ1

.ALPHA:	CAIE	A,"*"
	CAIL	A,"A"
	CAILE	A,"Z"
	CAIN	A,.SBSAP	;IS IT THE SPECIAL CH?
	POPJ	P,0		;GOOD
	JRST	CPOPJ1		;BAD

.NUMBA:	CAIE	A,"?"
	CAIG	A,"9"
	CAIGE	A,"0"
	CAIN	A,.SBSNM	;IS IT THE SPECIAL NUMERIC?
	JRST	CPOPJ1		;GOOD
	POPJ	P,0		;BAD
;READ & WRITE CH TO/FROM (A) - THIS SHOULD BE CUSTOMISED IF REQD

.GETA:	TTCALL	4,A		;READ CH IN LINE MODE
	CAIN	A,15
	JRST	.GETA
IFN .SBMBK,<
	CAIG	A,176
	CAIGE	A,175
	CAIG	A,33
	CAIGE	A,32
	CAIG	A,14
	CAIGE	A,12
	CAIN	A,7
	MOVEI	A,12		;CHARACTER IS 'BREAK' FORCE 'LF'
>
IFN .SBMUC,<
	CAIL	A,"A"+40	;CONVERT LOWER CASE TO UPPER
	CAILE	A,"Z"+40
	CAIA
	SUBI	A,40
>
	POPJ	P,0

.GIVA:	CAIN	A,15		;CR?
	SETZM	LINE		;YES
	CAIN	A,11		;TAB?
	PUSHJ	P,TAB		;YES
	CAIL	A," "		;PRINTING?
	AOS	LINE		;YES - INC LINE POSITION
	TRNE	FL,FR.FOT
	PJRST	GIV.2
	TTCALL	1,A
	POPJ	P,0

TAB:	EXCH	A,LINE		;SAVE CH & GET LINE COUNT
	ADDI	A,10		;ADD 8
	TRZ	A,7		;ROUND
	EXCH	A,LINE		;RESET
	POPJ	P,0
	SUBTTL	ERROR ROUTINE

FAIL:	TRZ	FL,FR.FOT	;CLEAR FILE OUT
	POP	P,A		;RECOVER ADDR OF ERROR CODE
	HRRZ	A,(A)		;GET ERROR CODE
	TTCALL	11,0		;CLEAR TYPE AHEAD
	CAIGE	A,.NOERR	;IS IT IN RANGE?
	JRST	.FA.0		;YES
	PUSH	P,1(P)		;RESAVE CALL ADDR
	TTCALL	3,[ASCIZ /?UNDEFINED ERROR #/]
	MOVE	B,[XWD 10,1]
	PUSHJ	P,PRNT
	TTCALL	3,[ASCIZ / IN PROGRAM AT PC /]
	POP	P,A		;GET ADDR OF CALL
	HRRZI	A,-1(A)		;DECR TO GET ADDR OF 'PUSHJ' AT CALL
	PUSHJ	P,DCO6		;MAKE SIXBIT
	SETO	B,0
	PUSHJ	P,TPE6
	PUSHJ	P,XCRLF
	EXIT
.FA.0:	HLL	FL,MES(A)	;PICK UP ERROR FLAGS
	HRRZ	T1,MES(A)	;GET ERROR MESSAGE
	TT3	<(T1)>		;QUOTE TEXT
	TLNN	FL,FL.QTE	;QUOTE C(E)?
	JRST	.FA.1		;NO
	MOVE	A,E		;YES
	SETO	B,0
	PUSHJ	P,TPE6
.FA.1:	PUSHJ	P,XCRLF
	TLNN	FL,FL.ABT	;ABORT?
	POPJ	P,0		;NO
OUT:	EXIT
	SUBTTL	FILE LOOKUP/ENTER/RENAME ERROR ROUTINE UPDATE: 2.03

IFN NIFL+NOFL,<

IFNDEF .FEMIN,<.FEMIN==0>	;SET FOR SMALL RANGE OF ERRORS
IFNDEF FE.INS,<FE.INS==0>	;FLAG TO SAY IGNORE 'NO SUCH FILE'
IFNDEF FE.INU,<FE.INU==0>	;FLAG AS 'FE.INS' BUT ALSO NO UFD
IFNDEF FE.IER,<FE.IER==0>	;FLAG TO SAY IGNORE ALL ERRORS

;DEFINE ERRFIL(X): PUSHJ P,FILERR/JUMP X
;USE AT UUO+1: UUO CH,BLOCK/ERRFIL N WHERE N IS ERROR NO.
;RETURNS BY DOING 'ERROR X' OR 'POPJ P,' IF X=0
;REQUIRES 6-BIT ROUTINES
;MAY BE USED WITH 4-WORD OR EXTENDED ARGS

IFE .FEMIN,<.FEMAX==32>		;MAX NO. OF DEFINED ERRORS
IFN .FEMIN,<.FEMAX==15>		;...

FILERR:	EXCH	15,0(P)		;SAVE 15 & GET ADDR OF PROBLEM
	PUSH	P,16
	PUSH	P,B		;SAVE A/B INCASE ARGS HERE
	PUSH	P,A
	TRNE	FL,FE.IER	;IGNORE ERROR?
	JRST	.FE.4		;YES
	HRRZI	16,@-2(15)	;GET ADDR OF DATA BLOCK
	TLO	16,600000	;SET EXTENDED & UFD BIT
	MOVE	A,0(16)		;GET 1ST WORD
	TLNN	A,-1		;CHECK FOR EXTENDED
	CAIGE	A,3
	TLZ	16,400000	;NO - 4-WORD
	MOVE	A,0(P)		;RESET A
	MOVE	A,1(16)		;GET EXT/ERR NO.
	TLNE	16,400000	;IS IT EXTENDED?
	MOVE	A,3(16)		;YES
	HLRZ	B,A		;GET EXT
	HRREI	A,-1(A)		;GET ERR #-1
	TRNE	FL,FE.INS	;IS IT IGNORE 'NO SUCH FILE'?
	JUMPL	A,.FE.4		;YES - IS IT ZERO
	TRNE	FL,FE.INU	;ALSO UFD?
	JUMPLE	A,.FE.4		;YES?
	AOJ	A,0		;RESTORE CORRECT ERROR #
	TRZ	FL,FR.FOT	;KILL FILE OUT FLAG
	CAIE	B,(SIXBIT /UFD/) ;IS IT UFD
	CAIN	B,(SIXBIT /SFD/) ;OR SFD?
	TLZ	16,200000	;YES
	MOVEI	B,FE.MZZ	;DEFAULT TO STANDARD ERROR MESAGE
	CAILE	A,.FEMAX	;IS ERR NO. IN RANGE?
	JRST	.FE.1		;NO USE DEFAULT
	ROT	A,-1		;GET ADDR OF ERROR TEXT
	HRRZ	B,FE.MES(A)
	TLNN	A,400000	;IS IT RH?
	HLRZ	B,FE.MES(A)	;NO - GET LH
.FE.1:	TT3	<(B)>		;QUOTE TEXT
	TT3	<[ASCIZ / file: /]> ;'ON FILE'
	LDB	A,[XWD 270400,-2(15)] ;RECOVER CHANNEL NO.
	DEVNAM	A,		;GET DEVICE NAME
	JRST	.FE.2		;CANT - IGNORE DEV:
	SETO	B,		;QUOTE DEV:
	PUSHJ	P,TPE6
	TT1	[EXP ":"]
.FE.2:	MOVE	A,0(P)		;RESET A/B IN CASE ARGS HERE
	MOVE	B,-1(P)
	MOVE	A,0(16)		;GET FILE NAME
	TLNE	16,400000	;IS IT EXTENDED?
	MOVE	A,2(16)		;YES
	SETZ	B,
	TLNE	16,200000	;IS IT UFD/SFD?
	PUSHJ	P,TPE6		;NO
	TLNN	16,200000	;IS IT UFD/SFD?
	PUSHJ	P,.FE.PN	;YES
	TT1	[EXP "."]
	MOVE	A,0(P)		;RESET A/B IN CASE ARGE HERE
	MOVE	B,-1(P)
	HLLZ	A,1(16)		;GET EXT
	TLNE	16,400000	;EXTENDED?
	HLLZ	A,3(16)		;YES
	MOVEI	B,3		;QUOTE EXT
	PUSHJ	P,TPE6
	MOVE	A,0(P)		;RESTORE A/B
	MOVE	B,-1(P)
	MOVE	A,3(16)
	TLNE	16,400000	;EXTENDED?
	MOVE	A,1(16)		;YES
	PUSHJ	P,.FE.PN	;TYPE PPN
	PUSHJ	P,XCRLF

.FE.4:	POP	P,A		;RECOVER A/B
	POP	P,B
	HRRZI	16,@0(15)	;GET ERROR NO.
	JUMPE	16,.FE.3	;IS IT ZERO
	POP	P,16		;RECOVER 16
	EXCH	15,0(P)		;RECOVER 15 & LEAVE IT IN STACK
	JRST	FAIL		;LOOK LIKE 'ERROR X'
.FE.3:	POP	P,16		;RECOVER 16
	POP	P,15		;RECOVER 15
	POPJ	P,0		;DO 'POPJ' RETURN
.FE.PN:	PUSH	P,D
	PUSH	P,B
	PUSH	P,A
	SETO	B,
	HLRZS	A
	PUSHJ	P,DCO6
	MOVEI	D,"["
	PUSHJ	P,.GIVD
	PUSHJ	P,TPE6N
	HRRZ	A,0(P)
	PUSHJ	P,DCO6
	MOVEI	D,","
	PUSHJ	P,.GIVD
	PUSHJ	P,TPE6N
	MOVEI	D,"]"
	PUSHJ	P,.GIVD
	POP	P,A
	POP	P,B
	POP	P,D
	POPJ	P,0

FE.MES:	XWD	FE.M00,FE.M01	;MESSAGE TEXT ADDR'S
	XWD	FE.M02,FE.M03
	XWD	FE.M04,FE.M05
	XWD	FE.M06,FE.M07
	XWD	FE.M10,FE.M11
	XWD	FE.M12,FE.M13
	XWD	FE.M14,FE.M15
IFE .FEMIN,<
	XWD	FE.M16,FE.M17
	XWD	FE.M20,FE.M21
	XWD	FE.M22,FE.M23
	XWD	FE.M24,FE.M25
	XWD	FE.M26,FE.M27
	XWD	FE.M30,FE.M31
	XWD	FE.M32,0
>
FE.M00:	ASCIZ	/?No such/
FE.M01:	ASCIZ	/?No such UFD/
FE.M02:	ASCIZ	/?Protection failure/
FE.M03:	ASCIZ	/?Being modified/
FE.M04:	ASCIZ	/?Already exists/
FE.M05:	ASCIZ	/?ILL. SEQ. of UUOs/
FE.M06:	ASCIZ	/?'RIB' type error/
FE.M07:	ASCIZ	/?Not a 'SAVE'/
FE.M10:	ASCIZ	/?Not enough core/
FE.M11:	ASCIZ	/?DEV: not avail./
FE.M12:	ASCIZ	/?No such DEV:/
FE.M13:	ASCIZ	/?ILL. UUO/
FE.M14:	ASCIZ	/?No room or quota ex/
FE.M15:	ASCIZ	/?Write-lock/
IFE .FEMIN,<
FE.M16:	ASCIZ	/?Not enough tbl space (MON)/
FE.M17:	ASCIZ	/?Partial alloc only/
FE.M20:	ASCIZ	/?Blk not free @alloc/
FE.M21:	ASCIZ	/?Cannot supercede existing UFD/
FE.M22:	ASCIZ	/?Cannot delete non-empty UFD/
FE.M23:	ASCIZ	/?Sub-UFD not found/
FE.M24:	ASCIZ	/?Search list empty/
FE.M25:	ASCIZ	/?Cannot nest SFD deeper/
FE.M26:	ASCIZ	/?Cannot write/
FE.M27:	ASCIZ	/?Seg not on swap space/
FE.M30:	ASCIZ	/?Cannot be updated/
FE.M31:	ASCIZ	/?Low seg overlap high seg/
FE.M32:	ASCIZ	/?LOGIN for/
>
FE.MZZ:	ASCIZ	@?LOOKUP/ENTER/RENAME error@
>
	SUBTTL	FILE I/O STUFF

	DEFINE	INFILE(%N)<
OPN.'%N':	OPEN	CH'%N,DEV'%N
	ERRDEV
	LOOKUP	CH'%N,FNM
	ERRFIL	0
	INBUF	CH'%N,NIBF
	JRST	CPOPJ1

GET.'%N':	SOSGE	BUF'%N+2
	JRST	G'%N'.X
	ILDB	A,BUF'%N+1
	JRST	CPOPJ1		;GIVE SKIP RETURN
G'%N'.X:	IN	CH'%N,0
	JRST	GET.'%N
	STATZ	CH'%N,740000
	ERROR	0
CLS.'%N':	CLOSE	CH'%N,0
	POPJ	P,0		;GIVE NORMAL RETURN
>

	DEFINE	OTFILE(%N)<
OPN.'%N':	OPEN	CH'%N,DEV'%N
	ERRDEV
	ENTER	CH'%N,FNM
	ERRFIL	0
	OUTBUF	CH'%N,NOBF
	JRST	CPOPJ1

GIV.'%N':	SOSG	BUF'%N+2
	JRST	G'%N'.X
G'%N'.C:	IDPB	A,BUF'%N+1
	POPJ	P,0
G'%N'.X:	OUT	CH'%N,0
	JRST	G'%N'.C
	ERROR	0

CLS.'%N':	CLOSE	CH'%N,0
	POPJ	P,0		;GIVE NORMAL RETURN
>

	%%N==1
REPEAT NIFL,<
	INFILE	\%%N
	%%N=%%N+2
>
	%%N==2
REPEAT NOFL,<
	OTFILE	\%%N
	%%N==%%N+2
>
DEVERR:	POP	P,A		;GET ADDR
	MOVEI	A,@-2(A)	;GET DEV DATA BLOCK
	MOVE	A,1(A)		;GET ATTEMTED NAME
	TT3	<[ASCIZ /?Cant get device - /]>
	SETO	B,0
	PUSHJ	P,TPE6
	ERROR	0
	SUBTTL	TABLES & DATA

;DEFINE ALL ERROR MESSAGES - NOTE: MESXX MUST BE SEQUENTIAL & INCLUSIVE
;INVOKED BY MACRO 'ERROR XX'
;UNUSED NUMBERS HAVE TEXT '??'
;X <REF #>,<ACTION FLAGS>,<TEXT>

	DEFINE	MESSAG<
	X	MES00,,<??>
	X	MES01,,<?Bad octal #>
	X	MES02,,<?Bad decimal #>
	X	MES03,,<?Wild characters are not supported>
	X	MES04,,<?DDT not loaded>
	X	MES05,FL.QTE,<?Unrecognised switch - />
	X	MES06,FL.QTE,<?Ambiguous switch - />
	X	MES07,,<?Wild cards are not supported>
	X	MES10,,<?Wild cards are not supported>
	X	MES11,FL.QTE,<?Unrecognised comment type - >
	X	MES12,FL.QTE,<?Ambiguous comment type - >
	X	MES13,FL.ABT,<?Insufficiant table space>
>
;BUILD MESSAGE TABLES

	DEFINE	X(XN,XF,XT)<
	<XWD	XF,XN>
>

MES:	MESSAG
	.NOERR==.-MES
	DEFINE	X(XN,XF,XT)<
XN:	ASCIZ	@XT@
>

	MESSAG
;DEFINE ALL SWITCHES
;X <NAME>,<DISP ADDR>

	DEFINE	SNAMES<
	X	COMMENT,COM
	X	HELP,HLP
	X	EXIT,OUT
	X	XIT,OUT
	X	DDT,CDDT
>

;DEFINE COMMENT TYPES
;X <NAME>,<DISP ADDR>

	DEFINE	CNAMES<
	X	SIXBIT,C6D
	X	ASCII,C7D
>
;BUILD SWITCH TABLES

	DEFINE	X(XA,XB)<
	<SIXBIT	/XA/>
>

SWTBL:	SNAMES
	EXP	-1		;LAST ENTRY MUST BE -1

COMTBL:	CNAMES
	EXP	-1
	DEFINE	X(XA,XB)<
	<XWD	0,XB>
>

SWDIS:	SNAMES

COMDIS:	CNAMES
;DEFINE VARIOUS JOB DATA SYMBALS
;VALUES MUST APPEAR IN NUMERIC ORDER
;X <LEAST SIG CHS>,<ADDR>

	DEFINE	JNAMES<
	X	HSA,0
	X	H41,1
	X	HCR,2
	X	HRN,3
	X	HVR,4
	X	HNM,5
	X	HSM,6
	X	HGA,7

	X	UUO,40
	X	41,41
	X	ERR,42
	X	REL,44
	X	BLT,45
	X	DDT,74
	X	PFI,114
	X	HRL,115
	X	SYM,116
	X	USY,117
	X	SA,120
	X	FF,121
	X	PFH,123
	X	REN,124
	X	APR,125
	X	CNI,126
	X	TPC,127
	X	OPC,130
	X	OVL,131
	X	COR,133
	X	INT,134
	X	OPS,135
	X	CST,136
	X	VER,137
>
;BUILD JOB DATA TABLE

	DEFINE	X(XA,XB)<
	EXP	<SIXBIT /XA/>!XB
>

JDTAB:	JNAMES
	EXP	.LARGE		;LAST ENTRY MUST BE LARGE +VE #
;DEFINE NAMES OF CALLI'S

	SIXBIT	/LIGHTS/	;-1
CUOTAB:	SIXBIT	/RESET/		;0
	SIXBIT	/DDTIN/		;1
	SIXBIT	/SETDDT/	;2
	SIXBIT	/DDTOUT/	;3
	SIXBIT	/DEVCHR/	;4
	SIXBIT	/DDTGT/		;5
	SIXBIT	/GETCHR/	;6
	SIXBIT	/DDTRL/		;7
	SIXBIT	/WAIT/		;10
	SIXBIT	/CORE/		;11
	SIXBIT	/EXIT/		;12
	SIXBIT	/UPTCLR/	;13
	SIXBIT	/DATE/		;14
	SIXBIT	/LOGIN/		;15
	SIXBIT	/APRENB/	;16
	SIXBIT	/LOGOUT/	;17
	SIXBIT	/SWITCH/	;20
	SIXBIT	/REASSI/	;21
	SIXBIT	/TIMER/		;22
	SIXBIT	/MSTIME/	;23
	SIXBIT	/GETPPN/	;24
	SIXBIT	/TRPSET/	;25
	SIXBIT	/TRPJEN/	;26
	SIXBIT	/RUNTIM/	;27
	SIXBIT	/PJOB/		;30
	SIXBIT	/SLEEP/		;31
	SIXBIT	/SETPOV/	;32
	SIXBIT	/PEEK/		;33
	SIXBIT	/GETLIN/	;34
	SIXBIT	/RUN/		;35
	SIXBIT	/SETUWP/	;36
	SIXBIT	/REMAP/		;37
	SIXBIT	/GETSEG/	;40
	SIXBIT	/GETTAB/	;41
	SIXBIT	/SPY/		;42
	SIXBIT	/SETNAM/	;43
	SIXBIT	/TMPCOR/	;44
	SIXBIT	/DSKCHR/	;45
	SIXBIT	/SYSSTR/	;46
	SIXBIT	/JOBSTR/	;47
	SIXBIT	/STRUUO/	;50
	SIXBIT	/SYSPHY/	;51
	SIXBIT	/FRECHN/	;52
	SIXBIT	/DEVTYP/	;53
	SIXBIT	/DEVSTS/	;54
	SIXBIT	/DEVPPN/	;55
	SIXBIT	/SEEK/		;56
	SIXBIT	/RTTRP/		;57
	SIXBIT	/LOCK/		;60
	SIXBIT	/JOBSTS/	;61
	SIXBIT	/LOCATE/	;62
	SIXBIT	/WHERE/		;63
	SIXBIT	/DEVNAM/	;64
	SIXBIT	/CTLJOB/	;65
	SIXBIT	/GOBSTR/	;66
	SIXBIT	/ACTIVA/	;67
	SIXBIT	/DEACTI/	;70
	SIXBIT	/HPQ/		;71
	SIXBIT	/HIBER/		;72
	SIXBIT	/WAKE/		;73
	SIXBIT	/CHGPPN/	;74
	SIXBIT	/SETUUO/	;75
	SIXBIT	/DEVGEN/	;76
	SIXBIT	/OTHUSR/	;77
	SIXBIT	/CHKACC/	;100
	SIXBIT	/DEVSIZ/	;101
	SIXBIT	/DAEMON/	;102
	SIXBIT	/JOBPEK/	;103
	SIXBIT	/ATTACH/	;104
	SIXBIT	/DAEFIN/	;105
	SIXBIT	/FRCUUO/	;106
	SIXBIT	/DEVLNM/	;107
	SIXBIT	/PATH./		;110
	SIXBIT	/METER./	;111
	SIXBIT	/MTCHR./	;112
	SIXBIT	/JBSET./	;113
	SIXBIT	/POKE./		;114
	SIXBIT	/TRMNO./	;115
	SIXBIT	/TRMOP./	;116
	SIXBIT	/RESDV./	;117
	SIXBIT	/UNLOK./	;120
	SIXBIT	/DISK./		;121
	SIXBIT	/DVRST./	;122
	SIXBIT	/DVURS./	;123
	SIXBIT	/XTTSK./	;124
	SIXBIT	/CAL11./	;125
	SIXBIT	/MTAID./	;126
	SIXBIT	/IONDX./	;127
	SIXBIT	/CNECT./	;130
	SIXBIT	/MVHDR./	;131
	SIXBIT	/ERLST./	;132
	SIXBIT	/SENSE./	;133
	SIXBIT	/CLRST./	;134
	SIXBIT	/PIINI./	;135
	SIXBIT	/PISYS./	;136
	SIXBIT	/DEBRK./	;137
	SIXBIT	/PISAV./	;140
	SIXBIT	/PIRST./	;141
	SIXBIT	/IPCFR./	;142
	SIXBIT	/IPCFS./	;143
	SIXBIT	/IPCFQ./	;144
	SIXBIT	/PAGE./		;145
	SIXBIT	/SUSET./	;146
	SIXBIT	/COMPT./	;147
	SIXBIT	/TYPST./	;150

	CUOMAX==.-CUOTAB
;DEFINE OPCODES
;X <NAME>,<NUMBER>,<FLAGS>

	IN.IMD==1		;IMMEDIATE ARGUMENT
	IN.UUO==2		;A UUO
	IN.NZA==4		;NO AC REQD IF AC0
	IN.NUA==10		;NUMERIC AC ALWAYS
	IN.NME==20		;"0" MEM IF ZERO
	IN.SKP==40		;INSTRUCTION CAN SKIP
	IN.JMP==100		;INSTRUCTION WILL JUMP

	DEFINE	OPCODE<
	X	< UNDEF>,000
	X	< UNDEF>,001
	X	< UNDEF>,002
	X	< UNDEF>,003
	X	< UNDEF>,004
	X	< UNDEF>,005
	X	< UNDEF>,006
	X	< UNDEF>,007
	X	< UNDEF>,010
	X	< UNDEF>,011
	X	< UNDEF>,012
	X	< UNDEF>,013
	X	< UNDEF>,014
	X	< UNDEF>,015
	X	< UNDEF>,016
	X	< UNDEF>,017
	X	< UNDEF>,020
	X	< UNDEF>,021
	X	< UNDEF>,022
	X	< UNDEF>,023
	X	< UNDEF>,024
	X	< UNDEF>,025
	X	< UNDEF>,026
	X	< UNDEF>,027
	X	< UNDEF>,030
	X	< UNDEF>,031
	X	< UNDEF>,032
	X	< UNDEF>,033
	X	< UNDEF>,034
	X	< UNDEF>,035
	X	< UNDEF>,036
	X	< UNDEF>,037
	X	<CALL>,040,IN.UUO!IN.SKP
	X	<INIT>,041,IN.UUO!IN.SKP
	X	< UNDEF>,042
	X	< UNDEF>,043
	X	< UNDEF>,044
	X	< UNDEF>,045
	X	< UNDEF>,046
	X	<CALLI>,047,IN.UUO!IN.IMD!IN.SKP
	X	<OPEN>,050,IN.UUO!IN.SKP
	X	<TTCALL>,051,IN.UUO!IN.NUA!IN.SKP
	X	< UNDEF>,052
	X	< UNDEF>,053
	X	< UNDEF>,054
	X	<RENAME>,055,IN.UUO!IN.NUA!IN.SKP
	X	<IN>,056,IN.UUO!IN.NUA!IN.SKP
	X	<OUT>,057,IN.UUO!IN.NUA!IN.SKP
	X	<SETSTS>,060,IN.UUO!IN.NUA
	X	<STATO>,061,IN.UUO!IN.NUA
	X	<GETSTS>,062,IN.UUO!IN.NUA
	X	<STATZ>,063,IN.UUO!IN.IMD!IN.NUA!IN.SKP
	X	<INBUF>,064,IN.UUO!IN.IMD!IN.NUA
	X	<OUTBUF>,065,IN.UUO!IN.IMD!IN.NUA
	X	<INPUT>,066,IN.UUO!IN.NUA
	X	<OUTPUT>,067,IN.UUO!IN.NUA
	X	<CLOSE>,070,IN.UUO!IN.IMD!IN.NUA
	X	<RELEAS>,071,IN.UUO!IN.IMD!IN.NUA
	X	<MTAPE>,072,IN.UUO!IN.NUA!IN.SKP
	X	<UGETF>,073,IN.UUO
	X	<USETI>,074,IN.UUO!IN.IMD!IN.NUA
	X	<USETO>,075,IN.UUO!IN.IMD!IN.NUA
	X	<LOOKUP>,076,IN.UUO!IN.NUA!IN.SKP
	X	<ENTER>,077,IN.UUO!IN.NUA!IN.SKP
	X	< UNDEF>,100
	X	< UNDEF>,101
	X	< UNDEF>,102
	X	< UNDEF>,103
	X	< UNDEF>,104
	X	<ADJSP>,105,IN.IMD
	X	< UNDEF>,106
	X	< UNDEF>,107
	X	<DFAD>,110
	X	<DFSB>,111
	X	<DFMP>,112
	X	<DFDV>,113
	X	< UNDEF>,114
	X	< UNDEF>,115
	X	< UNDEF>,116
	X	< UNDEF>,117
	X	<DMOVE>,120
	X	<DMOVN>,121
	X	<FIX>,122
	X	<EXTEND>,123
	X	<DMOVEM>,124
	X	<DMOVNM>,125
	X	<FIXR>,126
	X	<FLTR>,127
	X	<UFA>,130
	X	<DFN>,131
	X	<FSX>,132
	X	<IBP>,133
	X	<ILDB>,134
	X	<LDB>,135
	X	<IDPB>,136
	X	<DPB>,137
	X	<FAD>,140
	X	<FADL>,141
	X	<FADM>,142
	X	<FADB>,143
	X	<FADR>,144
	X	<FADRI>,145,IN.IMD
	X	<FADRM>,146
	X	<FADRB>,147
	X	<FSB>,150
	X	<FSBL>,151
	X	<FSBM>,152
	X	<FSBB>,153
	X	<FSBR>,154
	X	<FSBRI>,155,IN.IMD
	X	<FSBRM>,156
	X	<FSBRB>,157
	X	<FMP>,160
	X	<FMPL>,161
	X	<FMPM>,162
	X	<FMPB>,163
	X	<FMPR>,164
	X	<FMPRI>,165,IN.IMD
	X	<FMPRM>,166
	X	<FMPRB>,167
	X	<FDV>,170
	X	<FDVL>,171
	X	<FDVM>,172
	X	<FDVB>,173
	X	<FDVR>,174
	X	<FDVRI>,175,IN.IMD
	X	<FDVRM>,176
	X	<FDVRB>,177
	X	<MOVE>,200
	X	<MOVEI>,201,IN.IMD
	X	<MOVEM>,202
	X	<MOVES>,203
	X	<MOVS>,204
	X	<MOVSI>,205,IN.IMD
	X	<MOVSM>,206
	X	<MOVSS>,207
	X	<MOVN>,210
	X	<MOVNI>,211,IN.IMD
	X	<MOVNM>,212
	X	<MOVNS>,213
	X	<MOVM>,214
	X	<MOVMI>,215,IN.IMD
	X	<MOVMM>,216
	X	<MOVMS>,217
	X	<IMUL>,220
	X	<IMULI>,221,IN.IMD
	X	<IMULM>,222
	X	<IMULB>,223
	X	<MUL>,224
	X	<MULI>,225,IN.IMD
	X	<MULM>,226
	X	<MULB>,227
	X	<IDIV>,230
	X	<IDIVI>,231,IN.IMD
	X	<IDIVM>,232
	X	<IDIVB>,233
	X	<DIV>,234
	X	<DIVI>,235,IN.IMD
	X	<DIVM>,236
	X	<DIVB>,237
	X	<ASH>,240,IN.IMD
	X	<ROT>,241,IN.IMD
	X	<LSH>,242,IN.IMD
	X	<JFFO>,243,IN.SKP
	X	<ASHC>,244,IN.IMD
	X	<ROTC>,245,IN.IMD
	X	<LSHC>,246,IN.IMD
	X	< UNDEF>,247
	X	<EXCH>,250
	X	<BLT>,251
	X	<AOBJP>,252
	X	<AOBJN>,253
	X	<JRST>,254,IN.NZA!IN.NUA!IN.NME!IN.JMP
	X	<JFCL>,255,IN.NZA!IN.NUA!IN.NME
	X	<XCT>,256,IN.NZA!IN.NUA
	X	<MAP>,257
	X	<PUSHJ>,260,IN.SKP
	X	<PUSH>,261
	X	<POP>,262
	X	<POPJ>,263,IN.NME!IN.JMP
	X	<JSR>,264,IN.SKP
	X	<JSP>,265,IN.SKP
	X	<JSA>,266,IN.SKP
	X	<JRA>,267,IN.JMP
	X	<ADD>,270
	X	<ADDI>,271,IN.IMD
	X	<ADDM>,272
	X	<ADDB>,273
	X	<SUB>,274
	X	<SUBI>,275,IN.IMD
	X	<SUBM>,276
	X	<SUBB>,277
	X	<CAI>,300,IN.IMD!IN.NZA
	X	<CAIL>,301,IN.IMD!IN.SKP
	X	<CAIE>,302,IN.IMD!IN.SKP
	X	<CAILE>,303,IN.IMD!IN.SKP
	X	<CAIA>,304,IN.IMD!IN.NZA!IN.SKP
	X	<CAIGE>,305,IN.IMD!IN.SKP
	X	<CAIN>,306,IN.IMD!IN.SKP
	X	<CAIG>,307,IN.IMD!IN.SKP
	X	<CAM>,310
	X	<CAML>,311,IN.SKP
	X	<CAME>,312,IN.SKP
	X	<CAMLE>,313,IN.SKP
	X	<CAMA>,314,IN.SKP
	X	<CAMGE>,315,IN.SKP
	X	<CAMN>,316,IN.SKP
	X	<CAMG>,317,IN.SKP
	X	<JUMP>,320,IN.NZA!IN.NME
	X	<JUMPL>,321
	X	<JUMPE>,322
	X	<JUMPLE>,323
	X	<JUMPA>,324,IN.JMP
	X	<JUMPGE>,325
	X	<JUMPN>,326
	X	<JUMPG>,327
	X	<SKIP>,330,IN.NZA
	X	<SKIPL>,331,IN.NZA!IN.SKP
	X	<SKIPE>,332,IN.NZA!IN.SKP
	X	<SKIPLE>,333,IN.NZA!IN.SKP
	X	<SKIPA>,334,IN.NZA!IN.SKP
	X	<SKIPGE>,335,IN.NZA!IN.SKP
	X	<SKIPN>,336,IN.NZA!IN.SKP
	X	<SKIPG>,337,IN.NZA!IN.SKP
	X	<AOJ>,340,IN.NME
	X	<AOJL>,341
	X	<AOJE>,342
	X	<AOJLE>,343
	X	<AOJA>,344,IN.JMP
	X	<AOJGE>,345
	X	<AOJN>,346
	X	<AOJG>,347
	X	<AOS>,350,IN.NZA
	X	<AOSL>,351,IN.NZA!IN.SKP
	X	<AOSE>,352,IN.NZA!IN.SKP
	X	<AOSLE>,353,IN.NZA!IN.SKP
	X	<AOSA>,354,IN.NZA!IN.SKP
	X	<AOSGE>,355,IN.NZA!IN.SKP
	X	<AOSN>,356,IN.NZA!IN.SKP
	X	<AOSG>,357,IN.NZA!IN.SKP
	X	<SOJ>,360,IN.NME
	X	<SOJL>,361
	X	<SOJE>,362
	X	<SOJLE>,363
	X	<SOJA>,364,IN.JMP
	X	<SOJGE>,365
	X	<SOJN>,366
	X	<SOJG>,367
	X	<SOS>,370,IN.NZA
	X	<SOSL>,371,IN.NZA!IN.SKP
	X	<SOSE>,372,IN.NZA!IN.SKP
	X	<SOSLE>,373,IN.NZA!IN.SKP
	X	<SOSA>,374,IN.NZA!IN.SKP
	X	<SOSGE>,375,IN.NZA!IN.SKP
	X	<SOSN>,376,IN.NZA!IN.SKP
	X	<SOSG>,377,IN.NZA!IN.SKP
	X	<SETZ>,400,IN.NME
	X	<SETZI>,401
	X	<SETZM>,402,IN.NZA
	X	<SETZB>,403
	X	<AND>,404
	X	<ANDI>,405,IN.IMD
	X	<ANDM>,406
	X	<ANDB>,407
	X	<ANDCA>,410
	X	<ANDCAI>,411,IN.IMD
	X	<ANDCAM>,412
	X	<ANDCAB>,413
	X	<SETM>,414
	X	<SETMI>,415
	X	<SETMM>,416
	X	<SETMB>,417
	X	<ANDCM>,420
	X	<ANDCMI>,421,IN.IMD
	X	<ANDCMM>,422
	X	<ANDCMB>,423
	X	<SETA>,424
	X	<SETAI>,425
	X	<SETAM>,426
	X	<SETAB>,427
	X	<XOR>,430
	X	<XORI>,431,IN.IMD
	X	<XORM>,432
	X	<XORB>,433
	X	<IOR>,434
	X	<IORI>,435,IN.IMD
	X	<IORM>,436
	X	<IORB>,437
	X	<ANDCB>,440
	X	<ANDCBI>,441
	X	<ANDCBM>,442
	X	<ANDCBB>,443
	X	<EQV>,444
	X	<EQVI>,445,IN.IMD
	X	<EQVM>,446
	X	<EQVB>,447
	X	<SETCA>,450
	X	<SETCAI>,451
	X	<SETCAM>,452
	X	<SETCAB>,453
	X	<ORCA>,454
	X	<ORCAI>,455
	X	<ORCAM>,456
	X	<ORCAB>,457
	X	<SETCM>,460
	X	<SETCMI>,461
	X	<SETCMM>,462
	X	<SETCMB>,463
	X	<ORCM>,464
	X	<ORCMI>,465,IN.IMD
	X	<ORCMM>,466
	X	<ORCMB>,467
	X	<ORCB>,470
	X	<ORCBI>,471
	X	<ORCBM>,472
	X	<ORCBB>,473
	X	<SETO>,474,IN.NME
	X	<SETOI>,475
	X	<SETOM>,476,IN.NZA
	X	<SETOB>,477
	X	<HLL>,500
	X	<HLLI>,501,IN.IMD
	X	<HLLM>,502
	X	<HLLS>,503
	X	<HRL>,504
	X	<HRLI>,505,IN.IMD
	X	<HRLM>,506
	X	<HRLS>,507
	X	<HLLZ>,510
	X	<HLLZI>,511,IN.IMD
	X	<HLLZM>,512
	X	<HLLZS>,513
	X	<HRLZ>,514
	X	<HRLZI>,515,IN.IMD
	X	<HRLZM>,516
	X	<HRLZS>,517
	X	<HLLO>,520
	X	<HLLOI>,521,IN.IMD
	X	<HLLOM>,522
	X	<HLLOS>,523
	X	<HRLO>,524
	X	<HRLOI>,525,IN.IMD
	X	<HRLOM>,526
	X	<HRLOS>,527
	X	<HLLE>,530
	X	<HLLEI>,531,IN.IMD
	X	<HLLEM>,532
	X	<HLLES>,533
	X	<HRLE>,534
	X	<HRLEI>,535,IN.IMD
	X	<HRLEM>,536
	X	<HRLES>,537
	X	<HRR>,540
	X	<HRRI>,541,IN.IMD
	X	<HRRM>,542
	X	<HRRS>,543
	X	<HLR>,544
	X	<HLRI>,545,IN.IMD
	X	<HLRM>,546
	X	<HLRS>,547
	X	<HRRZ>,550
	X	<HRRZI>,551,IN.IMD
	X	<HRRZM>,552
	X	<HRRZS>,553
	X	<HLRZ>,554
	X	<HLRZI>,555,IN.IMD
	X	<HLRZM>,556
	X	<HLRZS>,557
	X	<HRRO>,560
	X	<HRROI>,561,IN.IMD
	X	<HRROM>,562
	X	<HRROS>,563
	X	<HLRO>,564
	X	<HLROI>,565,IN.IMD
	X	<HLROM>,566
	X	<HLROS>,567
	X	<HRRE>,570
	X	<HRREI>,571,IN.IMD
	X	<HRREM>,572
	X	<HRRES>,573
	X	<HLRE>,574
	X	<HLREI>,575,IN.IMD
	X	<HLREM>,576
	X	<HLRES>,577
	X	<TRN>,600,IN.IMD
	X	<TLN>,601,IN.IMD
	X	<TRNE>,602,IN.IMD!IN.SKP
	X	<TLNE>,603,IN.IMD!IN.SKP
	X	<TRNA>,604,IN.IMD!IN.SKP
	X	<TLNA>,605,IN.IMD!IN.SKP
	X	<TRNN>,606,IN.IMD!IN.SKP
	X	<TLNN>,607,IN.IMD!IN.SKP
	X	<TDN>,610
	X	<TSN>,611
	X	<TDNE>,612,IN.SKP
	X	<TSNE>,613,IN.SKP
	X	<TDNA>,614,IN.SKP
	X	<TSNA>,615,IN.SKP
	X	<TDNN>,616,IN.SKP
	X	<TSNN>,617,IN.SKP
	X	<TRZ>,620,IN.IMD
	X	<TLZ>,621,IN.IMD
	X	<TRZE>,622,IN.IMD!IN.SKP
	X	<TLZE>,623,IN.IMD!IN.SKP
	X	<TRZA>,624,IN.IMD!IN.SKP
	X	<TLZA>,625,IN.IMD!IN.SKP
	X	<TRZN>,626,IN.IMD!IN.SKP
	X	<TLZN>,627,IN.IMD!IN.SKP
	X	<TDZ>,630
	X	<TSZ>,631
	X	<TDZE>,632,IN.SKP
	X	<TSZE>,633,IN.SKP
	X	<TDZA>,634,IN.SKP
	X	<TSZA>,635,IN.SKP
	X	<TDZN>,636,IN.SKP
	X	<TSZN>,637,IN.SKP
	X	<TRC>,640,IN.IMD
	X	<TLC>,641,IN.IMD
	X	<TRCE>,642,IN.IMD!IN.SKP
	X	<TLCE>,643,IN.IMD!IN.SKP
	X	<TRCA>,644,IN.IMD!IN.SKP
	X	<TLCA>,645,IN.IMD!IN.SKP
	X	<TRCN>,646,IN.IMD!IN.SKP
	X	<TLCN>,647,IN.IMD!IN.SKP
	X	<TDC>,650
	X	<TSC>,651
	X	<TDCE>,652,IN.SKP
	X	<TSCE>,653,IN.SKP
	X	<TDCA>,654,IN.SKP
	X	<TSCA>,655,IN.SKP
	X	<TDCN>,656,IN.SKP
	X	<TSCN>,657,IN.SKP
	X	<TRO>,660,IN.IMD
	X	<TLO>,661,IN.IMD
	X	<TROE>,662,IN.IMD!IN.SKP
	X	<TLOE>,663,IN.IMD!IN.SKP
	X	<TROA>,664,IN.IMD!IN.SKP
	X	<TLOA>,665,IN.IMD!IN.SKP
	X	<TRON>,666,IN.IMD!IN.SKP
	X	<TLON>,667,IN.IMD!IN.SKP
	X	<TDO>,670
	X	<TSO>,671
	X	<TDOE>,672,IN.SKP
	X	<TSOE>,673,IN.SKP
	X	<TDOA>,674,IN.SKP
	X	<TSOA>,675,IN.SKP
	X	<TDON>,676,IN.SKP
	X	<TSON>,677,IN.SKP
>
;BUILD TABLES

	DEFINE	X(XA,XB,XC)<
	<SIXBIT	/XA/>
>
.GMTAB:	OPCODE
NUMOPD==.-.GMTAB

	DEFINE	X(XA,XB,XC)<
	<XWD	XC,XB>
>

.GMSTS:	OPCODE
	LIT
	RELOC
IFN NIFL+NOFL,<
FNM:	BLOCK	4
>

	DEFINE	X(XA)<
DEV'XA':	BLOCK	3
BUF'XA':	BLOCK	3
>

	%IOCHN
ADDR:	ZZ
INST:	ZZ

HGHEND:	ZZ
LOWEND:	ZZ
STRT:	ZZ
REEN:	ZZ

SAVFF:	ZZ

ADDCNT:	ZZ
ADDTBL:	BLOCK	ATSZ

INSM2:	ZZ
INSM1:	ZZ

SB.DEV:	ZZ
SB.NME:	ZZ
SB.EXT:	ZZ
SB.PPN:	ZZ

OB.DEV:	ZZ
OB.NME:	ZZ
OB.EXT:	ZZ
OB.PPN:	ZZ

U.PPN:	ZZ
SAVSA:	ZZ
LSTADD:	ZZ
SAVADD:	ZZ
SAVINS:	ZZ
SAVEXT:	ZZ

LINE:	ZZ

PDL:	BLOCK	PDSZ

	END	START
    K@
'